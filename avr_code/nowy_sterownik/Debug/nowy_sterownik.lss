
nowy_sterownik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001bdc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  00800060  00001bdc  00001c70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000030f  00800130  00800130  00001d40  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a79  00000000  00000000  000020c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001429  00000000  00000000  00004b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017ef  00000000  00000000  00005f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e4  00000000  00000000  0000775c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000df6  00000000  00000000  00007e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000163e  00000000  00000000  00008c36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000a274  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      1c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      28:	0c 94 67 05 	jmp	0xace	; 0xace <__vector_10>
      2c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__vector_13>
      38:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__vector_14>
      3c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	6e 61       	ori	r22, 0x1E	; 30
      56:	6e 00       	.word	0x006e	; ????

00000058 <__c.2332>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf e5       	ldi	r28, 0x5F	; 95
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	11 e0       	ldi	r17, 0x01	; 1
     164:	a0 e6       	ldi	r26, 0x60	; 96
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	ec ed       	ldi	r30, 0xDC	; 220
     16a:	fb e1       	ldi	r31, 0x1B	; 27
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x10>
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	a0 33       	cpi	r26, 0x30	; 48
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0xc>

00000178 <__do_clear_bss>:
     178:	24 e0       	ldi	r18, 0x04	; 4
     17a:	a0 e3       	ldi	r26, 0x30	; 48
     17c:	b1 e0       	ldi	r27, 0x01	; 1
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	af 33       	cpi	r26, 0x3F	; 63
     184:	b2 07       	cpc	r27, r18
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 09 01 	call	0x212	; 0x212 <main>
     18c:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <_exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <debug_msg>:

#if L_DEBUG
#include <stdio.h>
char debug_buff[64];
void debug_msg( const char* format, ... )
{
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62
     19c:	ae 01       	movw	r20, r28
     19e:	4b 5f       	subi	r20, 0xFB	; 251
     1a0:	5f 4f       	sbci	r21, 0xFF	; 255
     1a2:	fa 01       	movw	r30, r20
     1a4:	61 91       	ld	r22, Z+
     1a6:	71 91       	ld	r23, Z+
     1a8:	af 01       	movw	r20, r30
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
     1aa:	89 ed       	ldi	r24, 0xD9	; 217
     1ac:	92 e0       	ldi	r25, 0x02	; 2
     1ae:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <vsprintf>
	va_end( arglist );
	for (int i = 0; i < strlen(debug_buff); i++) {
     1b2:	e9 ed       	ldi	r30, 0xD9	; 217
     1b4:	f2 e0       	ldi	r31, 0x02	; 2
     1b6:	df 01       	movw	r26, r30
     1b8:	0d 90       	ld	r0, X+
     1ba:	00 20       	and	r0, r0
     1bc:	e9 f7       	brne	.-6      	; 0x1b8 <debug_msg+0x24>
     1be:	9d 01       	movw	r18, r26
     1c0:	21 50       	subi	r18, 0x01	; 1
     1c2:	31 09       	sbc	r19, r1
     1c4:	08 c0       	rjmp	.+16     	; 0x1d6 <debug_msg+0x42>
		if (debug_buff[i] == '\n') {
     1c6:	81 91       	ld	r24, Z+
     1c8:	8a 30       	cpi	r24, 0x0A	; 10
     1ca:	29 f4       	brne	.+10     	; 0x1d6 <debug_msg+0x42>
			uart_puts("\n\rAT: ");
     1cc:	80 e6       	ldi	r24, 0x60	; 96
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	0e 94 ee 06 	call	0xddc	; 0xddc <uart0_puts>
			break;
     1d4:	03 c0       	rjmp	.+6      	; 0x1dc <debug_msg+0x48>
{
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
	va_end( arglist );
	for (int i = 0; i < strlen(debug_buff); i++) {
     1d6:	e2 17       	cp	r30, r18
     1d8:	f3 07       	cpc	r31, r19
     1da:	a9 f7       	brne	.-22     	; 0x1c6 <debug_msg+0x32>
			uart_puts("\n\rAT: ");
			break;
		}
	}
	#if USE_USART
	uart_puts(debug_buff);
     1dc:	89 ed       	ldi	r24, 0xD9	; 217
     1de:	92 e0       	ldi	r25, 0x02	; 2
     1e0:	0e 94 ee 06 	call	0xddc	; 0xddc <uart0_puts>
	#endif
}
     1e4:	df 91       	pop	r29
     1e6:	cf 91       	pop	r28
     1e8:	08 95       	ret

000001ea <init_pin>:
uint8_t servo_vibro_value;

void init_pin(void)
{
	//UART_TX_PIN
	DDRD |= (1<<1);
     1ea:	89 9a       	sbi	0x11, 1	; 17
     1ec:	08 95       	ret

000001ee <init_driver>:
}

void init_driver(void)
{
	#if USE_USART
	uart_init(UART_BAUD_SELECT(57600, F_CPU));
     1ee:	88 e0       	ldi	r24, 0x08	; 8
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 a3 06 	call	0xd46	; 0xd46 <uart0_init>
	#endif
	timer0_init(TIM0_PRESCALER, TIM0_ARR);
     1f6:	62 e3       	ldi	r22, 0x32	; 50
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	0e 94 9c 05 	call	0xb38	; 0xb38 <timer0_init>
	init_system();
     1fe:	0e 94 58 05 	call	0xab0	; 0xab0 <init_system>
	init_measure();
     202:	0e 94 c3 03 	call	0x786	; 0x786 <init_measure>
	at_communication_init();
     206:	0e 94 3f 03 	call	0x67e	; 0x67e <at_communication_init>
	CLEAR_PIN(SFIOR, PUD);
     20a:	80 b7       	in	r24, 0x30	; 48
     20c:	8b 7f       	andi	r24, 0xFB	; 251
     20e:	80 bf       	out	0x30, r24	; 48
     210:	08 95       	ret

00000212 <main>:

uint32_t tets_cnt;
int main(void)
{
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	0e 94 d5 04 	call	0x9aa	; 0x9aa <servo_init>
	#endif
	init_pin();
     218:	0e 94 f5 00 	call	0x1ea	; 0x1ea <init_pin>
	sei();
     21c:	78 94       	sei
	init_driver();
     21e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <init_driver>
	debug_msg("/-----------START SYSTEM------------/\n");
     222:	87 e6       	ldi	r24, 0x67	; 103
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	9f 93       	push	r25
     228:	8f 93       	push	r24
     22a:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
	on_system();
     22e:	0e 94 59 05 	call	0xab2	; 0xab2 <on_system>
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
		atm_com_process();
		at_read_data_process();
		#if SERIAL_PLOT && USE_USART
		uart_process();
		#endif
		if (tets_cnt < mktime.ms) {
     236:	c9 e3       	ldi	r28, 0x39	; 57
     238:	d4 e0       	ldi	r29, 0x04	; 4
			debug_msg("ATMEGA \n");
     23a:	0e e8       	ldi	r16, 0x8E	; 142
     23c:	10 e0       	ldi	r17, 0x00	; 0
	debug_msg("/-----------START SYSTEM------------/\n");
	on_system();
    /* Replace with your application code */
    while (1) 
    {
		dcmotor_process(motor_value);
     23e:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <motor_value>
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 9e 03 	call	0x73c	; 0x73c <dcmotor_process>
		#if CONFIG_DEVICE_SIEWNIK
		servo_process(servo_vibro_value);
     248:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <servo_vibro_value>
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 46 05 	call	0xa8c	; 0xa8c <servo_process>
		#endif
		measure_process();
     252:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <measure_process>
		accumulator_process();
     256:	0e 94 59 01 	call	0x2b2	; 0x2b2 <accumulator_process>
		atm_com_process();
     25a:	0e 94 05 03 	call	0x60a	; 0x60a <atm_com_process>
		at_read_data_process();
     25e:	0e 94 c8 02 	call	0x590	; 0x590 <at_read_data_process>
		#if SERIAL_PLOT && USE_USART
		uart_process();
		#endif
		if (tets_cnt < mktime.ms) {
     262:	4a 81       	ldd	r20, Y+2	; 0x02
     264:	5b 81       	ldd	r21, Y+3	; 0x03
     266:	6c 81       	ldd	r22, Y+4	; 0x04
     268:	7d 81       	ldd	r23, Y+5	; 0x05
     26a:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <tets_cnt>
     26e:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <tets_cnt+0x1>
     272:	a0 91 1b 03 	lds	r26, 0x031B	; 0x80031b <tets_cnt+0x2>
     276:	b0 91 1c 03 	lds	r27, 0x031C	; 0x80031c <tets_cnt+0x3>
     27a:	84 17       	cp	r24, r20
     27c:	95 07       	cpc	r25, r21
     27e:	a6 07       	cpc	r26, r22
     280:	b7 07       	cpc	r27, r23
     282:	e8 f6       	brcc	.-70     	; 0x23e <main+0x2c>
			debug_msg("ATMEGA \n");
     284:	1f 93       	push	r17
     286:	0f 93       	push	r16
     288:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
			tets_cnt = mktime.ms + 1000;
     28c:	8a 81       	ldd	r24, Y+2	; 0x02
     28e:	9b 81       	ldd	r25, Y+3	; 0x03
     290:	ac 81       	ldd	r26, Y+4	; 0x04
     292:	bd 81       	ldd	r27, Y+5	; 0x05
     294:	88 51       	subi	r24, 0x18	; 24
     296:	9c 4f       	sbci	r25, 0xFC	; 252
     298:	af 4f       	sbci	r26, 0xFF	; 255
     29a:	bf 4f       	sbci	r27, 0xFF	; 255
     29c:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <tets_cnt>
     2a0:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <tets_cnt+0x1>
     2a4:	a0 93 1b 03 	sts	0x031B, r26	; 0x80031b <tets_cnt+0x2>
     2a8:	b0 93 1c 03 	sts	0x031C, r27	; 0x80031c <tets_cnt+0x3>
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	c6 cf       	rjmp	.-116    	; 0x23e <main+0x2c>

000002b2 <accumulator_process>:
void accumulator_process(void)
{
	
	static timer_t accumulator_timer;
	
	if(accumulator_timer < mktime.ms)
     2b2:	40 91 3b 04 	lds	r20, 0x043B	; 0x80043b <mktime+0x2>
     2b6:	50 91 3c 04 	lds	r21, 0x043C	; 0x80043c <mktime+0x3>
     2ba:	60 91 3d 04 	lds	r22, 0x043D	; 0x80043d <mktime+0x4>
     2be:	70 91 3e 04 	lds	r23, 0x043E	; 0x80043e <mktime+0x5>
     2c2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     2c6:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
     2ca:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <__data_end+0x2>
     2ce:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <__data_end+0x3>
     2d2:	84 17       	cp	r24, r20
     2d4:	95 07       	cpc	r25, r21
     2d6:	a6 07       	cpc	r26, r22
     2d8:	b7 07       	cpc	r27, r23
     2da:	b8 f4       	brcc	.+46     	; 0x30a <accumulator_process+0x58>
	{
		filtered_accum_adc_val = measure_get_filtered_value(MEAS_ACCUM);
     2dc:	83 e0       	ldi	r24, 0x03	; 3
     2de:	0e 94 bc 04 	call	0x978	; 0x978 <measure_get_filtered_value>
		accumulator_timer = mktime.ms + 100;
     2e2:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <mktime+0x2>
     2e6:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <mktime+0x3>
     2ea:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <mktime+0x4>
     2ee:	b0 91 3e 04 	lds	r27, 0x043E	; 0x80043e <mktime+0x5>
     2f2:	8c 59       	subi	r24, 0x9C	; 156
     2f4:	9f 4f       	sbci	r25, 0xFF	; 255
     2f6:	af 4f       	sbci	r26, 0xFF	; 255
     2f8:	bf 4f       	sbci	r27, 0xFF	; 255
     2fa:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
     2fe:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__data_end+0x1>
     302:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <__data_end+0x2>
     306:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <__data_end+0x3>
     30a:	08 95       	ret

0000030c <adc_setchannel>:
/*
 * set an adc channel
 */
void adc_setchannel(uint8_t channel)
{
	ADCSRA &= ~(1 << ADEN);
     30c:	37 98       	cbi	0x06, 7	; 6
	ADMUX = (ADMUX & 0xf8) | (channel & 0x07); //set channel
     30e:	97 b1       	in	r25, 0x07	; 7
     310:	98 7f       	andi	r25, 0xF8	; 248
     312:	87 70       	andi	r24, 0x07	; 7
     314:	89 2b       	or	r24, r25
     316:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN);
     318:	37 9a       	sbi	0x06, 7	; 6
     31a:	08 95       	ret

0000031c <adc_readsel>:
/*
 * read from selected adc channel
 */
uint16_t adc_readsel(void)
{
	ADCSRA |= (1 << ADSC); // Start conversion
     31c:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & _BV(ADSC)); 
     31e:	36 99       	sbic	0x06, 6	; 6
     320:	fe cf       	rjmp	.-4      	; 0x31e <adc_readsel+0x2>
	//while( !(ADCSRA & (1<<ADIF)) ); // Wait for conversion to complete
	uint16_t adc = ADC;
     322:	84 b1       	in	r24, 0x04	; 4
     324:	95 b1       	in	r25, 0x05	; 5
	//ADCSRA |= (1 << ADIF); // Clear ADIF by writing one to it
	return(adc);
}
     326:	08 95       	ret

00000328 <adc_read>:
/*
 * read from adc channel
 */
uint16_t adc_read(uint8_t channel)
{
	adc_setchannel(channel);
     328:	0e 94 86 01 	call	0x30c	; 0x30c <adc_setchannel>
	return adc_readsel();
     32c:	0e 94 8e 01 	call	0x31c	; 0x31c <adc_readsel>
}
     330:	08 95       	ret

00000332 <clear_msg>:
uint16_t atmega_get_data(atmega_data_read_t data_type) {
	if (data_type < AT_R_LAST_POSITION) {
		return data_read[data_type];
	}
	return 0;
}
     332:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <byte_received>
     336:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <byte_received+0x1>
     33a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <byte_received+0x2>
     33e:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <byte_received+0x3>
     342:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <cmd>
     346:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <data_len>
     34a:	8c e3       	ldi	r24, 0x3C	; 60
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	0e 94 08 06 	call	0xc10	; 0xc10 <evTime_off>
     352:	08 95       	ret

00000354 <at_send_data>:
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	16 16       	cp	r1, r22
     35e:	17 06       	cpc	r1, r23
     360:	54 f4       	brge	.+20     	; 0x376 <at_send_data+0x22>
     362:	8c 01       	movw	r16, r24
     364:	ec 01       	movw	r28, r24
     366:	06 0f       	add	r16, r22
     368:	17 1f       	adc	r17, r23
     36a:	89 91       	ld	r24, Y+
     36c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <uart0_putc>
     370:	c0 17       	cp	r28, r16
     372:	d1 07       	cpc	r29, r17
     374:	d1 f7       	brne	.-12     	; 0x36a <at_send_data+0x16>
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	1f 91       	pop	r17
     37c:	0f 91       	pop	r16
     37e:	08 95       	ret

00000380 <at_write_data>:
     380:	ef e1       	ldi	r30, 0x1F	; 31
     382:	f3 e0       	ldi	r31, 0x03	; 3
     384:	8e ed       	ldi	r24, 0xDE	; 222
     386:	80 83       	st	Z, r24
     388:	86 e0       	ldi	r24, 0x06	; 6
     38a:	81 83       	std	Z+1, r24	; 0x01
     38c:	a9 e4       	ldi	r26, 0x49	; 73
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	e1 e2       	ldi	r30, 0x21	; 33
     392:	f3 e0       	ldi	r31, 0x03	; 3
     394:	27 e2       	ldi	r18, 0x27	; 39
     396:	33 e0       	ldi	r19, 0x03	; 3
     398:	8d 91       	ld	r24, X+
     39a:	81 93       	st	Z+, r24
     39c:	e2 17       	cp	r30, r18
     39e:	f3 07       	cpc	r31, r19
     3a0:	d9 f7       	brne	.-10     	; 0x398 <at_write_data+0x18>
     3a2:	68 e0       	ldi	r22, 0x08	; 8
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	8f e1       	ldi	r24, 0x1F	; 31
     3a8:	93 e0       	ldi	r25, 0x03	; 3
     3aa:	0e 94 aa 01 	call	0x354	; 0x354 <at_send_data>
     3ae:	08 95       	ret

000003b0 <data_process>:
	at_send_data((char *)send_buff, sizeof(data_write) + 2);
}

uint16_t atmega_get_data(atmega_data_read_t data_type) {
	if (data_type < AT_R_LAST_POSITION) {
		return data_read[data_type];
     3b0:	e1 e4       	ldi	r30, 0x41	; 65
     3b2:	f1 e0       	ldi	r31, 0x01	; 1
#define VIBRO_INIT_PIN	SET_PIN(VIBRO_DDR, VIBRO_PIN)
#define ON_VIBRO_PIN	SET_PIN(VIBRO_PORT, VIBRO_PIN)
#define OFF_VIBRO_PIN	CLEAR_PIN(VIBRO_PORT, VIBRO_PIN)

void data_process(void) {
	motor_read_value = atmega_get_data(AT_R_MOTOR_VALUE) & 0xFF;
     3b4:	80 81       	ld	r24, Z
     3b6:	91 81       	ldd	r25, Z+1	; 0x01
     3b8:	99 27       	eor	r25, r25
     3ba:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <motor_read_value+0x1>
     3be:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <motor_read_value>
	servo_read_value = atmega_get_data(AT_R_SERVO_VIBRO_VALUE);
     3c2:	82 81       	ldd	r24, Z+2	; 0x02
     3c4:	93 81       	ldd	r25, Z+3	; 0x03
     3c6:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <servo_read_value+0x1>
     3ca:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <servo_read_value>
	servo_vibro_is_on = atmega_get_data(AT_R_SERVO_VIBRO_IS_ON);
     3ce:	86 81       	ldd	r24, Z+6	; 0x06
     3d0:	97 81       	ldd	r25, Z+7	; 0x07
     3d2:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <servo_vibro_is_on+0x1>
     3d6:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <servo_vibro_is_on>
	at_send_data((char *)send_buff, sizeof(data_write) + 2);
}

uint16_t atmega_get_data(atmega_data_read_t data_type) {
	if (data_type < AT_R_LAST_POSITION) {
		return data_read[data_type];
     3da:	84 81       	ldd	r24, Z+4	; 0x04
     3dc:	95 81       	ldd	r25, Z+5	; 0x05

void data_process(void) {
	motor_read_value = atmega_get_data(AT_R_MOTOR_VALUE) & 0xFF;
	servo_read_value = atmega_get_data(AT_R_SERVO_VIBRO_VALUE);
	servo_vibro_is_on = atmega_get_data(AT_R_SERVO_VIBRO_IS_ON);
	motor_is_on = atmega_get_data(AT_R_MOTOR_IS_ON);
     3de:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <motor_is_on+0x1>
     3e2:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <motor_is_on>
	
	/* MOTOR SECTION */
	if (motor_is_on) {
     3e6:	89 2b       	or	r24, r25
     3e8:	39 f0       	breq	.+14     	; 0x3f8 <data_process+0x48>
		dcmotorpwm_start();
     3ea:	0e 94 6d 03 	call	0x6da	; 0x6da <dcmotorpwm_start>
		dcmotor_set_pwm((uint8_t) motor_read_value);
     3ee:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <motor_read_value>
     3f2:	0e 94 96 03 	call	0x72c	; 0x72c <dcmotor_set_pwm>
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <data_process+0x4c>
	}
	else {
		dcmotorpwm_stop();
     3f8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <dcmotorpwm_stop>
	}
	
	/* SERVO SECTION */
	if (servo_vibro_is_on) {
     3fc:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <servo_vibro_is_on>
     400:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <servo_vibro_is_on+0x1>
     404:	89 2b       	or	r24, r25
     406:	39 f0       	breq	.+14     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		servo_open(servo_read_value);
     408:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <servo_read_value>
     40c:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <servo_read_value+0x1>
     410:	0e 94 08 05 	call	0xa10	; 0xa10 <servo_open>
     414:	02 c0       	rjmp	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	}
	else {
		servo_close();
     416:	0e 94 28 05 	call	0xa50	; 0xa50 <servo_close>
	}
	
	/* VIBRO SECTION */
	if (servo_vibro_is_on) {
     41a:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <servo_vibro_is_on>
     41e:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <servo_vibro_is_on+0x1>
     422:	89 2b       	or	r24, r25
     424:	11 f0       	breq	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		ON_VIBRO_PIN;
     426:	95 9a       	sbi	0x12, 5	; 18
     428:	08 95       	ret
	}
	else {
		OFF_VIBRO_PIN;
     42a:	95 98       	cbi	0x12, 5	; 18
     42c:	08 95       	ret

0000042e <at_read_byte>:
	}
}

void at_read_byte(uint8_t byte) {
     42e:	cf 92       	push	r12
     430:	df 92       	push	r13
     432:	ef 92       	push	r14
     434:	ff 92       	push	r15
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
	if (byte_received == 0) {
     43a:	40 91 51 01 	lds	r20, 0x0151	; 0x800151 <byte_received>
     43e:	50 91 52 01 	lds	r21, 0x0152	; 0x800152 <byte_received+0x1>
     442:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <byte_received+0x2>
     446:	70 91 54 01 	lds	r23, 0x0154	; 0x800154 <byte_received+0x3>
     44a:	41 15       	cp	r20, r1
     44c:	51 05       	cpc	r21, r1
     44e:	61 05       	cpc	r22, r1
     450:	71 05       	cpc	r23, r1
     452:	b9 f4       	brne	.+46     	; 0x482 <at_read_byte+0x54>
		cmd = byte;
     454:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <cmd>
		byte_received++;
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	a0 e0       	ldi	r26, 0x00	; 0
     45e:	b0 e0       	ldi	r27, 0x00	; 0
     460:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <byte_received>
     464:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <byte_received+0x1>
     468:	a0 93 53 01 	sts	0x0153, r26	; 0x800153 <byte_received+0x2>
     46c:	b0 93 54 01 	sts	0x0154, r27	; 0x800154 <byte_received+0x3>
		evTime_start(&xTimers, 200);
     470:	48 ec       	ldi	r20, 0xC8	; 200
     472:	50 e0       	ldi	r21, 0x00	; 0
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	8c e3       	ldi	r24, 0x3C	; 60
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	0e 94 d0 05 	call	0xba0	; 0xba0 <evTime_start>
		return;
     480:	80 c0       	rjmp	.+256    	; 0x582 <at_read_byte+0x154>
	}

	switch(cmd) {
     482:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <cmd>
     486:	9e 3e       	cpi	r25, 0xEE	; 238
     488:	09 f4       	brne	.+2      	; 0x48c <at_read_byte+0x5e>
     48a:	76 c0       	rjmp	.+236    	; 0x578 <at_read_byte+0x14a>
     48c:	9e 3f       	cpi	r25, 0xFE	; 254
     48e:	09 f4       	brne	.+2      	; 0x492 <at_read_byte+0x64>
     490:	6e c0       	rjmp	.+220    	; 0x56e <at_read_byte+0x140>
     492:	9e 3d       	cpi	r25, 0xDE	; 222
     494:	09 f0       	breq	.+2      	; 0x498 <at_read_byte+0x6a>
     496:	73 c0       	rjmp	.+230    	; 0x57e <at_read_byte+0x150>
		case START_FRAME_WRITE:
		if (byte_received == 1) {
     498:	41 30       	cpi	r20, 0x01	; 1
     49a:	51 05       	cpc	r21, r1
     49c:	61 05       	cpc	r22, r1
     49e:	71 05       	cpc	r23, r1
     4a0:	19 f5       	brne	.+70     	; 0x4e8 <at_read_byte+0xba>
			data_len = byte;
     4a2:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <data_len>
			byte_received++;
     4a6:	42 e0       	ldi	r20, 0x02	; 2
     4a8:	50 e0       	ldi	r21, 0x00	; 0
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	40 93 51 01 	sts	0x0151, r20	; 0x800151 <byte_received>
     4b2:	50 93 52 01 	sts	0x0152, r21	; 0x800152 <byte_received+0x1>
     4b6:	60 93 53 01 	sts	0x0153, r22	; 0x800153 <byte_received+0x2>
     4ba:	70 93 54 01 	sts	0x0154, r23	; 0x800154 <byte_received+0x3>
			if (data_len != sizeof(data_read)) {
     4be:	88 30       	cpi	r24, 0x08	; 8
     4c0:	51 f0       	breq	.+20     	; 0x4d6 <at_read_byte+0xa8>
				clear_msg();
     4c2:	0e 94 99 01 	call	0x332	; 0x332 <clear_msg>
				debug_msg("FRAME BAD LEN\n\r");
     4c6:	87 e9       	ldi	r24, 0x97	; 151
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	9f 93       	push	r25
     4cc:	8f 93       	push	r24
     4ce:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
			}
			evTime_start(&xTimers, 200);
     4d6:	48 ec       	ldi	r20, 0xC8	; 200
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	60 e0       	ldi	r22, 0x00	; 0
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	8c e3       	ldi	r24, 0x3C	; 60
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	0e 94 d0 05 	call	0xba0	; 0xba0 <evTime_start>
     4e6:	4d c0       	rjmp	.+154    	; 0x582 <at_read_byte+0x154>
		}
		else if (byte_received - 2 < data_len) {
     4e8:	00 91 4f 01 	lds	r16, 0x014F	; 0x80014f <data_len>
     4ec:	10 e0       	ldi	r17, 0x00	; 0
     4ee:	20 e0       	ldi	r18, 0x00	; 0
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	6a 01       	movw	r12, r20
     4f4:	7b 01       	movw	r14, r22
     4f6:	92 e0       	ldi	r25, 0x02	; 2
     4f8:	c9 1a       	sub	r12, r25
     4fa:	d1 08       	sbc	r13, r1
     4fc:	e1 08       	sbc	r14, r1
     4fe:	f1 08       	sbc	r15, r1
     500:	c0 16       	cp	r12, r16
     502:	d1 06       	cpc	r13, r17
     504:	e2 06       	cpc	r14, r18
     506:	f3 06       	cpc	r15, r19
     508:	38 f5       	brcc	.+78     	; 0x558 <at_read_byte+0x12a>
			uint8_t *pnt = (uint8_t *)data_read;
			pnt[byte_received - 2] = byte;
     50a:	fa 01       	movw	r30, r20
     50c:	e1 5c       	subi	r30, 0xC1	; 193
     50e:	fe 4f       	sbci	r31, 0xFE	; 254
     510:	80 83       	st	Z, r24
			byte_received++;
     512:	db 01       	movw	r26, r22
     514:	ca 01       	movw	r24, r20
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	a1 1d       	adc	r26, r1
     51a:	b1 1d       	adc	r27, r1
     51c:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <byte_received>
     520:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <byte_received+0x1>
     524:	a0 93 53 01 	sts	0x0153, r26	; 0x800153 <byte_received+0x2>
     528:	b0 93 54 01 	sts	0x0154, r27	; 0x800154 <byte_received+0x3>
			if (byte_received - 2 == data_len) {
     52c:	41 50       	subi	r20, 0x01	; 1
     52e:	51 09       	sbc	r21, r1
     530:	61 09       	sbc	r22, r1
     532:	71 09       	sbc	r23, r1
     534:	04 17       	cp	r16, r20
     536:	15 07       	cpc	r17, r21
     538:	26 07       	cpc	r18, r22
     53a:	37 07       	cpc	r19, r23
     53c:	21 f4       	brne	.+8      	; 0x546 <at_read_byte+0x118>
				clear_msg();
     53e:	0e 94 99 01 	call	0x332	; 0x332 <clear_msg>
				/* Verify data */
				data_process();
     542:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <data_process>
				
			}
			evTime_start(&xTimers, 200);
     546:	48 ec       	ldi	r20, 0xC8	; 200
     548:	50 e0       	ldi	r21, 0x00	; 0
     54a:	60 e0       	ldi	r22, 0x00	; 0
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	8c e3       	ldi	r24, 0x3C	; 60
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	0e 94 d0 05 	call	0xba0	; 0xba0 <evTime_start>
     556:	15 c0       	rjmp	.+42     	; 0x582 <at_read_byte+0x154>
		}
		else {
			/* End receive data or unknown error */
			clear_msg();
     558:	0e 94 99 01 	call	0x332	; 0x332 <clear_msg>
			debug_msg("ATMEGA RECEIVE UNKNOW ERROR\n\r");
     55c:	87 ea       	ldi	r24, 0xA7	; 167
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	9f 93       	push	r25
     562:	8f 93       	push	r24
     564:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0a c0       	rjmp	.+20     	; 0x582 <at_read_byte+0x154>
		}
		break;

		case START_FRAME_READ:
		/* SEND BUFF data_write */
		at_write_data();
     56e:	0e 94 c0 01 	call	0x380	; 0x380 <at_write_data>
		clear_msg();
     572:	0e 94 99 01 	call	0x332	; 0x332 <clear_msg>
		break;
     576:	05 c0       	rjmp	.+10     	; 0x582 <at_read_byte+0x154>

		case START_FRAME_CMD:
		/* Nothing for host */
		clear_msg();
     578:	0e 94 99 01 	call	0x332	; 0x332 <clear_msg>
		break;
     57c:	02 c0       	rjmp	.+4      	; 0x582 <at_read_byte+0x154>

		default:
		//debug_msg("FRAME BAD START\n\r");
		clear_msg();
     57e:	0e 94 99 01 	call	0x332	; 0x332 <clear_msg>
	}
}
     582:	1f 91       	pop	r17
     584:	0f 91       	pop	r16
     586:	ff 90       	pop	r15
     588:	ef 90       	pop	r14
     58a:	df 90       	pop	r13
     58c:	cf 90       	pop	r12
     58e:	08 95       	ret

00000590 <at_read_data_process>:
	
}

void at_read_data_process(void) {
	static uint32_t atm_timer;
	if (atm_timer < mktime.ms) {
     590:	40 91 3b 04 	lds	r20, 0x043B	; 0x80043b <mktime+0x2>
     594:	50 91 3c 04 	lds	r21, 0x043C	; 0x80043c <mktime+0x3>
     598:	60 91 3d 04 	lds	r22, 0x043D	; 0x80043d <mktime+0x4>
     59c:	70 91 3e 04 	lds	r23, 0x043E	; 0x80043e <mktime+0x5>
     5a0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <atm_timer.1884>
     5a4:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <atm_timer.1884+0x1>
     5a8:	a0 91 3a 01 	lds	r26, 0x013A	; 0x80013a <atm_timer.1884+0x2>
     5ac:	b0 91 3b 01 	lds	r27, 0x013B	; 0x80013b <atm_timer.1884+0x3>
     5b0:	84 17       	cp	r24, r20
     5b2:	95 07       	cpc	r25, r21
     5b4:	a6 07       	cpc	r26, r22
     5b6:	b7 07       	cpc	r27, r23
     5b8:	38 f5       	brcc	.+78     	; 0x608 <at_read_data_process+0x78>
		
		uint8_t byte, error_val;
		uint16_t data = uart_getc();
     5ba:	0e 94 b9 06 	call	0xd72	; 0xd72 <uart0_getc>
		if (error_val == UART_NO_DATA) {
			atm_timer = mktime.ms + 50;
			return;
		}
		
		at_read_byte(byte);
     5be:	0e 94 17 02 	call	0x42e	; 0x42e <at_read_byte>
		
		if (evTime_check(&xTimers)) {
     5c2:	8c e3       	ldi	r24, 0x3C	; 60
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <evTime_check>
     5ca:	89 2b       	or	r24, r25
     5cc:	51 f0       	breq	.+20     	; 0x5e2 <at_read_data_process+0x52>
}

static void vTimerCallback( evTime *xTimer )
{
	(void)xTimer;
	clear_msg();
     5ce:	0e 94 99 01 	call	0x332	; 0x332 <clear_msg>
	debug_msg("vTimerCallback\n\r");
     5d2:	85 ec       	ldi	r24, 0xC5	; 197
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	9f 93       	push	r25
     5d8:	8f 93       	push	r24
     5da:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
		at_read_byte(byte);
		
		if (evTime_check(&xTimers)) {
			vTimerCallback(&xTimers);
		}
		atm_timer = mktime.ms + 5;
     5e2:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <mktime+0x2>
     5e6:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <mktime+0x3>
     5ea:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <mktime+0x4>
     5ee:	b0 91 3e 04 	lds	r27, 0x043E	; 0x80043e <mktime+0x5>
     5f2:	05 96       	adiw	r24, 0x05	; 5
     5f4:	a1 1d       	adc	r26, r1
     5f6:	b1 1d       	adc	r27, r1
     5f8:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <atm_timer.1884>
     5fc:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <atm_timer.1884+0x1>
     600:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <atm_timer.1884+0x2>
     604:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <atm_timer.1884+0x3>
     608:	08 95       	ret

0000060a <atm_com_process>:
	}
}

void atm_com_process(void) {
	static uint32_t atm_timer;
	if (atm_timer < mktime.ms)
     60a:	40 91 3b 04 	lds	r20, 0x043B	; 0x80043b <mktime+0x2>
     60e:	50 91 3c 04 	lds	r21, 0x043C	; 0x80043c <mktime+0x3>
     612:	60 91 3d 04 	lds	r22, 0x043D	; 0x80043d <mktime+0x4>
     616:	70 91 3e 04 	lds	r23, 0x043E	; 0x80043e <mktime+0x5>
     61a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <atm_timer.1907>
     61e:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <atm_timer.1907+0x1>
     622:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <atm_timer.1907+0x2>
     626:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <atm_timer.1907+0x3>
     62a:	84 17       	cp	r24, r20
     62c:	95 07       	cpc	r25, r21
     62e:	a6 07       	cpc	r26, r22
     630:	b7 07       	cpc	r27, r23
     632:	20 f5       	brcc	.+72     	; 0x67c <atm_com_process+0x72>
	{
		/* Do poprawy */
		data_write[AT_W_MEAS_ACCUM] = 123;//(uint16_t)accum_get_voltage();
     634:	e9 e4       	ldi	r30, 0x49	; 73
     636:	f1 e0       	ldi	r31, 0x01	; 1
     638:	8b e7       	ldi	r24, 0x7B	; 123
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	91 83       	std	Z+1, r25	; 0x01
     63e:	80 83       	st	Z, r24
		data_write[AT_W_MEAS_MOTOR] = 321;//(uint16_t)measure_get_current(MEAS_MOTOR, MOTOR_RESISTOR);
     640:	81 e4       	ldi	r24, 0x41	; 65
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	93 83       	std	Z+3, r25	; 0x03
     646:	82 83       	std	Z+2, r24	; 0x02
		data_write[AT_W_MEAS_SERVO] = 4095;//(uint16_t)measure_get_filtered_value(MEAS_SERVO);
     648:	8f ef       	ldi	r24, 0xFF	; 255
     64a:	9f e0       	ldi	r25, 0x0F	; 15
     64c:	95 83       	std	Z+5, r25	; 0x05
     64e:	84 83       	std	Z+4, r24	; 0x04
		at_write_data();
     650:	0e 94 c0 01 	call	0x380	; 0x380 <at_write_data>
		atm_timer = mktime.ms + 200;
     654:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <mktime+0x2>
     658:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <mktime+0x3>
     65c:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <mktime+0x4>
     660:	b0 91 3e 04 	lds	r27, 0x043E	; 0x80043e <mktime+0x5>
     664:	88 53       	subi	r24, 0x38	; 56
     666:	9f 4f       	sbci	r25, 0xFF	; 255
     668:	af 4f       	sbci	r26, 0xFF	; 255
     66a:	bf 4f       	sbci	r27, 0xFF	; 255
     66c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <atm_timer.1907>
     670:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <atm_timer.1907+0x1>
     674:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <atm_timer.1907+0x2>
     678:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <atm_timer.1907+0x3>
     67c:	08 95       	ret

0000067e <at_communication_init>:
	}
}


void at_communication_init(void) {
	VIBRO_INIT_PIN;
     67e:	8d 9a       	sbi	0x11, 5	; 17
	evTime_init(&xTimers);
     680:	8c e3       	ldi	r24, 0x3C	; 60
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	0e 94 c8 05 	call	0xb90	; 0xb90 <evTime_init>
     688:	08 95       	ret

0000068a <dcmotorpwm_init>:
	#if CONFIG_DEVICE_SOLARKA
	CLEAR_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
	#else
	SET_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
	#endif
	LED_MOTOR_OFF;
     68a:	86 ed       	ldi	r24, 0xD6	; 214
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	9f 93       	push	r25
     690:	8f 93       	push	r24
     692:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
     696:	89 e2       	ldi	r24, 0x29	; 41
     698:	94 e0       	ldi	r25, 0x04	; 4
     69a:	0e 94 c8 05 	call	0xb90	; 0xb90 <evTime_init>
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <motorD>
     6a4:	94 98       	cbi	0x12, 4	; 18
     6a6:	15 bc       	out	0x25, r1	; 37
     6a8:	8f 9a       	sbi	0x11, 7	; 17
     6aa:	97 9a       	sbi	0x12, 7	; 18
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	08 95       	ret

000006b2 <dcmotorpwm_stop>:
/*
 * stop the motor
 */
int dcmotorpwm_stop(void) {
	
	debug_msg("dcmotor stop\n");
     6b2:	84 ee       	ldi	r24, 0xE4	; 228
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	9f 93       	push	r25
     6b8:	8f 93       	push	r24
     6ba:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
	TCCR2 = 0;
     6be:	15 bc       	out	0x25, r1	; 37
	#if CONFIG_DEVICE_SOLARKA
	CLEAR_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
	#else
	SET_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
     6c0:	97 9a       	sbi	0x12, 7	; 18
	#endif
	OCR2 = 0;
     6c2:	13 bc       	out	0x23, r1	; 35
	motorD.last_state = motorD.state;
     6c4:	e5 e2       	ldi	r30, 0x25	; 37
     6c6:	f4 e0       	ldi	r31, 0x04	; 4
     6c8:	80 81       	ld	r24, Z
     6ca:	81 83       	std	Z+1, r24	; 0x01
	motorD.state = MOTOR_OFF;
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	80 83       	st	Z, r24
	return 1;
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
}
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	08 95       	ret

000006da <dcmotorpwm_start>:

int dcmotorpwm_start(void)
{
	if (motorD.state == MOTOR_OFF)
     6da:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <motorD>
     6de:	81 30       	cpi	r24, 0x01	; 1
     6e0:	11 f5       	brne	.+68     	; 0x726 <dcmotorpwm_start+0x4c>
	{
		debug_msg("Motor Start\n");
     6e2:	82 ef       	ldi	r24, 0xF2	; 242
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	9f 93       	push	r25
     6e8:	8f 93       	push	r24
     6ea:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
		
		#if CONFIG_DEVICE_SOLARKA
		TCCR2 |= (1<<COM21); 
		#else
		TCCR2 |= (1<<COM21) | (1<<COM20); 
     6ee:	85 b5       	in	r24, 0x25	; 37
     6f0:	80 63       	ori	r24, 0x30	; 48
     6f2:	85 bd       	out	0x25, r24	; 37
		#endif
		
		TCCR2 |= (1<<WGM20);
     6f4:	85 b5       	in	r24, 0x25	; 37
     6f6:	80 64       	ori	r24, 0x40	; 64
     6f8:	85 bd       	out	0x25, r24	; 37
		TCCR2 |= DCMOTORPWM_PRESCALER; //set prescaler
     6fa:	85 b5       	in	r24, 0x25	; 37
     6fc:	81 60       	ori	r24, 0x01	; 1
     6fe:	85 bd       	out	0x25, r24	; 37
		motorD.last_state = motorD.state;
     700:	e5 e2       	ldi	r30, 0x25	; 37
     702:	f4 e0       	ldi	r31, 0x04	; 4
     704:	80 81       	ld	r24, Z
     706:	81 83       	std	Z+1, r24	; 0x01
		motorD.state = MOTOR_ON;
     708:	82 e0       	ldi	r24, 0x02	; 2
     70a:	80 83       	st	Z, r24
		evTime_start(&motorD.timeout, 1000);
     70c:	48 ee       	ldi	r20, 0xE8	; 232
     70e:	53 e0       	ldi	r21, 0x03	; 3
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	89 e2       	ldi	r24, 0x29	; 41
     716:	94 e0       	ldi	r25, 0x04	; 4
     718:	0e 94 d0 05 	call	0xba0	; 0xba0 <evTime_start>
		return 1;
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	08 95       	ret
	}
	else 
	{
		//debug_msg("dcmotor canot start\n");
		return 0;
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     72a:	08 95       	ret

0000072c <dcmotor_set_pwm>:

void dcmotor_set_pwm(uint8_t value) {
	if (motorD.state == MOTOR_ON) {
     72c:	90 91 25 04 	lds	r25, 0x0425	; 0x800425 <motorD>
     730:	92 30       	cpi	r25, 0x02	; 2
     732:	19 f4       	brne	.+6      	; 0x73a <dcmotor_set_pwm+0xe>
		OCR2 = value;
     734:	83 bd       	out	0x23, r24	; 35
		motorD.pwm_value = value;
     736:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <motorD+0x3>
     73a:	08 95       	ret

0000073c <dcmotor_process>:
	}
}

void dcmotor_process(uint16_t value)
{
     73c:	cf 93       	push	r28
     73e:	c8 2f       	mov	r28, r24
	static evTime dcmotor_timer;
	if (evTime_process_period(&dcmotor_timer, 150))
     740:	46 e9       	ldi	r20, 0x96	; 150
     742:	50 e0       	ldi	r21, 0x00	; 0
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	85 e5       	ldi	r24, 0x55	; 85
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	0e 94 12 06 	call	0xc24	; 0xc24 <evTime_process_period>
     750:	89 2b       	or	r24, r25
     752:	29 f0       	breq	.+10     	; 0x75e <dcmotor_process+0x22>
	{
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
     754:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <motorD>
     758:	82 30       	cpi	r24, 0x02	; 2
     75a:	09 f4       	brne	.+2      	; 0x75e <dcmotor_process+0x22>
		{
			case MOTOR_ON:
			OCR2 = value;
     75c:	c3 bd       	out	0x23, r28	; 35
		
	}
	#if !TEST_APP
	
	#endif
}
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <filtered_value>:
static uint16_t s_o_t_adc;


static uint16_t filtered_value(uint16_t *tab, uint8_t size)
{
	uint16_t ret_val = *tab;
     762:	fc 01       	movw	r30, r24
     764:	20 81       	ld	r18, Z
     766:	31 81       	ldd	r19, Z+1	; 0x01
	for (uint8_t i = 1; i<size; i++)
     768:	62 30       	cpi	r22, 0x02	; 2
     76a:	58 f0       	brcs	.+22     	; 0x782 <filtered_value+0x20>
     76c:	32 96       	adiw	r30, 0x02	; 2
     76e:	91 e0       	ldi	r25, 0x01	; 1
	{
		ret_val = (ret_val + tab[i])/2;
     770:	41 91       	ld	r20, Z+
     772:	51 91       	ld	r21, Z+
     774:	24 0f       	add	r18, r20
     776:	35 1f       	adc	r19, r21
     778:	36 95       	lsr	r19
     77a:	27 95       	ror	r18


static uint16_t filtered_value(uint16_t *tab, uint8_t size)
{
	uint16_t ret_val = *tab;
	for (uint8_t i = 1; i<size; i++)
     77c:	9f 5f       	subi	r25, 0xFF	; 255
     77e:	69 13       	cpse	r22, r25
     780:	f7 cf       	rjmp	.-18     	; 0x770 <filtered_value+0xe>
	{
		ret_val = (ret_val + tab[i])/2;
	}
	return ret_val;
}
     782:	c9 01       	movw	r24, r18
     784:	08 95       	ret

00000786 <init_measure>:

void init_measure(void)
{
     786:	ee e9       	ldi	r30, 0x9E	; 158
     788:	f1 e0       	ldi	r31, 0x01	; 1
     78a:	26 ec       	ldi	r18, 0xC6	; 198
     78c:	31 e0       	ldi	r19, 0x01	; 1
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
     78e:	81 ef       	ldi	r24, 0xF1	; 241
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	81 93       	st	Z+, r24
     794:	91 93       	st	Z+, r25
	return ret_val;
}

void init_measure(void)
{
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
     796:	2e 17       	cp	r18, r30
     798:	3f 07       	cpc	r19, r31
     79a:	d9 f7       	brne	.-10     	; 0x792 <init_measure+0xc>
     79c:	ed e7       	ldi	r30, 0x7D	; 125
     79e:	f1 e0       	ldi	r31, 0x01	; 1
     7a0:	8b e9       	ldi	r24, 0x9B	; 155
     7a2:	91 e0       	ldi	r25, 0x01	; 1
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
	{
		motor_f_table[i] = 0;
     7a4:	11 92       	st	Z+, r1
     7a6:	11 92       	st	Z+, r1
{
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
     7a8:	8e 17       	cp	r24, r30
     7aa:	9f 07       	cpc	r25, r31
     7ac:	d9 f7       	brne	.-10     	; 0x7a4 <init_measure+0x1e>
     7ae:	e5 e6       	ldi	r30, 0x65	; 101
     7b0:	f1 e0       	ldi	r31, 0x01	; 1
     7b2:	89 e7       	ldi	r24, 0x79	; 121
     7b4:	91 e0       	ldi	r25, 0x01	; 1
	{
		motor_f_table[i] = 0;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_S_SIZE; i++)
	{
		s_o_t_f_table[i] = 0;
     7b6:	11 92       	st	Z+, r1
     7b8:	11 92       	st	Z+, r1
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
	{
		motor_f_table[i] = 0;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_S_SIZE; i++)
     7ba:	8e 17       	cp	r24, r30
     7bc:	9f 07       	cpc	r25, r31
     7be:	d9 f7       	brne	.-10     	; 0x7b6 <init_measure+0x30>
	{
		s_o_t_f_table[i] = 0;
	}
}
     7c0:	08 95       	ret

000007c2 <measure_process>:
static timer_t measure_timer;
static uint32_t debug_msg_counter;
void measure_process(void)
{
     7c2:	cf 92       	push	r12
     7c4:	df 92       	push	r13
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
	if (measure_timer < mktime.ms)
     7ce:	40 91 3b 04 	lds	r20, 0x043B	; 0x80043b <mktime+0x2>
     7d2:	50 91 3c 04 	lds	r21, 0x043C	; 0x80043c <mktime+0x3>
     7d6:	60 91 3d 04 	lds	r22, 0x043D	; 0x80043d <mktime+0x4>
     7da:	70 91 3e 04 	lds	r23, 0x043E	; 0x80043e <mktime+0x5>
     7de:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <measure_timer>
     7e2:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <measure_timer+0x1>
     7e6:	a0 91 60 01 	lds	r26, 0x0160	; 0x800160 <measure_timer+0x2>
     7ea:	b0 91 61 01 	lds	r27, 0x0161	; 0x800161 <measure_timer+0x3>
     7ee:	84 17       	cp	r24, r20
     7f0:	95 07       	cpc	r25, r21
     7f2:	a6 07       	cpc	r26, r22
     7f4:	b7 07       	cpc	r27, r23
     7f6:	08 f0       	brcs	.+2      	; 0x7fa <measure_process+0x38>
     7f8:	b8 c0       	rjmp	.+368    	; 0x96a <__stack+0x10b>
	{
		measure_timer = mktime.ms + 20;
     7fa:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <mktime+0x2>
     7fe:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <mktime+0x3>
     802:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <mktime+0x4>
     806:	b0 91 3e 04 	lds	r27, 0x043E	; 0x80043e <mktime+0x5>
     80a:	44 96       	adiw	r24, 0x14	; 20
     80c:	a1 1d       	adc	r26, r1
     80e:	b1 1d       	adc	r27, r1
     810:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <measure_timer>
     814:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <measure_timer+0x1>
     818:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <measure_timer+0x2>
     81c:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <measure_timer+0x3>
		accum_adc = adc_read(ACCUMULATOR_ADC_CH); 
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	0e 94 94 01 	call	0x328	; 0x328 <adc_read>
     826:	ec 01       	movw	r28, r24
		#if CONFIG_DEVICE_SOLARKA
		#endif
		#if CONFIG_DEVICE_SIEWNIK
		accum_adc += motor_filter_value*0.27; //motor_filter_value*0.0075*1025/5/5.7
     828:	60 91 9b 01 	lds	r22, 0x019B	; 0x80019b <motor_filter_value>
     82c:	70 91 9c 01 	lds	r23, 0x019C	; 0x80019c <motor_filter_value+0x1>
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 99 07 	call	0xf32	; 0xf32 <__floatunsisf>
     838:	21 e7       	ldi	r18, 0x71	; 113
     83a:	3d e3       	ldi	r19, 0x3D	; 61
     83c:	4a e8       	ldi	r20, 0x8A	; 138
     83e:	5e e3       	ldi	r21, 0x3E	; 62
     840:	0e 94 27 08 	call	0x104e	; 0x104e <__mulsf3>
     844:	6b 01       	movw	r12, r22
     846:	7c 01       	movw	r14, r24
     848:	be 01       	movw	r22, r28
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 99 07 	call	0xf32	; 0xf32 <__floatunsisf>
     852:	9b 01       	movw	r18, r22
     854:	ac 01       	movw	r20, r24
     856:	c7 01       	movw	r24, r14
     858:	b6 01       	movw	r22, r12
     85a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__addsf3>
     85e:	0e 94 6a 07 	call	0xed4	; 0xed4 <__fixunssfsi>
     862:	70 93 c9 01 	sts	0x01C9, r23	; 0x8001c9 <accum_adc+0x1>
     866:	60 93 c8 01 	sts	0x01C8, r22	; 0x8001c8 <accum_adc>
		#endif
		accumulator_tab[iteration_adc_accum_table] = accum_adc;
     86a:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <iteration_adc_accum_table>
     86e:	e2 2f       	mov	r30, r18
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	ee 0f       	add	r30, r30
     874:	ff 1f       	adc	r31, r31
     876:	e2 56       	subi	r30, 0x62	; 98
     878:	fe 4f       	sbci	r31, 0xFE	; 254
     87a:	71 83       	std	Z+1, r23	; 0x01
     87c:	60 83       	st	Z, r22
		
		iteration_adc_accum_table++;
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	82 0f       	add	r24, r18
     882:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <iteration_adc_accum_table>
		motor_adc = adc_read(MOTOR_ADC_CH);
     886:	82 e0       	ldi	r24, 0x02	; 2
     888:	0e 94 94 01 	call	0x328	; 0x328 <adc_read>
		if (motor_adc > 31) motor_adc = motor_adc - 31;
     88c:	80 32       	cpi	r24, 0x20	; 32
     88e:	91 05       	cpc	r25, r1
     890:	30 f0       	brcs	.+12     	; 0x89e <__stack+0x3f>
     892:	4f 97       	sbiw	r24, 0x1f	; 31
     894:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <motor_adc+0x1>
     898:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <motor_adc>
     89c:	04 c0       	rjmp	.+8      	; 0x8a6 <__stack+0x47>
		else motor_adc = 0;
     89e:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <motor_adc+0x1>
     8a2:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <motor_adc>
		motor_f_table[iteration_adc_motor_table] = motor_adc;
     8a6:	e0 91 9d 01 	lds	r30, 0x019D	; 0x80019d <iteration_adc_motor_table>
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	ee 0f       	add	r30, r30
     8ae:	ff 1f       	adc	r31, r31
     8b0:	e3 58       	subi	r30, 0x83	; 131
     8b2:	fe 4f       	sbci	r31, 0xFE	; 254
     8b4:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <motor_adc>
     8b8:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <motor_adc+0x1>
     8bc:	91 83       	std	Z+1, r25	; 0x01
     8be:	80 83       	st	Z, r24
		///////////////////////////////////////////////////////////
		////////// TODO isset_timer
		s_o_t_adc = adc_read(SERVO_ADC_CH);
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	0e 94 94 01 	call	0x328	; 0x328 <adc_read>
     8c6:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <s_o_t_adc+0x1>
     8ca:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <s_o_t_adc>

		s_o_t_f_table[s_o_t_iteration_adc_table] = s_o_t_adc;
     8ce:	c0 91 64 01 	lds	r28, 0x0164	; 0x800164 <s_o_t_iteration_adc_table>
     8d2:	ec 2f       	mov	r30, r28
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	ee 0f       	add	r30, r30
     8d8:	ff 1f       	adc	r31, r31
     8da:	eb 59       	subi	r30, 0x9B	; 155
     8dc:	fe 4f       	sbci	r31, 0xFE	; 254
     8de:	91 83       	std	Z+1, r25	; 0x01
     8e0:	80 83       	st	Z, r24
		iteration_adc_motor_table++;
     8e2:	d0 91 9d 01 	lds	r29, 0x019D	; 0x80019d <iteration_adc_motor_table>
     8e6:	df 5f       	subi	r29, 0xFF	; 255
     8e8:	d0 93 9d 01 	sts	0x019D, r29	; 0x80019d <iteration_adc_motor_table>
		s_o_t_iteration_adc_table++;
     8ec:	cf 5f       	subi	r28, 0xFF	; 255
     8ee:	c0 93 64 01 	sts	0x0164, r28	; 0x800164 <s_o_t_iteration_adc_table>
		filtered_accum_adc_val = filtered_value(accumulator_tab, ACCUMULATOR_SIZE_TAB);
     8f2:	64 e1       	ldi	r22, 0x14	; 20
     8f4:	8e e9       	ldi	r24, 0x9E	; 158
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	0e 94 b1 03 	call	0x762	; 0x762 <filtered_value>
     8fc:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <filtered_accum_adc_val+0x1>
     900:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <filtered_accum_adc_val>
		motor_filter_value = filtered_value(motor_f_table, FILTER_TABLE_SIZE);
     904:	6f e0       	ldi	r22, 0x0F	; 15
     906:	8d e7       	ldi	r24, 0x7D	; 125
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	0e 94 b1 03 	call	0x762	; 0x762 <filtered_value>
     90e:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <motor_filter_value+0x1>
     912:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <motor_filter_value>
		s_o_t_filter_value = filtered_value(s_o_t_f_table, FILTER_TABLE_S_SIZE);
     916:	6a e0       	ldi	r22, 0x0A	; 10
     918:	85 e6       	ldi	r24, 0x65	; 101
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	0e 94 b1 03 	call	0x762	; 0x762 <filtered_value>
     920:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <s_o_t_filter_value+0x1>
     924:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <s_o_t_filter_value>
		debug_msg_counter++;
     928:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <debug_msg_counter>
     92c:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <debug_msg_counter+0x1>
     930:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <debug_msg_counter+0x2>
     934:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <debug_msg_counter+0x3>
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	a1 1d       	adc	r26, r1
     93c:	b1 1d       	adc	r27, r1
     93e:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <debug_msg_counter>
     942:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <debug_msg_counter+0x1>
     946:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <debug_msg_counter+0x2>
     94a:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <debug_msg_counter+0x3>
		
		if (iteration_adc_accum_table == ACCUMULATOR_SIZE_TAB) iteration_adc_accum_table = 0;
     94e:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <iteration_adc_accum_table>
     952:	84 31       	cpi	r24, 0x14	; 20
     954:	11 f4       	brne	.+4      	; 0x95a <__stack+0xfb>
     956:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <iteration_adc_accum_table>
		if (s_o_t_iteration_adc_table == FILTER_TABLE_S_SIZE) s_o_t_iteration_adc_table = 0;
     95a:	ca 30       	cpi	r28, 0x0A	; 10
     95c:	11 f4       	brne	.+4      	; 0x962 <__stack+0x103>
     95e:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <s_o_t_iteration_adc_table>
		if (iteration_adc_motor_table == FILTER_TABLE_SIZE) iteration_adc_motor_table = 0;
     962:	df 30       	cpi	r29, 0x0F	; 15
     964:	11 f4       	brne	.+4      	; 0x96a <__stack+0x10b>
     966:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <iteration_adc_motor_table>
	}
}
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	df 90       	pop	r13
     974:	cf 90       	pop	r12
     976:	08 95       	ret

00000978 <measure_get_filtered_value>:

uint16_t measure_get_filtered_value(_type_measure type)
{
    switch(type)
     978:	83 30       	cpi	r24, 0x03	; 3
     97a:	18 f4       	brcc	.+6      	; 0x982 <measure_get_filtered_value+0xa>
     97c:	81 30       	cpi	r24, 0x01	; 1
     97e:	40 f0       	brcs	.+16     	; 0x990 <measure_get_filtered_value+0x18>
     980:	0c c0       	rjmp	.+24     	; 0x99a <measure_get_filtered_value+0x22>
     982:	83 30       	cpi	r24, 0x03	; 3
     984:	79 f4       	brne	.+30     	; 0x9a4 <measure_get_filtered_value+0x2c>
    {
        case MEAS_ACCUM:
        return filtered_accum_adc_val;
     986:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <filtered_accum_adc_val>
     98a:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <filtered_accum_adc_val+0x1>
     98e:	08 95       	ret
        break;

        case MEAS_MOTOR:
        return motor_filter_value;
     990:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <motor_filter_value>
     994:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <motor_filter_value+0x1>
     998:	08 95       	ret
        break;

        case MEAS_SERVO:
		case MEAS_TEMPERATURE:
        return s_o_t_filter_value;
     99a:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <s_o_t_filter_value>
     99e:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <s_o_t_filter_value+0x1>
     9a2:	08 95       	ret
        break;
    }
	return 0;
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	90 e0       	ldi	r25, 0x00	; 0
}
     9a8:	08 95       	ret

000009aa <servo_init>:
}

int servo_is_open(void)
{
	return servoD.state == SERVO_OPEN;
}
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	2f e1       	ldi	r18, 0x1F	; 31
     9b0:	3e e4       	ldi	r19, 0x4E	; 78
     9b2:	37 bd       	out	0x27, r19	; 39
     9b4:	26 bd       	out	0x26, r18	; 38
     9b6:	81 b3       	in	r24, 0x11	; 17
     9b8:	80 63       	ori	r24, 0x30	; 48
     9ba:	81 bb       	out	0x11, r24	; 17
     9bc:	19 bc       	out	0x29, r1	; 41
     9be:	18 bc       	out	0x28, r1	; 40
     9c0:	1b bc       	out	0x2b, r1	; 43
     9c2:	1a bc       	out	0x2a, r1	; 42
     9c4:	8f b5       	in	r24, 0x2f	; 47
     9c6:	82 60       	ori	r24, 0x02	; 2
     9c8:	8f bd       	out	0x2f, r24	; 47
     9ca:	8e b5       	in	r24, 0x2e	; 46
     9cc:	88 61       	ori	r24, 0x18	; 24
     9ce:	8e bd       	out	0x2e, r24	; 46
     9d0:	8f b5       	in	r24, 0x2f	; 47
     9d2:	80 68       	ori	r24, 0x80	; 128
     9d4:	8f bd       	out	0x2f, r24	; 47
     9d6:	8e b5       	in	r24, 0x2e	; 46
     9d8:	82 60       	ori	r24, 0x02	; 2
     9da:	8e bd       	out	0x2e, r24	; 46
     9dc:	3b bd       	out	0x2b, r19	; 43
     9de:	2a bd       	out	0x2a, r18	; 42
     9e0:	96 98       	cbi	0x12, 6	; 18
     9e2:	1b bc       	out	0x2b, r1	; 43
     9e4:	1a bc       	out	0x2a, r1	; 42
     9e6:	cf e2       	ldi	r28, 0x2F	; 47
     9e8:	d4 e0       	ldi	r29, 0x04	; 4
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	88 83       	st	Y, r24
     9ee:	1b 82       	std	Y+3, r1	; 0x03
     9f0:	83 e3       	ldi	r24, 0x33	; 51
     9f2:	94 e0       	ldi	r25, 0x04	; 4
     9f4:	0e 94 c8 05 	call	0xb90	; 0xb90 <evTime_init>
     9f8:	19 86       	std	Y+9, r1	; 0x09
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	9f 93       	push	r25
     a00:	8f 93       	push	r24
     a02:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	08 95       	ret

00000a10 <servo_open>:

int servo_open(uint16_t value) // value - 0-100%
{
     a10:	9c 01       	movw	r18, r24
	if (servoD.state == SERVO_CLOSE || servoD.state == SERVO_OPEN)
     a12:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <servoD>
     a16:	91 50       	subi	r25, 0x01	; 1
     a18:	92 30       	cpi	r25, 0x02	; 2
     a1a:	b8 f4       	brcc	.+46     	; 0xa4a <servo_open+0x3a>
	{
		servoD.state = SERVO_OPEN;
     a1c:	ef e2       	ldi	r30, 0x2F	; 47
     a1e:	f4 e0       	ldi	r31, 0x04	; 4
     a20:	82 e0       	ldi	r24, 0x02	; 2
     a22:	80 83       	st	Z, r24
		servoD.value = value;
     a24:	23 83       	std	Z+3, r18	; 0x03
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
     a26:	3b bd       	out	0x2b, r19	; 43
     a28:	2a bd       	out	0x2a, r18	; 42
	if (servoD.state == SERVO_CLOSE || servoD.state == SERVO_OPEN)
	{
		servoD.state = SERVO_OPEN;
		servoD.value = value;
		servo_set_pwm_val((uint16_t)value);
		debug_msg("SERVO_OPPENED %d\n", value);
     a2a:	3f 93       	push	r19
     a2c:	2f 93       	push	r18
     a2e:	8c e0       	ldi	r24, 0x0C	; 12
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	9f 93       	push	r25
     a34:	8f 93       	push	r24
     a36:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
		LED_SERVO_ON;
     a3a:	96 9a       	sbi	0x12, 6	; 18
		return 1;
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	08 95       	ret
	}
	
	return 0;
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	90 e0       	ldi	r25, 0x00	; 0
}
     a4e:	08 95       	ret

00000a50 <servo_close>:

int servo_close(void)
{
	if (servo_is_open())
     a50:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <servoD>
     a54:	82 30       	cpi	r24, 0x02	; 2
     a56:	b9 f4       	brne	.+46     	; 0xa86 <servo_close+0x36>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
     a58:	1b bc       	out	0x2b, r1	; 43
     a5a:	1a bc       	out	0x2a, r1	; 42
int servo_close(void)
{
	if (servo_is_open())
	{
		servo_set_pwm_val((uint16_t)0);
		servoD.state = SERVO_CLOSE;
     a5c:	ef e2       	ldi	r30, 0x2F	; 47
     a5e:	f4 e0       	ldi	r31, 0x04	; 4
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	80 83       	st	Z, r24
		servoD.value = 0;
     a64:	13 82       	std	Z+3, r1	; 0x03
		debug_msg("SERVO_CLOSED %d\n", servoD.value);
     a66:	1f 92       	push	r1
     a68:	1f 92       	push	r1
     a6a:	8e e1       	ldi	r24, 0x1E	; 30
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	9f 93       	push	r25
     a70:	8f 93       	push	r24
     a72:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
		LED_SERVO_OFF;
     a76:	96 98       	cbi	0x12, 6	; 18
		return 1;
     a78:	0f 90       	pop	r0
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	0f 90       	pop	r0
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	08 95       	ret
	}

	return 0;
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
}
     a8a:	08 95       	ret

00000a8c <servo_process>:

void servo_process(uint16_t value)
{
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	ec 01       	movw	r28, r24
	static evTime servo_timer;
	if (evTime_process_period(&servo_timer, 75))
     a92:	4b e4       	ldi	r20, 0x4B	; 75
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	8b ec       	ldi	r24, 0xCB	; 203
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	0e 94 12 06 	call	0xc24	; 0xc24 <evTime_process_period>
     aa2:	89 2b       	or	r24, r25
     aa4:	11 f0       	breq	.+4      	; 0xaaa <servo_process+0x1e>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
     aa6:	db bd       	out	0x2b, r29	; 43
     aa8:	ca bd       	out	0x2a, r28	; 42
	static evTime servo_timer;
	if (evTime_process_period(&servo_timer, 75))
	{
		servo_set_pwm_val((uint16_t)value);
	}
}
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	08 95       	ret

00000ab0 <init_system>:
extern uint8_t servo_vibro_value;

extern uint8_t motor_value;

void init_system(void)
{
     ab0:	08 95       	ret

00000ab2 <on_system>:

}

void on_system(void)
{
	dcmotorpwm_init();	
     ab2:	0e 94 45 03 	call	0x68a	; 0x68a <dcmotorpwm_init>
	servo_init(0);
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	0e 94 d5 04 	call	0x9aa	; 0x9aa <servo_init>
	init_measure();
     abc:	0e 94 c3 03 	call	0x786	; 0x786 <init_measure>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <system_events+0x1>
     ac8:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <system_events>
     acc:	08 95       	ret

00000ace <__vector_10>:
	int time_to_end;
	if (evt->timer > mktime.ms)
		time_to_end = evt->timer - mktime.ms;
	else time_to_end = 0;
	return time_to_end;
}
     ace:	1f 92       	push	r1
     ad0:	0f 92       	push	r0
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	0f 92       	push	r0
     ad6:	11 24       	eor	r1, r1
     ad8:	2f 93       	push	r18
     ada:	8f 93       	push	r24
     adc:	9f 93       	push	r25
     ade:	af 93       	push	r26
     ae0:	bf 93       	push	r27
     ae2:	ef 93       	push	r30
     ae4:	ff 93       	push	r31
     ae6:	e9 e3       	ldi	r30, 0x39	; 57
     ae8:	f4 e0       	ldi	r31, 0x04	; 4
     aea:	80 81       	ld	r24, Z
     aec:	91 81       	ldd	r25, Z+1	; 0x01
     aee:	c2 96       	adiw	r24, 0x32	; 50
     af0:	91 83       	std	Z+1, r25	; 0x01
     af2:	80 83       	st	Z, r24
     af4:	80 81       	ld	r24, Z
     af6:	91 81       	ldd	r25, Z+1	; 0x01
     af8:	88 3e       	cpi	r24, 0xE8	; 232
     afa:	93 40       	sbci	r25, 0x03	; 3
     afc:	88 f0       	brcs	.+34     	; 0xb20 <__vector_10+0x52>
     afe:	82 81       	ldd	r24, Z+2	; 0x02
     b00:	93 81       	ldd	r25, Z+3	; 0x03
     b02:	a4 81       	ldd	r26, Z+4	; 0x04
     b04:	b5 81       	ldd	r27, Z+5	; 0x05
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	a1 1d       	adc	r26, r1
     b0a:	b1 1d       	adc	r27, r1
     b0c:	82 83       	std	Z+2, r24	; 0x02
     b0e:	93 83       	std	Z+3, r25	; 0x03
     b10:	a4 83       	std	Z+4, r26	; 0x04
     b12:	b5 83       	std	Z+5, r27	; 0x05
     b14:	80 81       	ld	r24, Z
     b16:	91 81       	ldd	r25, Z+1	; 0x01
     b18:	88 5e       	subi	r24, 0xE8	; 232
     b1a:	93 40       	sbci	r25, 0x03	; 3
     b1c:	91 83       	std	Z+1, r25	; 0x01
     b1e:	80 83       	st	Z, r24
     b20:	ff 91       	pop	r31
     b22:	ef 91       	pop	r30
     b24:	bf 91       	pop	r27
     b26:	af 91       	pop	r26
     b28:	9f 91       	pop	r25
     b2a:	8f 91       	pop	r24
     b2c:	2f 91       	pop	r18
     b2e:	0f 90       	pop	r0
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	0f 90       	pop	r0
     b34:	1f 90       	pop	r1
     b36:	18 95       	reti

00000b38 <timer0_init>:
     b38:	93 b7       	in	r25, 0x33	; 51
     b3a:	98 60       	ori	r25, 0x08	; 8
     b3c:	93 bf       	out	0x33, r25	; 51
     b3e:	6c bf       	out	0x3c, r22	; 60
     b40:	82 30       	cpi	r24, 0x02	; 2
     b42:	99 f0       	breq	.+38     	; 0xb6a <timer0_init+0x32>
     b44:	28 f4       	brcc	.+10     	; 0xb50 <timer0_init+0x18>
     b46:	88 23       	and	r24, r24
     b48:	41 f0       	breq	.+16     	; 0xb5a <timer0_init+0x22>
     b4a:	81 30       	cpi	r24, 0x01	; 1
     b4c:	51 f0       	breq	.+20     	; 0xb62 <timer0_init+0x2a>
     b4e:	19 c0       	rjmp	.+50     	; 0xb82 <timer0_init+0x4a>
     b50:	83 30       	cpi	r24, 0x03	; 3
     b52:	79 f0       	breq	.+30     	; 0xb72 <timer0_init+0x3a>
     b54:	84 30       	cpi	r24, 0x04	; 4
     b56:	89 f0       	breq	.+34     	; 0xb7a <timer0_init+0x42>
     b58:	14 c0       	rjmp	.+40     	; 0xb82 <timer0_init+0x4a>
     b5a:	83 b7       	in	r24, 0x33	; 51
     b5c:	81 60       	ori	r24, 0x01	; 1
     b5e:	83 bf       	out	0x33, r24	; 51
     b60:	13 c0       	rjmp	.+38     	; 0xb88 <timer0_init+0x50>
     b62:	83 b7       	in	r24, 0x33	; 51
     b64:	82 60       	ori	r24, 0x02	; 2
     b66:	83 bf       	out	0x33, r24	; 51
     b68:	0f c0       	rjmp	.+30     	; 0xb88 <timer0_init+0x50>
     b6a:	83 b7       	in	r24, 0x33	; 51
     b6c:	83 60       	ori	r24, 0x03	; 3
     b6e:	83 bf       	out	0x33, r24	; 51
     b70:	0b c0       	rjmp	.+22     	; 0xb88 <timer0_init+0x50>
     b72:	83 b7       	in	r24, 0x33	; 51
     b74:	84 60       	ori	r24, 0x04	; 4
     b76:	83 bf       	out	0x33, r24	; 51
     b78:	07 c0       	rjmp	.+14     	; 0xb88 <timer0_init+0x50>
     b7a:	83 b7       	in	r24, 0x33	; 51
     b7c:	85 60       	ori	r24, 0x05	; 5
     b7e:	83 bf       	out	0x33, r24	; 51
     b80:	03 c0       	rjmp	.+6      	; 0xb88 <timer0_init+0x50>
     b82:	83 b7       	in	r24, 0x33	; 51
     b84:	81 60       	ori	r24, 0x01	; 1
     b86:	83 bf       	out	0x33, r24	; 51
     b88:	89 b7       	in	r24, 0x39	; 57
     b8a:	82 60       	ori	r24, 0x02	; 2
     b8c:	89 bf       	out	0x39, r24	; 57
     b8e:	08 95       	ret

00000b90 <evTime_init>:
     b90:	23 e0       	ldi	r18, 0x03	; 3
     b92:	fc 01       	movw	r30, r24
     b94:	24 83       	std	Z+4, r18	; 0x04
     b96:	10 82       	st	Z, r1
     b98:	11 82       	std	Z+1, r1	; 0x01
     b9a:	12 82       	std	Z+2, r1	; 0x02
     b9c:	13 82       	std	Z+3, r1	; 0x03
     b9e:	08 95       	ret

00000ba0 <evTime_start>:
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	21 e0       	ldi	r18, 0x01	; 1
     ba6:	fc 01       	movw	r30, r24
     ba8:	24 83       	std	Z+4, r18	; 0x04
     baa:	00 91 3b 04 	lds	r16, 0x043B	; 0x80043b <mktime+0x2>
     bae:	10 91 3c 04 	lds	r17, 0x043C	; 0x80043c <mktime+0x3>
     bb2:	20 91 3d 04 	lds	r18, 0x043D	; 0x80043d <mktime+0x4>
     bb6:	30 91 3e 04 	lds	r19, 0x043E	; 0x80043e <mktime+0x5>
     bba:	40 0f       	add	r20, r16
     bbc:	51 1f       	adc	r21, r17
     bbe:	62 1f       	adc	r22, r18
     bc0:	73 1f       	adc	r23, r19
     bc2:	40 83       	st	Z, r20
     bc4:	51 83       	std	Z+1, r21	; 0x01
     bc6:	62 83       	std	Z+2, r22	; 0x02
     bc8:	73 83       	std	Z+3, r23	; 0x03
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	08 95       	ret

00000bd0 <evTime_check>:

int evTime_check(evTime * evt)
{
     bd0:	fc 01       	movw	r30, r24
	if (evt->time_state == TIMER_START)
     bd2:	84 81       	ldd	r24, Z+4	; 0x04
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	b1 f4       	brne	.+44     	; 0xc04 <evTime_check+0x34>
	{
		if (evt->timer < mktime.ms) 
     bd8:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <mktime+0x2>
     bdc:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <mktime+0x3>
     be0:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <mktime+0x4>
     be4:	b0 91 3e 04 	lds	r27, 0x043E	; 0x80043e <mktime+0x5>
     be8:	40 81       	ld	r20, Z
     bea:	51 81       	ldd	r21, Z+1	; 0x01
     bec:	62 81       	ldd	r22, Z+2	; 0x02
     bee:	73 81       	ldd	r23, Z+3	; 0x03
     bf0:	48 17       	cp	r20, r24
     bf2:	59 07       	cpc	r21, r25
     bf4:	6a 07       	cpc	r22, r26
     bf6:	7b 07       	cpc	r23, r27
     bf8:	40 f4       	brcc	.+16     	; 0xc0a <evTime_check+0x3a>
		{
			evt->time_state = TIMER_END;
     bfa:	82 e0       	ldi	r24, 0x02	; 2
     bfc:	84 83       	std	Z+4, r24	; 0x04
			return 1;
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	08 95       	ret
		}
		else return 0;
	}
	else return -1;
     c04:	8f ef       	ldi	r24, 0xFF	; 255
     c06:	9f ef       	ldi	r25, 0xFF	; 255
     c08:	08 95       	ret
		if (evt->timer < mktime.ms) 
		{
			evt->time_state = TIMER_END;
			return 1;
		}
		else return 0;
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
	}
	else return -1;
}
     c0e:	08 95       	ret

00000c10 <evTime_off>:

int evTime_off(evTime * evt)
{
	return evt->time_state == TIMER_OFF;
     c10:	21 e0       	ldi	r18, 0x01	; 1
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	fc 01       	movw	r30, r24
     c16:	84 81       	ldd	r24, Z+4	; 0x04
     c18:	83 30       	cpi	r24, 0x03	; 3
     c1a:	11 f0       	breq	.+4      	; 0xc20 <evTime_off+0x10>
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
}
     c20:	c9 01       	movw	r24, r18
     c22:	08 95       	ret

00000c24 <evTime_process_period>:

int evTime_process_period(evTime * timer, uint32_t period)
{
     c24:	cf 92       	push	r12
     c26:	df 92       	push	r13
     c28:	ef 92       	push	r14
     c2a:	ff 92       	push	r15
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	ec 01       	movw	r28, r24
     c36:	6a 01       	movw	r12, r20
     c38:	7b 01       	movw	r14, r22
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
     c3a:	8c 81       	ldd	r24, Y+4	; 0x04
     c3c:	81 11       	cpse	r24, r1
     c3e:	06 c0       	rjmp	.+12     	; 0xc4c <evTime_process_period+0x28>
	#endif
}

void evTime_init(evTime * evt)
{
	evt->time_state = TIMER_OFF;
     c40:	83 e0       	ldi	r24, 0x03	; 3
     c42:	8c 83       	std	Y+4, r24	; 0x04
	evt->timer = 0;
     c44:	18 82       	st	Y, r1
     c46:	19 82       	std	Y+1, r1	; 0x01
     c48:	1a 82       	std	Y+2, r1	; 0x02
     c4a:	1b 82       	std	Y+3, r1	; 0x03

int evTime_process_period(evTime * timer, uint32_t period)
{
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
	ret_val = evTime_check(timer);
     c4c:	ce 01       	movw	r24, r28
     c4e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <evTime_check>
     c52:	8c 01       	movw	r16, r24
	if (ret_val == 1)
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	31 f4       	brne	.+12     	; 0xc64 <evTime_process_period+0x40>
	{
		evTime_start(timer, period);
     c58:	b7 01       	movw	r22, r14
     c5a:	a6 01       	movw	r20, r12
     c5c:	ce 01       	movw	r24, r28
     c5e:	0e 94 d0 05 	call	0xba0	; 0xba0 <evTime_start>
		return 1;
     c62:	0d c0       	rjmp	.+26     	; 0xc7e <evTime_process_period+0x5a>
	}
	else if (evTime_off(timer))
     c64:	8c 81       	ldd	r24, Y+4	; 0x04
     c66:	83 30       	cpi	r24, 0x03	; 3
     c68:	41 f4       	brne	.+16     	; 0xc7a <evTime_process_period+0x56>
	{
		evTime_start(timer, period);
     c6a:	b7 01       	movw	r22, r14
     c6c:	a6 01       	movw	r20, r12
     c6e:	ce 01       	movw	r24, r28
     c70:	0e 94 d0 05 	call	0xba0	; 0xba0 <evTime_start>
	}
	return 0;
     c74:	00 e0       	ldi	r16, 0x00	; 0
     c76:	10 e0       	ldi	r17, 0x00	; 0
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <evTime_process_period+0x5a>
     c7a:	00 e0       	ldi	r16, 0x00	; 0
     c7c:	10 e0       	ldi	r17, 0x00	; 0
}
     c7e:	c8 01       	movw	r24, r16
     c80:	df 91       	pop	r29
     c82:	cf 91       	pop	r28
     c84:	1f 91       	pop	r17
     c86:	0f 91       	pop	r16
     c88:	ff 90       	pop	r15
     c8a:	ef 90       	pop	r14
     c8c:	df 90       	pop	r13
     c8e:	cf 90       	pop	r12
     c90:	08 95       	ret

00000c92 <__vector_13>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
     c92:	1f 92       	push	r1
     c94:	0f 92       	push	r0
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	0f 92       	push	r0
     c9a:	11 24       	eor	r1, r1
     c9c:	2f 93       	push	r18
     c9e:	3f 93       	push	r19
     ca0:	4f 93       	push	r20
     ca2:	5f 93       	push	r21
     ca4:	8f 93       	push	r24
     ca6:	9f 93       	push	r25
     ca8:	ef 93       	push	r30
     caa:	ff 93       	push	r31
     cac:	2b b1       	in	r18, 0x0b	; 11
     cae:	3c b1       	in	r19, 0x0c	; 12
     cb0:	28 71       	andi	r18, 0x18	; 24
     cb2:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <UART_RxHead>
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	8f 77       	andi	r24, 0x7F	; 127
     cbc:	99 27       	eor	r25, r25
     cbe:	40 91 d1 01 	lds	r20, 0x01D1	; 0x8001d1 <UART_RxTail>
     cc2:	50 e0       	ldi	r21, 0x00	; 0
     cc4:	84 17       	cp	r24, r20
     cc6:	95 07       	cpc	r25, r21
     cc8:	39 f0       	breq	.+14     	; 0xcd8 <__vector_13+0x46>
     cca:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <UART_RxHead>
     cce:	fc 01       	movw	r30, r24
     cd0:	eb 52       	subi	r30, 0x2B	; 43
     cd2:	fe 4f       	sbci	r31, 0xFE	; 254
     cd4:	30 83       	st	Z, r19
     cd6:	01 c0       	rjmp	.+2      	; 0xcda <__vector_13+0x48>
     cd8:	22 e0       	ldi	r18, 0x02	; 2
     cda:	20 93 d0 01 	sts	0x01D0, r18	; 0x8001d0 <UART_LastRxError>
     cde:	ff 91       	pop	r31
     ce0:	ef 91       	pop	r30
     ce2:	9f 91       	pop	r25
     ce4:	8f 91       	pop	r24
     ce6:	5f 91       	pop	r21
     ce8:	4f 91       	pop	r20
     cea:	3f 91       	pop	r19
     cec:	2f 91       	pop	r18
     cee:	0f 90       	pop	r0
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	0f 90       	pop	r0
     cf4:	1f 90       	pop	r1
     cf6:	18 95       	reti

00000cf8 <__vector_14>:
     cf8:	1f 92       	push	r1
     cfa:	0f 92       	push	r0
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	0f 92       	push	r0
     d00:	11 24       	eor	r1, r1
     d02:	8f 93       	push	r24
     d04:	9f 93       	push	r25
     d06:	ef 93       	push	r30
     d08:	ff 93       	push	r31
     d0a:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <UART_TxHead>
     d0e:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <UART_TxTail>
     d12:	98 17       	cp	r25, r24
     d14:	71 f0       	breq	.+28     	; 0xd32 <__vector_14+0x3a>
     d16:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <UART_TxTail>
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	01 96       	adiw	r24, 0x01	; 1
     d1e:	8f 77       	andi	r24, 0x7F	; 127
     d20:	99 27       	eor	r25, r25
     d22:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <UART_TxTail>
     d26:	fc 01       	movw	r30, r24
     d28:	eb 5a       	subi	r30, 0xAB	; 171
     d2a:	fd 4f       	sbci	r31, 0xFD	; 253
     d2c:	80 81       	ld	r24, Z
     d2e:	8c b9       	out	0x0c, r24	; 12
     d30:	01 c0       	rjmp	.+2      	; 0xd34 <__vector_14+0x3c>
     d32:	55 98       	cbi	0x0a, 5	; 10
     d34:	ff 91       	pop	r31
     d36:	ef 91       	pop	r30
     d38:	9f 91       	pop	r25
     d3a:	8f 91       	pop	r24
     d3c:	0f 90       	pop	r0
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	0f 90       	pop	r0
     d42:	1f 90       	pop	r1
     d44:	18 95       	reti

00000d46 <uart0_init>:
     d46:	f8 94       	cli
     d48:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <UART_TxHead>
     d4c:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <UART_TxTail>
     d50:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <UART_RxHead>
     d54:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <UART_RxTail>
     d58:	78 94       	sei
     d5a:	99 23       	and	r25, r25
     d5c:	1c f4       	brge	.+6      	; 0xd64 <uart0_init+0x1e>
     d5e:	22 e0       	ldi	r18, 0x02	; 2
     d60:	2b b9       	out	0x0b, r18	; 11
     d62:	9f 77       	andi	r25, 0x7F	; 127
     d64:	90 bd       	out	0x20, r25	; 32
     d66:	89 b9       	out	0x09, r24	; 9
     d68:	88 e9       	ldi	r24, 0x98	; 152
     d6a:	8a b9       	out	0x0a, r24	; 10
     d6c:	86 e8       	ldi	r24, 0x86	; 134
     d6e:	80 bd       	out	0x20, r24	; 32
     d70:	08 95       	ret

00000d72 <uart0_getc>:
     d72:	f8 94       	cli
     d74:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <UART_RxHead>
     d78:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <UART_RxTail>
     d7c:	98 13       	cpse	r25, r24
     d7e:	04 c0       	rjmp	.+8      	; 0xd88 <uart0_getc+0x16>
     d80:	78 94       	sei
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	91 e0       	ldi	r25, 0x01	; 1
     d86:	08 95       	ret
     d88:	78 94       	sei
     d8a:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <UART_RxTail>
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	01 96       	adiw	r24, 0x01	; 1
     d92:	8f 77       	andi	r24, 0x7F	; 127
     d94:	99 27       	eor	r25, r25
     d96:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <UART_RxTail>
     d9a:	fc 01       	movw	r30, r24
     d9c:	eb 52       	subi	r30, 0x2B	; 43
     d9e:	fe 4f       	sbci	r31, 0xFE	; 254
     da0:	20 81       	ld	r18, Z
     da2:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <UART_LastRxError>
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	98 2f       	mov	r25, r24
     daa:	88 27       	eor	r24, r24
     dac:	82 0f       	add	r24, r18
     dae:	91 1d       	adc	r25, r1
     db0:	08 95       	ret

00000db2 <uart0_putc>:
		}
	} while (tmphead == txtail_tmp); /* wait for free space in buffer */
#else
	uint16_t tmphead;
	
	tmphead = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
     db2:	40 91 d4 01 	lds	r20, 0x01D4	; 0x8001d4 <UART_TxHead>
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	4f 5f       	subi	r20, 0xFF	; 255
     dba:	5f 4f       	sbci	r21, 0xFF	; 255
     dbc:	4f 77       	andi	r20, 0x7F	; 127
     dbe:	55 27       	eor	r21, r21
	
	while (tmphead == UART_TxTail); /* wait for free space in buffer */
     dc0:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <UART_TxTail>
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	42 17       	cp	r20, r18
     dc8:	53 07       	cpc	r21, r19
     dca:	d1 f3       	breq	.-12     	; 0xdc0 <uart0_putc+0xe>
#endif

	UART_TxBuf[tmphead] = data;
     dcc:	fa 01       	movw	r30, r20
     dce:	eb 5a       	subi	r30, 0xAB	; 171
     dd0:	fd 4f       	sbci	r31, 0xFD	; 253
     dd2:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
     dd4:	40 93 d4 01 	sts	0x01D4, r20	; 0x8001d4 <UART_TxHead>

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
     dd8:	55 9a       	sbi	0x0a, 5	; 10
     dda:	08 95       	ret

00000ddc <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	ec 01       	movw	r28, r24
	while (*s) {
     de2:	88 81       	ld	r24, Y
     de4:	88 23       	and	r24, r24
     de6:	31 f0       	breq	.+12     	; 0xdf4 <uart0_puts+0x18>
     de8:	21 96       	adiw	r28, 0x01	; 1
		uart0_putc(*s++);
     dea:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
	while (*s) {
     dee:	89 91       	ld	r24, Y+
     df0:	81 11       	cpse	r24, r1
     df2:	fb cf       	rjmp	.-10     	; 0xdea <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	08 95       	ret

00000dfa <__subsf3>:
     dfa:	50 58       	subi	r21, 0x80	; 128

00000dfc <__addsf3>:
     dfc:	bb 27       	eor	r27, r27
     dfe:	aa 27       	eor	r26, r26
     e00:	0e 94 15 07 	call	0xe2a	; 0xe2a <__addsf3x>
     e04:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_round>
     e08:	0e 94 df 07 	call	0xfbe	; 0xfbe <__fp_pscA>
     e0c:	38 f0       	brcs	.+14     	; 0xe1c <__addsf3+0x20>
     e0e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__fp_pscB>
     e12:	20 f0       	brcs	.+8      	; 0xe1c <__addsf3+0x20>
     e14:	39 f4       	brne	.+14     	; 0xe24 <__addsf3+0x28>
     e16:	9f 3f       	cpi	r25, 0xFF	; 255
     e18:	19 f4       	brne	.+6      	; 0xe20 <__addsf3+0x24>
     e1a:	26 f4       	brtc	.+8      	; 0xe24 <__addsf3+0x28>
     e1c:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__fp_nan>
     e20:	0e f4       	brtc	.+2      	; 0xe24 <__addsf3+0x28>
     e22:	e0 95       	com	r30
     e24:	e7 fb       	bst	r30, 7
     e26:	0c 94 d6 07 	jmp	0xfac	; 0xfac <__fp_inf>

00000e2a <__addsf3x>:
     e2a:	e9 2f       	mov	r30, r25
     e2c:	0e 94 fe 07 	call	0xffc	; 0xffc <__fp_split3>
     e30:	58 f3       	brcs	.-42     	; 0xe08 <__addsf3+0xc>
     e32:	ba 17       	cp	r27, r26
     e34:	62 07       	cpc	r22, r18
     e36:	73 07       	cpc	r23, r19
     e38:	84 07       	cpc	r24, r20
     e3a:	95 07       	cpc	r25, r21
     e3c:	20 f0       	brcs	.+8      	; 0xe46 <__addsf3x+0x1c>
     e3e:	79 f4       	brne	.+30     	; 0xe5e <__addsf3x+0x34>
     e40:	a6 f5       	brtc	.+104    	; 0xeaa <__addsf3x+0x80>
     e42:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_zero>
     e46:	0e f4       	brtc	.+2      	; 0xe4a <__addsf3x+0x20>
     e48:	e0 95       	com	r30
     e4a:	0b 2e       	mov	r0, r27
     e4c:	ba 2f       	mov	r27, r26
     e4e:	a0 2d       	mov	r26, r0
     e50:	0b 01       	movw	r0, r22
     e52:	b9 01       	movw	r22, r18
     e54:	90 01       	movw	r18, r0
     e56:	0c 01       	movw	r0, r24
     e58:	ca 01       	movw	r24, r20
     e5a:	a0 01       	movw	r20, r0
     e5c:	11 24       	eor	r1, r1
     e5e:	ff 27       	eor	r31, r31
     e60:	59 1b       	sub	r21, r25
     e62:	99 f0       	breq	.+38     	; 0xe8a <__addsf3x+0x60>
     e64:	59 3f       	cpi	r21, 0xF9	; 249
     e66:	50 f4       	brcc	.+20     	; 0xe7c <__addsf3x+0x52>
     e68:	50 3e       	cpi	r21, 0xE0	; 224
     e6a:	68 f1       	brcs	.+90     	; 0xec6 <__addsf3x+0x9c>
     e6c:	1a 16       	cp	r1, r26
     e6e:	f0 40       	sbci	r31, 0x00	; 0
     e70:	a2 2f       	mov	r26, r18
     e72:	23 2f       	mov	r18, r19
     e74:	34 2f       	mov	r19, r20
     e76:	44 27       	eor	r20, r20
     e78:	58 5f       	subi	r21, 0xF8	; 248
     e7a:	f3 cf       	rjmp	.-26     	; 0xe62 <__addsf3x+0x38>
     e7c:	46 95       	lsr	r20
     e7e:	37 95       	ror	r19
     e80:	27 95       	ror	r18
     e82:	a7 95       	ror	r26
     e84:	f0 40       	sbci	r31, 0x00	; 0
     e86:	53 95       	inc	r21
     e88:	c9 f7       	brne	.-14     	; 0xe7c <__addsf3x+0x52>
     e8a:	7e f4       	brtc	.+30     	; 0xeaa <__addsf3x+0x80>
     e8c:	1f 16       	cp	r1, r31
     e8e:	ba 0b       	sbc	r27, r26
     e90:	62 0b       	sbc	r22, r18
     e92:	73 0b       	sbc	r23, r19
     e94:	84 0b       	sbc	r24, r20
     e96:	ba f0       	brmi	.+46     	; 0xec6 <__addsf3x+0x9c>
     e98:	91 50       	subi	r25, 0x01	; 1
     e9a:	a1 f0       	breq	.+40     	; 0xec4 <__addsf3x+0x9a>
     e9c:	ff 0f       	add	r31, r31
     e9e:	bb 1f       	adc	r27, r27
     ea0:	66 1f       	adc	r22, r22
     ea2:	77 1f       	adc	r23, r23
     ea4:	88 1f       	adc	r24, r24
     ea6:	c2 f7       	brpl	.-16     	; 0xe98 <__addsf3x+0x6e>
     ea8:	0e c0       	rjmp	.+28     	; 0xec6 <__addsf3x+0x9c>
     eaa:	ba 0f       	add	r27, r26
     eac:	62 1f       	adc	r22, r18
     eae:	73 1f       	adc	r23, r19
     eb0:	84 1f       	adc	r24, r20
     eb2:	48 f4       	brcc	.+18     	; 0xec6 <__addsf3x+0x9c>
     eb4:	87 95       	ror	r24
     eb6:	77 95       	ror	r23
     eb8:	67 95       	ror	r22
     eba:	b7 95       	ror	r27
     ebc:	f7 95       	ror	r31
     ebe:	9e 3f       	cpi	r25, 0xFE	; 254
     ec0:	08 f0       	brcs	.+2      	; 0xec4 <__addsf3x+0x9a>
     ec2:	b0 cf       	rjmp	.-160    	; 0xe24 <__addsf3+0x28>
     ec4:	93 95       	inc	r25
     ec6:	88 0f       	add	r24, r24
     ec8:	08 f0       	brcs	.+2      	; 0xecc <__addsf3x+0xa2>
     eca:	99 27       	eor	r25, r25
     ecc:	ee 0f       	add	r30, r30
     ece:	97 95       	ror	r25
     ed0:	87 95       	ror	r24
     ed2:	08 95       	ret

00000ed4 <__fixunssfsi>:
     ed4:	0e 94 06 08 	call	0x100c	; 0x100c <__fp_splitA>
     ed8:	88 f0       	brcs	.+34     	; 0xefc <__fixunssfsi+0x28>
     eda:	9f 57       	subi	r25, 0x7F	; 127
     edc:	98 f0       	brcs	.+38     	; 0xf04 <__fixunssfsi+0x30>
     ede:	b9 2f       	mov	r27, r25
     ee0:	99 27       	eor	r25, r25
     ee2:	b7 51       	subi	r27, 0x17	; 23
     ee4:	b0 f0       	brcs	.+44     	; 0xf12 <__fixunssfsi+0x3e>
     ee6:	e1 f0       	breq	.+56     	; 0xf20 <__fixunssfsi+0x4c>
     ee8:	66 0f       	add	r22, r22
     eea:	77 1f       	adc	r23, r23
     eec:	88 1f       	adc	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	1a f0       	brmi	.+6      	; 0xef8 <__fixunssfsi+0x24>
     ef2:	ba 95       	dec	r27
     ef4:	c9 f7       	brne	.-14     	; 0xee8 <__fixunssfsi+0x14>
     ef6:	14 c0       	rjmp	.+40     	; 0xf20 <__fixunssfsi+0x4c>
     ef8:	b1 30       	cpi	r27, 0x01	; 1
     efa:	91 f0       	breq	.+36     	; 0xf20 <__fixunssfsi+0x4c>
     efc:	0e 94 20 08 	call	0x1040	; 0x1040 <__fp_zero>
     f00:	b1 e0       	ldi	r27, 0x01	; 1
     f02:	08 95       	ret
     f04:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_zero>
     f08:	67 2f       	mov	r22, r23
     f0a:	78 2f       	mov	r23, r24
     f0c:	88 27       	eor	r24, r24
     f0e:	b8 5f       	subi	r27, 0xF8	; 248
     f10:	39 f0       	breq	.+14     	; 0xf20 <__fixunssfsi+0x4c>
     f12:	b9 3f       	cpi	r27, 0xF9	; 249
     f14:	cc f3       	brlt	.-14     	; 0xf08 <__fixunssfsi+0x34>
     f16:	86 95       	lsr	r24
     f18:	77 95       	ror	r23
     f1a:	67 95       	ror	r22
     f1c:	b3 95       	inc	r27
     f1e:	d9 f7       	brne	.-10     	; 0xf16 <__fixunssfsi+0x42>
     f20:	3e f4       	brtc	.+14     	; 0xf30 <__fixunssfsi+0x5c>
     f22:	90 95       	com	r25
     f24:	80 95       	com	r24
     f26:	70 95       	com	r23
     f28:	61 95       	neg	r22
     f2a:	7f 4f       	sbci	r23, 0xFF	; 255
     f2c:	8f 4f       	sbci	r24, 0xFF	; 255
     f2e:	9f 4f       	sbci	r25, 0xFF	; 255
     f30:	08 95       	ret

00000f32 <__floatunsisf>:
     f32:	e8 94       	clt
     f34:	09 c0       	rjmp	.+18     	; 0xf48 <__floatsisf+0x12>

00000f36 <__floatsisf>:
     f36:	97 fb       	bst	r25, 7
     f38:	3e f4       	brtc	.+14     	; 0xf48 <__floatsisf+0x12>
     f3a:	90 95       	com	r25
     f3c:	80 95       	com	r24
     f3e:	70 95       	com	r23
     f40:	61 95       	neg	r22
     f42:	7f 4f       	sbci	r23, 0xFF	; 255
     f44:	8f 4f       	sbci	r24, 0xFF	; 255
     f46:	9f 4f       	sbci	r25, 0xFF	; 255
     f48:	99 23       	and	r25, r25
     f4a:	a9 f0       	breq	.+42     	; 0xf76 <__floatsisf+0x40>
     f4c:	f9 2f       	mov	r31, r25
     f4e:	96 e9       	ldi	r25, 0x96	; 150
     f50:	bb 27       	eor	r27, r27
     f52:	93 95       	inc	r25
     f54:	f6 95       	lsr	r31
     f56:	87 95       	ror	r24
     f58:	77 95       	ror	r23
     f5a:	67 95       	ror	r22
     f5c:	b7 95       	ror	r27
     f5e:	f1 11       	cpse	r31, r1
     f60:	f8 cf       	rjmp	.-16     	; 0xf52 <__floatsisf+0x1c>
     f62:	fa f4       	brpl	.+62     	; 0xfa2 <__floatsisf+0x6c>
     f64:	bb 0f       	add	r27, r27
     f66:	11 f4       	brne	.+4      	; 0xf6c <__floatsisf+0x36>
     f68:	60 ff       	sbrs	r22, 0
     f6a:	1b c0       	rjmp	.+54     	; 0xfa2 <__floatsisf+0x6c>
     f6c:	6f 5f       	subi	r22, 0xFF	; 255
     f6e:	7f 4f       	sbci	r23, 0xFF	; 255
     f70:	8f 4f       	sbci	r24, 0xFF	; 255
     f72:	9f 4f       	sbci	r25, 0xFF	; 255
     f74:	16 c0       	rjmp	.+44     	; 0xfa2 <__floatsisf+0x6c>
     f76:	88 23       	and	r24, r24
     f78:	11 f0       	breq	.+4      	; 0xf7e <__floatsisf+0x48>
     f7a:	96 e9       	ldi	r25, 0x96	; 150
     f7c:	11 c0       	rjmp	.+34     	; 0xfa0 <__floatsisf+0x6a>
     f7e:	77 23       	and	r23, r23
     f80:	21 f0       	breq	.+8      	; 0xf8a <__floatsisf+0x54>
     f82:	9e e8       	ldi	r25, 0x8E	; 142
     f84:	87 2f       	mov	r24, r23
     f86:	76 2f       	mov	r23, r22
     f88:	05 c0       	rjmp	.+10     	; 0xf94 <__floatsisf+0x5e>
     f8a:	66 23       	and	r22, r22
     f8c:	71 f0       	breq	.+28     	; 0xfaa <__floatsisf+0x74>
     f8e:	96 e8       	ldi	r25, 0x86	; 134
     f90:	86 2f       	mov	r24, r22
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	2a f0       	brmi	.+10     	; 0xfa2 <__floatsisf+0x6c>
     f98:	9a 95       	dec	r25
     f9a:	66 0f       	add	r22, r22
     f9c:	77 1f       	adc	r23, r23
     f9e:	88 1f       	adc	r24, r24
     fa0:	da f7       	brpl	.-10     	; 0xf98 <__floatsisf+0x62>
     fa2:	88 0f       	add	r24, r24
     fa4:	96 95       	lsr	r25
     fa6:	87 95       	ror	r24
     fa8:	97 f9       	bld	r25, 7
     faa:	08 95       	ret

00000fac <__fp_inf>:
     fac:	97 f9       	bld	r25, 7
     fae:	9f 67       	ori	r25, 0x7F	; 127
     fb0:	80 e8       	ldi	r24, 0x80	; 128
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	60 e0       	ldi	r22, 0x00	; 0
     fb6:	08 95       	ret

00000fb8 <__fp_nan>:
     fb8:	9f ef       	ldi	r25, 0xFF	; 255
     fba:	80 ec       	ldi	r24, 0xC0	; 192
     fbc:	08 95       	ret

00000fbe <__fp_pscA>:
     fbe:	00 24       	eor	r0, r0
     fc0:	0a 94       	dec	r0
     fc2:	16 16       	cp	r1, r22
     fc4:	17 06       	cpc	r1, r23
     fc6:	18 06       	cpc	r1, r24
     fc8:	09 06       	cpc	r0, r25
     fca:	08 95       	ret

00000fcc <__fp_pscB>:
     fcc:	00 24       	eor	r0, r0
     fce:	0a 94       	dec	r0
     fd0:	12 16       	cp	r1, r18
     fd2:	13 06       	cpc	r1, r19
     fd4:	14 06       	cpc	r1, r20
     fd6:	05 06       	cpc	r0, r21
     fd8:	08 95       	ret

00000fda <__fp_round>:
     fda:	09 2e       	mov	r0, r25
     fdc:	03 94       	inc	r0
     fde:	00 0c       	add	r0, r0
     fe0:	11 f4       	brne	.+4      	; 0xfe6 <__fp_round+0xc>
     fe2:	88 23       	and	r24, r24
     fe4:	52 f0       	brmi	.+20     	; 0xffa <__fp_round+0x20>
     fe6:	bb 0f       	add	r27, r27
     fe8:	40 f4       	brcc	.+16     	; 0xffa <__fp_round+0x20>
     fea:	bf 2b       	or	r27, r31
     fec:	11 f4       	brne	.+4      	; 0xff2 <__fp_round+0x18>
     fee:	60 ff       	sbrs	r22, 0
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <__fp_round+0x20>
     ff2:	6f 5f       	subi	r22, 0xFF	; 255
     ff4:	7f 4f       	sbci	r23, 0xFF	; 255
     ff6:	8f 4f       	sbci	r24, 0xFF	; 255
     ff8:	9f 4f       	sbci	r25, 0xFF	; 255
     ffa:	08 95       	ret

00000ffc <__fp_split3>:
     ffc:	57 fd       	sbrc	r21, 7
     ffe:	90 58       	subi	r25, 0x80	; 128
    1000:	44 0f       	add	r20, r20
    1002:	55 1f       	adc	r21, r21
    1004:	59 f0       	breq	.+22     	; 0x101c <__fp_splitA+0x10>
    1006:	5f 3f       	cpi	r21, 0xFF	; 255
    1008:	71 f0       	breq	.+28     	; 0x1026 <__fp_splitA+0x1a>
    100a:	47 95       	ror	r20

0000100c <__fp_splitA>:
    100c:	88 0f       	add	r24, r24
    100e:	97 fb       	bst	r25, 7
    1010:	99 1f       	adc	r25, r25
    1012:	61 f0       	breq	.+24     	; 0x102c <__fp_splitA+0x20>
    1014:	9f 3f       	cpi	r25, 0xFF	; 255
    1016:	79 f0       	breq	.+30     	; 0x1036 <__fp_splitA+0x2a>
    1018:	87 95       	ror	r24
    101a:	08 95       	ret
    101c:	12 16       	cp	r1, r18
    101e:	13 06       	cpc	r1, r19
    1020:	14 06       	cpc	r1, r20
    1022:	55 1f       	adc	r21, r21
    1024:	f2 cf       	rjmp	.-28     	; 0x100a <__fp_split3+0xe>
    1026:	46 95       	lsr	r20
    1028:	f1 df       	rcall	.-30     	; 0x100c <__fp_splitA>
    102a:	08 c0       	rjmp	.+16     	; 0x103c <__fp_splitA+0x30>
    102c:	16 16       	cp	r1, r22
    102e:	17 06       	cpc	r1, r23
    1030:	18 06       	cpc	r1, r24
    1032:	99 1f       	adc	r25, r25
    1034:	f1 cf       	rjmp	.-30     	; 0x1018 <__fp_splitA+0xc>
    1036:	86 95       	lsr	r24
    1038:	71 05       	cpc	r23, r1
    103a:	61 05       	cpc	r22, r1
    103c:	08 94       	sec
    103e:	08 95       	ret

00001040 <__fp_zero>:
    1040:	e8 94       	clt

00001042 <__fp_szero>:
    1042:	bb 27       	eor	r27, r27
    1044:	66 27       	eor	r22, r22
    1046:	77 27       	eor	r23, r23
    1048:	cb 01       	movw	r24, r22
    104a:	97 f9       	bld	r25, 7
    104c:	08 95       	ret

0000104e <__mulsf3>:
    104e:	0e 94 3a 08 	call	0x1074	; 0x1074 <__mulsf3x>
    1052:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_round>
    1056:	0e 94 df 07 	call	0xfbe	; 0xfbe <__fp_pscA>
    105a:	38 f0       	brcs	.+14     	; 0x106a <__mulsf3+0x1c>
    105c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__fp_pscB>
    1060:	20 f0       	brcs	.+8      	; 0x106a <__mulsf3+0x1c>
    1062:	95 23       	and	r25, r21
    1064:	11 f0       	breq	.+4      	; 0x106a <__mulsf3+0x1c>
    1066:	0c 94 d6 07 	jmp	0xfac	; 0xfac <__fp_inf>
    106a:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__fp_nan>
    106e:	11 24       	eor	r1, r1
    1070:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__fp_szero>

00001074 <__mulsf3x>:
    1074:	0e 94 fe 07 	call	0xffc	; 0xffc <__fp_split3>
    1078:	70 f3       	brcs	.-36     	; 0x1056 <__mulsf3+0x8>

0000107a <__mulsf3_pse>:
    107a:	95 9f       	mul	r25, r21
    107c:	c1 f3       	breq	.-16     	; 0x106e <__mulsf3+0x20>
    107e:	95 0f       	add	r25, r21
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	55 1f       	adc	r21, r21
    1084:	62 9f       	mul	r22, r18
    1086:	f0 01       	movw	r30, r0
    1088:	72 9f       	mul	r23, r18
    108a:	bb 27       	eor	r27, r27
    108c:	f0 0d       	add	r31, r0
    108e:	b1 1d       	adc	r27, r1
    1090:	63 9f       	mul	r22, r19
    1092:	aa 27       	eor	r26, r26
    1094:	f0 0d       	add	r31, r0
    1096:	b1 1d       	adc	r27, r1
    1098:	aa 1f       	adc	r26, r26
    109a:	64 9f       	mul	r22, r20
    109c:	66 27       	eor	r22, r22
    109e:	b0 0d       	add	r27, r0
    10a0:	a1 1d       	adc	r26, r1
    10a2:	66 1f       	adc	r22, r22
    10a4:	82 9f       	mul	r24, r18
    10a6:	22 27       	eor	r18, r18
    10a8:	b0 0d       	add	r27, r0
    10aa:	a1 1d       	adc	r26, r1
    10ac:	62 1f       	adc	r22, r18
    10ae:	73 9f       	mul	r23, r19
    10b0:	b0 0d       	add	r27, r0
    10b2:	a1 1d       	adc	r26, r1
    10b4:	62 1f       	adc	r22, r18
    10b6:	83 9f       	mul	r24, r19
    10b8:	a0 0d       	add	r26, r0
    10ba:	61 1d       	adc	r22, r1
    10bc:	22 1f       	adc	r18, r18
    10be:	74 9f       	mul	r23, r20
    10c0:	33 27       	eor	r19, r19
    10c2:	a0 0d       	add	r26, r0
    10c4:	61 1d       	adc	r22, r1
    10c6:	23 1f       	adc	r18, r19
    10c8:	84 9f       	mul	r24, r20
    10ca:	60 0d       	add	r22, r0
    10cc:	21 1d       	adc	r18, r1
    10ce:	82 2f       	mov	r24, r18
    10d0:	76 2f       	mov	r23, r22
    10d2:	6a 2f       	mov	r22, r26
    10d4:	11 24       	eor	r1, r1
    10d6:	9f 57       	subi	r25, 0x7F	; 127
    10d8:	50 40       	sbci	r21, 0x00	; 0
    10da:	9a f0       	brmi	.+38     	; 0x1102 <__mulsf3_pse+0x88>
    10dc:	f1 f0       	breq	.+60     	; 0x111a <__mulsf3_pse+0xa0>
    10de:	88 23       	and	r24, r24
    10e0:	4a f0       	brmi	.+18     	; 0x10f4 <__mulsf3_pse+0x7a>
    10e2:	ee 0f       	add	r30, r30
    10e4:	ff 1f       	adc	r31, r31
    10e6:	bb 1f       	adc	r27, r27
    10e8:	66 1f       	adc	r22, r22
    10ea:	77 1f       	adc	r23, r23
    10ec:	88 1f       	adc	r24, r24
    10ee:	91 50       	subi	r25, 0x01	; 1
    10f0:	50 40       	sbci	r21, 0x00	; 0
    10f2:	a9 f7       	brne	.-22     	; 0x10de <__mulsf3_pse+0x64>
    10f4:	9e 3f       	cpi	r25, 0xFE	; 254
    10f6:	51 05       	cpc	r21, r1
    10f8:	80 f0       	brcs	.+32     	; 0x111a <__mulsf3_pse+0xa0>
    10fa:	0c 94 d6 07 	jmp	0xfac	; 0xfac <__fp_inf>
    10fe:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__fp_szero>
    1102:	5f 3f       	cpi	r21, 0xFF	; 255
    1104:	e4 f3       	brlt	.-8      	; 0x10fe <__mulsf3_pse+0x84>
    1106:	98 3e       	cpi	r25, 0xE8	; 232
    1108:	d4 f3       	brlt	.-12     	; 0x10fe <__mulsf3_pse+0x84>
    110a:	86 95       	lsr	r24
    110c:	77 95       	ror	r23
    110e:	67 95       	ror	r22
    1110:	b7 95       	ror	r27
    1112:	f7 95       	ror	r31
    1114:	e7 95       	ror	r30
    1116:	9f 5f       	subi	r25, 0xFF	; 255
    1118:	c1 f7       	brne	.-16     	; 0x110a <__mulsf3_pse+0x90>
    111a:	fe 2b       	or	r31, r30
    111c:	88 0f       	add	r24, r24
    111e:	91 1d       	adc	r25, r1
    1120:	96 95       	lsr	r25
    1122:	87 95       	ror	r24
    1124:	97 f9       	bld	r25, 7
    1126:	08 95       	ret

00001128 <vfprintf>:
    1128:	a0 e1       	ldi	r26, 0x10	; 16
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	ea e9       	ldi	r30, 0x9A	; 154
    112e:	f8 e0       	ldi	r31, 0x08	; 8
    1130:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__prologue_saves__>
    1134:	7c 01       	movw	r14, r24
    1136:	1b 01       	movw	r2, r22
    1138:	6a 01       	movw	r12, r20
    113a:	fc 01       	movw	r30, r24
    113c:	17 82       	std	Z+7, r1	; 0x07
    113e:	16 82       	std	Z+6, r1	; 0x06
    1140:	83 81       	ldd	r24, Z+3	; 0x03
    1142:	81 ff       	sbrs	r24, 1
    1144:	44 c3       	rjmp	.+1672   	; 0x17ce <vfprintf+0x6a6>
    1146:	9e 01       	movw	r18, r28
    1148:	2f 5f       	subi	r18, 0xFF	; 255
    114a:	3f 4f       	sbci	r19, 0xFF	; 255
    114c:	39 01       	movw	r6, r18
    114e:	f7 01       	movw	r30, r14
    1150:	93 81       	ldd	r25, Z+3	; 0x03
    1152:	f1 01       	movw	r30, r2
    1154:	93 fd       	sbrc	r25, 3
    1156:	85 91       	lpm	r24, Z+
    1158:	93 ff       	sbrs	r25, 3
    115a:	81 91       	ld	r24, Z+
    115c:	1f 01       	movw	r2, r30
    115e:	88 23       	and	r24, r24
    1160:	09 f4       	brne	.+2      	; 0x1164 <vfprintf+0x3c>
    1162:	31 c3       	rjmp	.+1634   	; 0x17c6 <vfprintf+0x69e>
    1164:	85 32       	cpi	r24, 0x25	; 37
    1166:	39 f4       	brne	.+14     	; 0x1176 <vfprintf+0x4e>
    1168:	93 fd       	sbrc	r25, 3
    116a:	85 91       	lpm	r24, Z+
    116c:	93 ff       	sbrs	r25, 3
    116e:	81 91       	ld	r24, Z+
    1170:	1f 01       	movw	r2, r30
    1172:	85 32       	cpi	r24, 0x25	; 37
    1174:	39 f4       	brne	.+14     	; 0x1184 <vfprintf+0x5c>
    1176:	b7 01       	movw	r22, r14
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    117e:	56 01       	movw	r10, r12
    1180:	65 01       	movw	r12, r10
    1182:	e5 cf       	rjmp	.-54     	; 0x114e <vfprintf+0x26>
    1184:	10 e0       	ldi	r17, 0x00	; 0
    1186:	51 2c       	mov	r5, r1
    1188:	91 2c       	mov	r9, r1
    118a:	ff e1       	ldi	r31, 0x1F	; 31
    118c:	f9 15       	cp	r31, r9
    118e:	d8 f0       	brcs	.+54     	; 0x11c6 <vfprintf+0x9e>
    1190:	8b 32       	cpi	r24, 0x2B	; 43
    1192:	79 f0       	breq	.+30     	; 0x11b2 <vfprintf+0x8a>
    1194:	38 f4       	brcc	.+14     	; 0x11a4 <vfprintf+0x7c>
    1196:	80 32       	cpi	r24, 0x20	; 32
    1198:	79 f0       	breq	.+30     	; 0x11b8 <vfprintf+0x90>
    119a:	83 32       	cpi	r24, 0x23	; 35
    119c:	a1 f4       	brne	.+40     	; 0x11c6 <vfprintf+0x9e>
    119e:	f9 2d       	mov	r31, r9
    11a0:	f0 61       	ori	r31, 0x10	; 16
    11a2:	2e c0       	rjmp	.+92     	; 0x1200 <vfprintf+0xd8>
    11a4:	8d 32       	cpi	r24, 0x2D	; 45
    11a6:	61 f0       	breq	.+24     	; 0x11c0 <vfprintf+0x98>
    11a8:	80 33       	cpi	r24, 0x30	; 48
    11aa:	69 f4       	brne	.+26     	; 0x11c6 <vfprintf+0x9e>
    11ac:	29 2d       	mov	r18, r9
    11ae:	21 60       	ori	r18, 0x01	; 1
    11b0:	2d c0       	rjmp	.+90     	; 0x120c <vfprintf+0xe4>
    11b2:	39 2d       	mov	r19, r9
    11b4:	32 60       	ori	r19, 0x02	; 2
    11b6:	93 2e       	mov	r9, r19
    11b8:	89 2d       	mov	r24, r9
    11ba:	84 60       	ori	r24, 0x04	; 4
    11bc:	98 2e       	mov	r9, r24
    11be:	2a c0       	rjmp	.+84     	; 0x1214 <vfprintf+0xec>
    11c0:	e9 2d       	mov	r30, r9
    11c2:	e8 60       	ori	r30, 0x08	; 8
    11c4:	15 c0       	rjmp	.+42     	; 0x11f0 <vfprintf+0xc8>
    11c6:	97 fc       	sbrc	r9, 7
    11c8:	2d c0       	rjmp	.+90     	; 0x1224 <vfprintf+0xfc>
    11ca:	20 ed       	ldi	r18, 0xD0	; 208
    11cc:	28 0f       	add	r18, r24
    11ce:	2a 30       	cpi	r18, 0x0A	; 10
    11d0:	88 f4       	brcc	.+34     	; 0x11f4 <vfprintf+0xcc>
    11d2:	96 fe       	sbrs	r9, 6
    11d4:	06 c0       	rjmp	.+12     	; 0x11e2 <vfprintf+0xba>
    11d6:	3a e0       	ldi	r19, 0x0A	; 10
    11d8:	13 9f       	mul	r17, r19
    11da:	20 0d       	add	r18, r0
    11dc:	11 24       	eor	r1, r1
    11de:	12 2f       	mov	r17, r18
    11e0:	19 c0       	rjmp	.+50     	; 0x1214 <vfprintf+0xec>
    11e2:	8a e0       	ldi	r24, 0x0A	; 10
    11e4:	58 9e       	mul	r5, r24
    11e6:	20 0d       	add	r18, r0
    11e8:	11 24       	eor	r1, r1
    11ea:	52 2e       	mov	r5, r18
    11ec:	e9 2d       	mov	r30, r9
    11ee:	e0 62       	ori	r30, 0x20	; 32
    11f0:	9e 2e       	mov	r9, r30
    11f2:	10 c0       	rjmp	.+32     	; 0x1214 <vfprintf+0xec>
    11f4:	8e 32       	cpi	r24, 0x2E	; 46
    11f6:	31 f4       	brne	.+12     	; 0x1204 <vfprintf+0xdc>
    11f8:	96 fc       	sbrc	r9, 6
    11fa:	e5 c2       	rjmp	.+1482   	; 0x17c6 <vfprintf+0x69e>
    11fc:	f9 2d       	mov	r31, r9
    11fe:	f0 64       	ori	r31, 0x40	; 64
    1200:	9f 2e       	mov	r9, r31
    1202:	08 c0       	rjmp	.+16     	; 0x1214 <vfprintf+0xec>
    1204:	8c 36       	cpi	r24, 0x6C	; 108
    1206:	21 f4       	brne	.+8      	; 0x1210 <vfprintf+0xe8>
    1208:	29 2d       	mov	r18, r9
    120a:	20 68       	ori	r18, 0x80	; 128
    120c:	92 2e       	mov	r9, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <vfprintf+0xec>
    1210:	88 36       	cpi	r24, 0x68	; 104
    1212:	41 f4       	brne	.+16     	; 0x1224 <vfprintf+0xfc>
    1214:	f1 01       	movw	r30, r2
    1216:	93 fd       	sbrc	r25, 3
    1218:	85 91       	lpm	r24, Z+
    121a:	93 ff       	sbrs	r25, 3
    121c:	81 91       	ld	r24, Z+
    121e:	1f 01       	movw	r2, r30
    1220:	81 11       	cpse	r24, r1
    1222:	b3 cf       	rjmp	.-154    	; 0x118a <vfprintf+0x62>
    1224:	9b eb       	ldi	r25, 0xBB	; 187
    1226:	98 0f       	add	r25, r24
    1228:	93 30       	cpi	r25, 0x03	; 3
    122a:	20 f4       	brcc	.+8      	; 0x1234 <vfprintf+0x10c>
    122c:	99 2d       	mov	r25, r9
    122e:	90 61       	ori	r25, 0x10	; 16
    1230:	80 5e       	subi	r24, 0xE0	; 224
    1232:	07 c0       	rjmp	.+14     	; 0x1242 <vfprintf+0x11a>
    1234:	9b e9       	ldi	r25, 0x9B	; 155
    1236:	98 0f       	add	r25, r24
    1238:	93 30       	cpi	r25, 0x03	; 3
    123a:	08 f0       	brcs	.+2      	; 0x123e <vfprintf+0x116>
    123c:	66 c1       	rjmp	.+716    	; 0x150a <vfprintf+0x3e2>
    123e:	99 2d       	mov	r25, r9
    1240:	9f 7e       	andi	r25, 0xEF	; 239
    1242:	96 ff       	sbrs	r25, 6
    1244:	16 e0       	ldi	r17, 0x06	; 6
    1246:	9f 73       	andi	r25, 0x3F	; 63
    1248:	99 2e       	mov	r9, r25
    124a:	85 36       	cpi	r24, 0x65	; 101
    124c:	19 f4       	brne	.+6      	; 0x1254 <vfprintf+0x12c>
    124e:	90 64       	ori	r25, 0x40	; 64
    1250:	99 2e       	mov	r9, r25
    1252:	08 c0       	rjmp	.+16     	; 0x1264 <vfprintf+0x13c>
    1254:	86 36       	cpi	r24, 0x66	; 102
    1256:	21 f4       	brne	.+8      	; 0x1260 <vfprintf+0x138>
    1258:	39 2f       	mov	r19, r25
    125a:	30 68       	ori	r19, 0x80	; 128
    125c:	93 2e       	mov	r9, r19
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <vfprintf+0x13c>
    1260:	11 11       	cpse	r17, r1
    1262:	11 50       	subi	r17, 0x01	; 1
    1264:	97 fe       	sbrs	r9, 7
    1266:	07 c0       	rjmp	.+14     	; 0x1276 <vfprintf+0x14e>
    1268:	1c 33       	cpi	r17, 0x3C	; 60
    126a:	50 f4       	brcc	.+20     	; 0x1280 <vfprintf+0x158>
    126c:	44 24       	eor	r4, r4
    126e:	43 94       	inc	r4
    1270:	41 0e       	add	r4, r17
    1272:	27 e0       	ldi	r18, 0x07	; 7
    1274:	0b c0       	rjmp	.+22     	; 0x128c <vfprintf+0x164>
    1276:	18 30       	cpi	r17, 0x08	; 8
    1278:	38 f0       	brcs	.+14     	; 0x1288 <vfprintf+0x160>
    127a:	27 e0       	ldi	r18, 0x07	; 7
    127c:	17 e0       	ldi	r17, 0x07	; 7
    127e:	05 c0       	rjmp	.+10     	; 0x128a <vfprintf+0x162>
    1280:	27 e0       	ldi	r18, 0x07	; 7
    1282:	9c e3       	ldi	r25, 0x3C	; 60
    1284:	49 2e       	mov	r4, r25
    1286:	02 c0       	rjmp	.+4      	; 0x128c <vfprintf+0x164>
    1288:	21 2f       	mov	r18, r17
    128a:	41 2c       	mov	r4, r1
    128c:	56 01       	movw	r10, r12
    128e:	84 e0       	ldi	r24, 0x04	; 4
    1290:	a8 0e       	add	r10, r24
    1292:	b1 1c       	adc	r11, r1
    1294:	f6 01       	movw	r30, r12
    1296:	60 81       	ld	r22, Z
    1298:	71 81       	ldd	r23, Z+1	; 0x01
    129a:	82 81       	ldd	r24, Z+2	; 0x02
    129c:	93 81       	ldd	r25, Z+3	; 0x03
    129e:	04 2d       	mov	r16, r4
    12a0:	a3 01       	movw	r20, r6
    12a2:	0e 94 48 0c 	call	0x1890	; 0x1890 <__ftoa_engine>
    12a6:	6c 01       	movw	r12, r24
    12a8:	f9 81       	ldd	r31, Y+1	; 0x01
    12aa:	fc 87       	std	Y+12, r31	; 0x0c
    12ac:	f0 ff       	sbrs	r31, 0
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <vfprintf+0x18c>
    12b0:	f3 ff       	sbrs	r31, 3
    12b2:	06 c0       	rjmp	.+12     	; 0x12c0 <vfprintf+0x198>
    12b4:	91 fc       	sbrc	r9, 1
    12b6:	06 c0       	rjmp	.+12     	; 0x12c4 <vfprintf+0x19c>
    12b8:	92 fe       	sbrs	r9, 2
    12ba:	06 c0       	rjmp	.+12     	; 0x12c8 <vfprintf+0x1a0>
    12bc:	00 e2       	ldi	r16, 0x20	; 32
    12be:	05 c0       	rjmp	.+10     	; 0x12ca <vfprintf+0x1a2>
    12c0:	0d e2       	ldi	r16, 0x2D	; 45
    12c2:	03 c0       	rjmp	.+6      	; 0x12ca <vfprintf+0x1a2>
    12c4:	0b e2       	ldi	r16, 0x2B	; 43
    12c6:	01 c0       	rjmp	.+2      	; 0x12ca <vfprintf+0x1a2>
    12c8:	00 e0       	ldi	r16, 0x00	; 0
    12ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    12cc:	8c 70       	andi	r24, 0x0C	; 12
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <vfprintf+0x1ae>
    12d0:	01 11       	cpse	r16, r1
    12d2:	5a c2       	rjmp	.+1204   	; 0x1788 <vfprintf+0x660>
    12d4:	9b c2       	rjmp	.+1334   	; 0x180c <vfprintf+0x6e4>
    12d6:	97 fe       	sbrs	r9, 7
    12d8:	10 c0       	rjmp	.+32     	; 0x12fa <vfprintf+0x1d2>
    12da:	4c 0c       	add	r4, r12
    12dc:	fc 85       	ldd	r31, Y+12	; 0x0c
    12de:	f4 ff       	sbrs	r31, 4
    12e0:	04 c0       	rjmp	.+8      	; 0x12ea <vfprintf+0x1c2>
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	81 33       	cpi	r24, 0x31	; 49
    12e6:	09 f4       	brne	.+2      	; 0x12ea <vfprintf+0x1c2>
    12e8:	4a 94       	dec	r4
    12ea:	14 14       	cp	r1, r4
    12ec:	74 f5       	brge	.+92     	; 0x134a <vfprintf+0x222>
    12ee:	28 e0       	ldi	r18, 0x08	; 8
    12f0:	24 15       	cp	r18, r4
    12f2:	78 f5       	brcc	.+94     	; 0x1352 <vfprintf+0x22a>
    12f4:	88 e0       	ldi	r24, 0x08	; 8
    12f6:	48 2e       	mov	r4, r24
    12f8:	2c c0       	rjmp	.+88     	; 0x1352 <vfprintf+0x22a>
    12fa:	96 fc       	sbrc	r9, 6
    12fc:	2a c0       	rjmp	.+84     	; 0x1352 <vfprintf+0x22a>
    12fe:	81 2f       	mov	r24, r17
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	8c 15       	cp	r24, r12
    1304:	9d 05       	cpc	r25, r13
    1306:	9c f0       	brlt	.+38     	; 0x132e <vfprintf+0x206>
    1308:	3c ef       	ldi	r19, 0xFC	; 252
    130a:	c3 16       	cp	r12, r19
    130c:	3f ef       	ldi	r19, 0xFF	; 255
    130e:	d3 06       	cpc	r13, r19
    1310:	74 f0       	brlt	.+28     	; 0x132e <vfprintf+0x206>
    1312:	89 2d       	mov	r24, r9
    1314:	80 68       	ori	r24, 0x80	; 128
    1316:	98 2e       	mov	r9, r24
    1318:	0a c0       	rjmp	.+20     	; 0x132e <vfprintf+0x206>
    131a:	e2 e0       	ldi	r30, 0x02	; 2
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	ec 0f       	add	r30, r28
    1320:	fd 1f       	adc	r31, r29
    1322:	e1 0f       	add	r30, r17
    1324:	f1 1d       	adc	r31, r1
    1326:	80 81       	ld	r24, Z
    1328:	80 33       	cpi	r24, 0x30	; 48
    132a:	19 f4       	brne	.+6      	; 0x1332 <vfprintf+0x20a>
    132c:	11 50       	subi	r17, 0x01	; 1
    132e:	11 11       	cpse	r17, r1
    1330:	f4 cf       	rjmp	.-24     	; 0x131a <vfprintf+0x1f2>
    1332:	97 fe       	sbrs	r9, 7
    1334:	0e c0       	rjmp	.+28     	; 0x1352 <vfprintf+0x22a>
    1336:	44 24       	eor	r4, r4
    1338:	43 94       	inc	r4
    133a:	41 0e       	add	r4, r17
    133c:	81 2f       	mov	r24, r17
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	c8 16       	cp	r12, r24
    1342:	d9 06       	cpc	r13, r25
    1344:	2c f4       	brge	.+10     	; 0x1350 <vfprintf+0x228>
    1346:	1c 19       	sub	r17, r12
    1348:	04 c0       	rjmp	.+8      	; 0x1352 <vfprintf+0x22a>
    134a:	44 24       	eor	r4, r4
    134c:	43 94       	inc	r4
    134e:	01 c0       	rjmp	.+2      	; 0x1352 <vfprintf+0x22a>
    1350:	10 e0       	ldi	r17, 0x00	; 0
    1352:	97 fe       	sbrs	r9, 7
    1354:	06 c0       	rjmp	.+12     	; 0x1362 <vfprintf+0x23a>
    1356:	1c 14       	cp	r1, r12
    1358:	1d 04       	cpc	r1, r13
    135a:	34 f4       	brge	.+12     	; 0x1368 <vfprintf+0x240>
    135c:	c6 01       	movw	r24, r12
    135e:	01 96       	adiw	r24, 0x01	; 1
    1360:	05 c0       	rjmp	.+10     	; 0x136c <vfprintf+0x244>
    1362:	85 e0       	ldi	r24, 0x05	; 5
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 c0       	rjmp	.+4      	; 0x136c <vfprintf+0x244>
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	01 11       	cpse	r16, r1
    136e:	01 96       	adiw	r24, 0x01	; 1
    1370:	11 23       	and	r17, r17
    1372:	31 f0       	breq	.+12     	; 0x1380 <vfprintf+0x258>
    1374:	21 2f       	mov	r18, r17
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	2f 5f       	subi	r18, 0xFF	; 255
    137a:	3f 4f       	sbci	r19, 0xFF	; 255
    137c:	82 0f       	add	r24, r18
    137e:	93 1f       	adc	r25, r19
    1380:	25 2d       	mov	r18, r5
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	82 17       	cp	r24, r18
    1386:	93 07       	cpc	r25, r19
    1388:	14 f4       	brge	.+4      	; 0x138e <vfprintf+0x266>
    138a:	58 1a       	sub	r5, r24
    138c:	01 c0       	rjmp	.+2      	; 0x1390 <vfprintf+0x268>
    138e:	51 2c       	mov	r5, r1
    1390:	89 2d       	mov	r24, r9
    1392:	89 70       	andi	r24, 0x09	; 9
    1394:	49 f4       	brne	.+18     	; 0x13a8 <vfprintf+0x280>
    1396:	55 20       	and	r5, r5
    1398:	39 f0       	breq	.+14     	; 0x13a8 <vfprintf+0x280>
    139a:	b7 01       	movw	r22, r14
    139c:	80 e2       	ldi	r24, 0x20	; 32
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    13a4:	5a 94       	dec	r5
    13a6:	f7 cf       	rjmp	.-18     	; 0x1396 <vfprintf+0x26e>
    13a8:	00 23       	and	r16, r16
    13aa:	29 f0       	breq	.+10     	; 0x13b6 <vfprintf+0x28e>
    13ac:	b7 01       	movw	r22, r14
    13ae:	80 2f       	mov	r24, r16
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    13b6:	93 fc       	sbrc	r9, 3
    13b8:	09 c0       	rjmp	.+18     	; 0x13cc <vfprintf+0x2a4>
    13ba:	55 20       	and	r5, r5
    13bc:	39 f0       	breq	.+14     	; 0x13cc <vfprintf+0x2a4>
    13be:	b7 01       	movw	r22, r14
    13c0:	80 e3       	ldi	r24, 0x30	; 48
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    13c8:	5a 94       	dec	r5
    13ca:	f7 cf       	rjmp	.-18     	; 0x13ba <vfprintf+0x292>
    13cc:	97 fe       	sbrs	r9, 7
    13ce:	4c c0       	rjmp	.+152    	; 0x1468 <vfprintf+0x340>
    13d0:	46 01       	movw	r8, r12
    13d2:	d7 fe       	sbrs	r13, 7
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <vfprintf+0x2b2>
    13d6:	81 2c       	mov	r8, r1
    13d8:	91 2c       	mov	r9, r1
    13da:	c6 01       	movw	r24, r12
    13dc:	88 19       	sub	r24, r8
    13de:	99 09       	sbc	r25, r9
    13e0:	f3 01       	movw	r30, r6
    13e2:	e8 0f       	add	r30, r24
    13e4:	f9 1f       	adc	r31, r25
    13e6:	fe 87       	std	Y+14, r31	; 0x0e
    13e8:	ed 87       	std	Y+13, r30	; 0x0d
    13ea:	96 01       	movw	r18, r12
    13ec:	24 19       	sub	r18, r4
    13ee:	31 09       	sbc	r19, r1
    13f0:	38 8b       	std	Y+16, r19	; 0x10
    13f2:	2f 87       	std	Y+15, r18	; 0x0f
    13f4:	01 2f       	mov	r16, r17
    13f6:	10 e0       	ldi	r17, 0x00	; 0
    13f8:	11 95       	neg	r17
    13fa:	01 95       	neg	r16
    13fc:	11 09       	sbc	r17, r1
    13fe:	3f ef       	ldi	r19, 0xFF	; 255
    1400:	83 16       	cp	r8, r19
    1402:	93 06       	cpc	r9, r19
    1404:	29 f4       	brne	.+10     	; 0x1410 <vfprintf+0x2e8>
    1406:	b7 01       	movw	r22, r14
    1408:	8e e2       	ldi	r24, 0x2E	; 46
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    1410:	c8 14       	cp	r12, r8
    1412:	d9 04       	cpc	r13, r9
    1414:	4c f0       	brlt	.+18     	; 0x1428 <vfprintf+0x300>
    1416:	8f 85       	ldd	r24, Y+15	; 0x0f
    1418:	98 89       	ldd	r25, Y+16	; 0x10
    141a:	88 15       	cp	r24, r8
    141c:	99 05       	cpc	r25, r9
    141e:	24 f4       	brge	.+8      	; 0x1428 <vfprintf+0x300>
    1420:	ed 85       	ldd	r30, Y+13	; 0x0d
    1422:	fe 85       	ldd	r31, Y+14	; 0x0e
    1424:	81 81       	ldd	r24, Z+1	; 0x01
    1426:	01 c0       	rjmp	.+2      	; 0x142a <vfprintf+0x302>
    1428:	80 e3       	ldi	r24, 0x30	; 48
    142a:	f1 e0       	ldi	r31, 0x01	; 1
    142c:	8f 1a       	sub	r8, r31
    142e:	91 08       	sbc	r9, r1
    1430:	2d 85       	ldd	r18, Y+13	; 0x0d
    1432:	3e 85       	ldd	r19, Y+14	; 0x0e
    1434:	2f 5f       	subi	r18, 0xFF	; 255
    1436:	3f 4f       	sbci	r19, 0xFF	; 255
    1438:	3e 87       	std	Y+14, r19	; 0x0e
    143a:	2d 87       	std	Y+13, r18	; 0x0d
    143c:	80 16       	cp	r8, r16
    143e:	91 06       	cpc	r9, r17
    1440:	2c f0       	brlt	.+10     	; 0x144c <vfprintf+0x324>
    1442:	b7 01       	movw	r22, r14
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    144a:	d9 cf       	rjmp	.-78     	; 0x13fe <vfprintf+0x2d6>
    144c:	c8 14       	cp	r12, r8
    144e:	d9 04       	cpc	r13, r9
    1450:	41 f4       	brne	.+16     	; 0x1462 <vfprintf+0x33a>
    1452:	9a 81       	ldd	r25, Y+2	; 0x02
    1454:	96 33       	cpi	r25, 0x36	; 54
    1456:	20 f4       	brcc	.+8      	; 0x1460 <vfprintf+0x338>
    1458:	95 33       	cpi	r25, 0x35	; 53
    145a:	19 f4       	brne	.+6      	; 0x1462 <vfprintf+0x33a>
    145c:	3c 85       	ldd	r19, Y+12	; 0x0c
    145e:	34 ff       	sbrs	r19, 4
    1460:	81 e3       	ldi	r24, 0x31	; 49
    1462:	b7 01       	movw	r22, r14
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	4e c0       	rjmp	.+156    	; 0x1504 <vfprintf+0x3dc>
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	81 33       	cpi	r24, 0x31	; 49
    146c:	19 f0       	breq	.+6      	; 0x1474 <vfprintf+0x34c>
    146e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1470:	9f 7e       	andi	r25, 0xEF	; 239
    1472:	9c 87       	std	Y+12, r25	; 0x0c
    1474:	b7 01       	movw	r22, r14
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    147c:	11 11       	cpse	r17, r1
    147e:	05 c0       	rjmp	.+10     	; 0x148a <vfprintf+0x362>
    1480:	94 fc       	sbrc	r9, 4
    1482:	18 c0       	rjmp	.+48     	; 0x14b4 <vfprintf+0x38c>
    1484:	85 e6       	ldi	r24, 0x65	; 101
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	17 c0       	rjmp	.+46     	; 0x14b8 <vfprintf+0x390>
    148a:	b7 01       	movw	r22, r14
    148c:	8e e2       	ldi	r24, 0x2E	; 46
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    1494:	1e 5f       	subi	r17, 0xFE	; 254
    1496:	82 e0       	ldi	r24, 0x02	; 2
    1498:	01 e0       	ldi	r16, 0x01	; 1
    149a:	08 0f       	add	r16, r24
    149c:	f3 01       	movw	r30, r6
    149e:	e8 0f       	add	r30, r24
    14a0:	f1 1d       	adc	r31, r1
    14a2:	80 81       	ld	r24, Z
    14a4:	b7 01       	movw	r22, r14
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    14ac:	80 2f       	mov	r24, r16
    14ae:	01 13       	cpse	r16, r17
    14b0:	f3 cf       	rjmp	.-26     	; 0x1498 <vfprintf+0x370>
    14b2:	e6 cf       	rjmp	.-52     	; 0x1480 <vfprintf+0x358>
    14b4:	85 e4       	ldi	r24, 0x45	; 69
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	b7 01       	movw	r22, r14
    14ba:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    14be:	d7 fc       	sbrc	r13, 7
    14c0:	06 c0       	rjmp	.+12     	; 0x14ce <vfprintf+0x3a6>
    14c2:	c1 14       	cp	r12, r1
    14c4:	d1 04       	cpc	r13, r1
    14c6:	41 f4       	brne	.+16     	; 0x14d8 <vfprintf+0x3b0>
    14c8:	ec 85       	ldd	r30, Y+12	; 0x0c
    14ca:	e4 ff       	sbrs	r30, 4
    14cc:	05 c0       	rjmp	.+10     	; 0x14d8 <vfprintf+0x3b0>
    14ce:	d1 94       	neg	r13
    14d0:	c1 94       	neg	r12
    14d2:	d1 08       	sbc	r13, r1
    14d4:	8d e2       	ldi	r24, 0x2D	; 45
    14d6:	01 c0       	rjmp	.+2      	; 0x14da <vfprintf+0x3b2>
    14d8:	8b e2       	ldi	r24, 0x2B	; 43
    14da:	b7 01       	movw	r22, r14
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    14e2:	80 e3       	ldi	r24, 0x30	; 48
    14e4:	2a e0       	ldi	r18, 0x0A	; 10
    14e6:	c2 16       	cp	r12, r18
    14e8:	d1 04       	cpc	r13, r1
    14ea:	2c f0       	brlt	.+10     	; 0x14f6 <vfprintf+0x3ce>
    14ec:	8f 5f       	subi	r24, 0xFF	; 255
    14ee:	fa e0       	ldi	r31, 0x0A	; 10
    14f0:	cf 1a       	sub	r12, r31
    14f2:	d1 08       	sbc	r13, r1
    14f4:	f7 cf       	rjmp	.-18     	; 0x14e4 <vfprintf+0x3bc>
    14f6:	b7 01       	movw	r22, r14
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    14fe:	b7 01       	movw	r22, r14
    1500:	c6 01       	movw	r24, r12
    1502:	c0 96       	adiw	r24, 0x30	; 48
    1504:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    1508:	54 c1       	rjmp	.+680    	; 0x17b2 <vfprintf+0x68a>
    150a:	83 36       	cpi	r24, 0x63	; 99
    150c:	31 f0       	breq	.+12     	; 0x151a <vfprintf+0x3f2>
    150e:	83 37       	cpi	r24, 0x73	; 115
    1510:	79 f0       	breq	.+30     	; 0x1530 <vfprintf+0x408>
    1512:	83 35       	cpi	r24, 0x53	; 83
    1514:	09 f0       	breq	.+2      	; 0x1518 <vfprintf+0x3f0>
    1516:	56 c0       	rjmp	.+172    	; 0x15c4 <vfprintf+0x49c>
    1518:	20 c0       	rjmp	.+64     	; 0x155a <vfprintf+0x432>
    151a:	56 01       	movw	r10, r12
    151c:	32 e0       	ldi	r19, 0x02	; 2
    151e:	a3 0e       	add	r10, r19
    1520:	b1 1c       	adc	r11, r1
    1522:	f6 01       	movw	r30, r12
    1524:	80 81       	ld	r24, Z
    1526:	89 83       	std	Y+1, r24	; 0x01
    1528:	01 e0       	ldi	r16, 0x01	; 1
    152a:	10 e0       	ldi	r17, 0x00	; 0
    152c:	63 01       	movw	r12, r6
    152e:	12 c0       	rjmp	.+36     	; 0x1554 <vfprintf+0x42c>
    1530:	56 01       	movw	r10, r12
    1532:	f2 e0       	ldi	r31, 0x02	; 2
    1534:	af 0e       	add	r10, r31
    1536:	b1 1c       	adc	r11, r1
    1538:	f6 01       	movw	r30, r12
    153a:	c0 80       	ld	r12, Z
    153c:	d1 80       	ldd	r13, Z+1	; 0x01
    153e:	96 fe       	sbrs	r9, 6
    1540:	03 c0       	rjmp	.+6      	; 0x1548 <vfprintf+0x420>
    1542:	61 2f       	mov	r22, r17
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	02 c0       	rjmp	.+4      	; 0x154c <vfprintf+0x424>
    1548:	6f ef       	ldi	r22, 0xFF	; 255
    154a:	7f ef       	ldi	r23, 0xFF	; 255
    154c:	c6 01       	movw	r24, r12
    154e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <strnlen>
    1552:	8c 01       	movw	r16, r24
    1554:	f9 2d       	mov	r31, r9
    1556:	ff 77       	andi	r31, 0x7F	; 127
    1558:	14 c0       	rjmp	.+40     	; 0x1582 <vfprintf+0x45a>
    155a:	56 01       	movw	r10, r12
    155c:	22 e0       	ldi	r18, 0x02	; 2
    155e:	a2 0e       	add	r10, r18
    1560:	b1 1c       	adc	r11, r1
    1562:	f6 01       	movw	r30, r12
    1564:	c0 80       	ld	r12, Z
    1566:	d1 80       	ldd	r13, Z+1	; 0x01
    1568:	96 fe       	sbrs	r9, 6
    156a:	03 c0       	rjmp	.+6      	; 0x1572 <vfprintf+0x44a>
    156c:	61 2f       	mov	r22, r17
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <vfprintf+0x44e>
    1572:	6f ef       	ldi	r22, 0xFF	; 255
    1574:	7f ef       	ldi	r23, 0xFF	; 255
    1576:	c6 01       	movw	r24, r12
    1578:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <strnlen_P>
    157c:	8c 01       	movw	r16, r24
    157e:	f9 2d       	mov	r31, r9
    1580:	f0 68       	ori	r31, 0x80	; 128
    1582:	9f 2e       	mov	r9, r31
    1584:	f3 fd       	sbrc	r31, 3
    1586:	1a c0       	rjmp	.+52     	; 0x15bc <vfprintf+0x494>
    1588:	85 2d       	mov	r24, r5
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	08 17       	cp	r16, r24
    158e:	19 07       	cpc	r17, r25
    1590:	a8 f4       	brcc	.+42     	; 0x15bc <vfprintf+0x494>
    1592:	b7 01       	movw	r22, r14
    1594:	80 e2       	ldi	r24, 0x20	; 32
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    159c:	5a 94       	dec	r5
    159e:	f4 cf       	rjmp	.-24     	; 0x1588 <vfprintf+0x460>
    15a0:	f6 01       	movw	r30, r12
    15a2:	97 fc       	sbrc	r9, 7
    15a4:	85 91       	lpm	r24, Z+
    15a6:	97 fe       	sbrs	r9, 7
    15a8:	81 91       	ld	r24, Z+
    15aa:	6f 01       	movw	r12, r30
    15ac:	b7 01       	movw	r22, r14
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    15b4:	51 10       	cpse	r5, r1
    15b6:	5a 94       	dec	r5
    15b8:	01 50       	subi	r16, 0x01	; 1
    15ba:	11 09       	sbc	r17, r1
    15bc:	01 15       	cp	r16, r1
    15be:	11 05       	cpc	r17, r1
    15c0:	79 f7       	brne	.-34     	; 0x15a0 <vfprintf+0x478>
    15c2:	f7 c0       	rjmp	.+494    	; 0x17b2 <vfprintf+0x68a>
    15c4:	84 36       	cpi	r24, 0x64	; 100
    15c6:	11 f0       	breq	.+4      	; 0x15cc <vfprintf+0x4a4>
    15c8:	89 36       	cpi	r24, 0x69	; 105
    15ca:	61 f5       	brne	.+88     	; 0x1624 <vfprintf+0x4fc>
    15cc:	56 01       	movw	r10, r12
    15ce:	97 fe       	sbrs	r9, 7
    15d0:	09 c0       	rjmp	.+18     	; 0x15e4 <vfprintf+0x4bc>
    15d2:	24 e0       	ldi	r18, 0x04	; 4
    15d4:	a2 0e       	add	r10, r18
    15d6:	b1 1c       	adc	r11, r1
    15d8:	f6 01       	movw	r30, r12
    15da:	60 81       	ld	r22, Z
    15dc:	71 81       	ldd	r23, Z+1	; 0x01
    15de:	82 81       	ldd	r24, Z+2	; 0x02
    15e0:	93 81       	ldd	r25, Z+3	; 0x03
    15e2:	0a c0       	rjmp	.+20     	; 0x15f8 <vfprintf+0x4d0>
    15e4:	f2 e0       	ldi	r31, 0x02	; 2
    15e6:	af 0e       	add	r10, r31
    15e8:	b1 1c       	adc	r11, r1
    15ea:	f6 01       	movw	r30, r12
    15ec:	60 81       	ld	r22, Z
    15ee:	71 81       	ldd	r23, Z+1	; 0x01
    15f0:	07 2e       	mov	r0, r23
    15f2:	00 0c       	add	r0, r0
    15f4:	88 0b       	sbc	r24, r24
    15f6:	99 0b       	sbc	r25, r25
    15f8:	f9 2d       	mov	r31, r9
    15fa:	ff 76       	andi	r31, 0x6F	; 111
    15fc:	9f 2e       	mov	r9, r31
    15fe:	97 ff       	sbrs	r25, 7
    1600:	09 c0       	rjmp	.+18     	; 0x1614 <vfprintf+0x4ec>
    1602:	90 95       	com	r25
    1604:	80 95       	com	r24
    1606:	70 95       	com	r23
    1608:	61 95       	neg	r22
    160a:	7f 4f       	sbci	r23, 0xFF	; 255
    160c:	8f 4f       	sbci	r24, 0xFF	; 255
    160e:	9f 4f       	sbci	r25, 0xFF	; 255
    1610:	f0 68       	ori	r31, 0x80	; 128
    1612:	9f 2e       	mov	r9, r31
    1614:	2a e0       	ldi	r18, 0x0A	; 10
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	a3 01       	movw	r20, r6
    161a:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__ultoa_invert>
    161e:	c8 2e       	mov	r12, r24
    1620:	c6 18       	sub	r12, r6
    1622:	3f c0       	rjmp	.+126    	; 0x16a2 <vfprintf+0x57a>
    1624:	09 2d       	mov	r16, r9
    1626:	85 37       	cpi	r24, 0x75	; 117
    1628:	21 f4       	brne	.+8      	; 0x1632 <vfprintf+0x50a>
    162a:	0f 7e       	andi	r16, 0xEF	; 239
    162c:	2a e0       	ldi	r18, 0x0A	; 10
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	1d c0       	rjmp	.+58     	; 0x166c <vfprintf+0x544>
    1632:	09 7f       	andi	r16, 0xF9	; 249
    1634:	8f 36       	cpi	r24, 0x6F	; 111
    1636:	91 f0       	breq	.+36     	; 0x165c <vfprintf+0x534>
    1638:	18 f4       	brcc	.+6      	; 0x1640 <vfprintf+0x518>
    163a:	88 35       	cpi	r24, 0x58	; 88
    163c:	59 f0       	breq	.+22     	; 0x1654 <vfprintf+0x52c>
    163e:	c3 c0       	rjmp	.+390    	; 0x17c6 <vfprintf+0x69e>
    1640:	80 37       	cpi	r24, 0x70	; 112
    1642:	19 f0       	breq	.+6      	; 0x164a <vfprintf+0x522>
    1644:	88 37       	cpi	r24, 0x78	; 120
    1646:	11 f0       	breq	.+4      	; 0x164c <vfprintf+0x524>
    1648:	be c0       	rjmp	.+380    	; 0x17c6 <vfprintf+0x69e>
    164a:	00 61       	ori	r16, 0x10	; 16
    164c:	04 ff       	sbrs	r16, 4
    164e:	09 c0       	rjmp	.+18     	; 0x1662 <vfprintf+0x53a>
    1650:	04 60       	ori	r16, 0x04	; 4
    1652:	07 c0       	rjmp	.+14     	; 0x1662 <vfprintf+0x53a>
    1654:	94 fe       	sbrs	r9, 4
    1656:	08 c0       	rjmp	.+16     	; 0x1668 <vfprintf+0x540>
    1658:	06 60       	ori	r16, 0x06	; 6
    165a:	06 c0       	rjmp	.+12     	; 0x1668 <vfprintf+0x540>
    165c:	28 e0       	ldi	r18, 0x08	; 8
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	05 c0       	rjmp	.+10     	; 0x166c <vfprintf+0x544>
    1662:	20 e1       	ldi	r18, 0x10	; 16
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	02 c0       	rjmp	.+4      	; 0x166c <vfprintf+0x544>
    1668:	20 e1       	ldi	r18, 0x10	; 16
    166a:	32 e0       	ldi	r19, 0x02	; 2
    166c:	56 01       	movw	r10, r12
    166e:	07 ff       	sbrs	r16, 7
    1670:	09 c0       	rjmp	.+18     	; 0x1684 <vfprintf+0x55c>
    1672:	84 e0       	ldi	r24, 0x04	; 4
    1674:	a8 0e       	add	r10, r24
    1676:	b1 1c       	adc	r11, r1
    1678:	f6 01       	movw	r30, r12
    167a:	60 81       	ld	r22, Z
    167c:	71 81       	ldd	r23, Z+1	; 0x01
    167e:	82 81       	ldd	r24, Z+2	; 0x02
    1680:	93 81       	ldd	r25, Z+3	; 0x03
    1682:	08 c0       	rjmp	.+16     	; 0x1694 <vfprintf+0x56c>
    1684:	f2 e0       	ldi	r31, 0x02	; 2
    1686:	af 0e       	add	r10, r31
    1688:	b1 1c       	adc	r11, r1
    168a:	f6 01       	movw	r30, r12
    168c:	60 81       	ld	r22, Z
    168e:	71 81       	ldd	r23, Z+1	; 0x01
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	a3 01       	movw	r20, r6
    1696:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__ultoa_invert>
    169a:	c8 2e       	mov	r12, r24
    169c:	c6 18       	sub	r12, r6
    169e:	0f 77       	andi	r16, 0x7F	; 127
    16a0:	90 2e       	mov	r9, r16
    16a2:	96 fe       	sbrs	r9, 6
    16a4:	0b c0       	rjmp	.+22     	; 0x16bc <vfprintf+0x594>
    16a6:	09 2d       	mov	r16, r9
    16a8:	0e 7f       	andi	r16, 0xFE	; 254
    16aa:	c1 16       	cp	r12, r17
    16ac:	50 f4       	brcc	.+20     	; 0x16c2 <vfprintf+0x59a>
    16ae:	94 fe       	sbrs	r9, 4
    16b0:	0a c0       	rjmp	.+20     	; 0x16c6 <vfprintf+0x59e>
    16b2:	92 fc       	sbrc	r9, 2
    16b4:	08 c0       	rjmp	.+16     	; 0x16c6 <vfprintf+0x59e>
    16b6:	09 2d       	mov	r16, r9
    16b8:	0e 7e       	andi	r16, 0xEE	; 238
    16ba:	05 c0       	rjmp	.+10     	; 0x16c6 <vfprintf+0x59e>
    16bc:	dc 2c       	mov	r13, r12
    16be:	09 2d       	mov	r16, r9
    16c0:	03 c0       	rjmp	.+6      	; 0x16c8 <vfprintf+0x5a0>
    16c2:	dc 2c       	mov	r13, r12
    16c4:	01 c0       	rjmp	.+2      	; 0x16c8 <vfprintf+0x5a0>
    16c6:	d1 2e       	mov	r13, r17
    16c8:	04 ff       	sbrs	r16, 4
    16ca:	0d c0       	rjmp	.+26     	; 0x16e6 <vfprintf+0x5be>
    16cc:	fe 01       	movw	r30, r28
    16ce:	ec 0d       	add	r30, r12
    16d0:	f1 1d       	adc	r31, r1
    16d2:	80 81       	ld	r24, Z
    16d4:	80 33       	cpi	r24, 0x30	; 48
    16d6:	11 f4       	brne	.+4      	; 0x16dc <vfprintf+0x5b4>
    16d8:	09 7e       	andi	r16, 0xE9	; 233
    16da:	09 c0       	rjmp	.+18     	; 0x16ee <vfprintf+0x5c6>
    16dc:	02 ff       	sbrs	r16, 2
    16de:	06 c0       	rjmp	.+12     	; 0x16ec <vfprintf+0x5c4>
    16e0:	d3 94       	inc	r13
    16e2:	d3 94       	inc	r13
    16e4:	04 c0       	rjmp	.+8      	; 0x16ee <vfprintf+0x5c6>
    16e6:	80 2f       	mov	r24, r16
    16e8:	86 78       	andi	r24, 0x86	; 134
    16ea:	09 f0       	breq	.+2      	; 0x16ee <vfprintf+0x5c6>
    16ec:	d3 94       	inc	r13
    16ee:	03 fd       	sbrc	r16, 3
    16f0:	11 c0       	rjmp	.+34     	; 0x1714 <vfprintf+0x5ec>
    16f2:	00 ff       	sbrs	r16, 0
    16f4:	06 c0       	rjmp	.+12     	; 0x1702 <vfprintf+0x5da>
    16f6:	1c 2d       	mov	r17, r12
    16f8:	d5 14       	cp	r13, r5
    16fa:	80 f4       	brcc	.+32     	; 0x171c <vfprintf+0x5f4>
    16fc:	15 0d       	add	r17, r5
    16fe:	1d 19       	sub	r17, r13
    1700:	0d c0       	rjmp	.+26     	; 0x171c <vfprintf+0x5f4>
    1702:	d5 14       	cp	r13, r5
    1704:	58 f4       	brcc	.+22     	; 0x171c <vfprintf+0x5f4>
    1706:	b7 01       	movw	r22, r14
    1708:	80 e2       	ldi	r24, 0x20	; 32
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    1710:	d3 94       	inc	r13
    1712:	f7 cf       	rjmp	.-18     	; 0x1702 <vfprintf+0x5da>
    1714:	d5 14       	cp	r13, r5
    1716:	10 f4       	brcc	.+4      	; 0x171c <vfprintf+0x5f4>
    1718:	5d 18       	sub	r5, r13
    171a:	01 c0       	rjmp	.+2      	; 0x171e <vfprintf+0x5f6>
    171c:	51 2c       	mov	r5, r1
    171e:	04 ff       	sbrs	r16, 4
    1720:	10 c0       	rjmp	.+32     	; 0x1742 <vfprintf+0x61a>
    1722:	b7 01       	movw	r22, r14
    1724:	80 e3       	ldi	r24, 0x30	; 48
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    172c:	02 ff       	sbrs	r16, 2
    172e:	17 c0       	rjmp	.+46     	; 0x175e <vfprintf+0x636>
    1730:	01 fd       	sbrc	r16, 1
    1732:	03 c0       	rjmp	.+6      	; 0x173a <vfprintf+0x612>
    1734:	88 e7       	ldi	r24, 0x78	; 120
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	02 c0       	rjmp	.+4      	; 0x173e <vfprintf+0x616>
    173a:	88 e5       	ldi	r24, 0x58	; 88
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	b7 01       	movw	r22, r14
    1740:	0c c0       	rjmp	.+24     	; 0x175a <vfprintf+0x632>
    1742:	80 2f       	mov	r24, r16
    1744:	86 78       	andi	r24, 0x86	; 134
    1746:	59 f0       	breq	.+22     	; 0x175e <vfprintf+0x636>
    1748:	01 ff       	sbrs	r16, 1
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <vfprintf+0x628>
    174c:	8b e2       	ldi	r24, 0x2B	; 43
    174e:	01 c0       	rjmp	.+2      	; 0x1752 <vfprintf+0x62a>
    1750:	80 e2       	ldi	r24, 0x20	; 32
    1752:	07 fd       	sbrc	r16, 7
    1754:	8d e2       	ldi	r24, 0x2D	; 45
    1756:	b7 01       	movw	r22, r14
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    175e:	c1 16       	cp	r12, r17
    1760:	38 f4       	brcc	.+14     	; 0x1770 <vfprintf+0x648>
    1762:	b7 01       	movw	r22, r14
    1764:	80 e3       	ldi	r24, 0x30	; 48
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    176c:	11 50       	subi	r17, 0x01	; 1
    176e:	f7 cf       	rjmp	.-18     	; 0x175e <vfprintf+0x636>
    1770:	ca 94       	dec	r12
    1772:	f3 01       	movw	r30, r6
    1774:	ec 0d       	add	r30, r12
    1776:	f1 1d       	adc	r31, r1
    1778:	80 81       	ld	r24, Z
    177a:	b7 01       	movw	r22, r14
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    1782:	c1 10       	cpse	r12, r1
    1784:	f5 cf       	rjmp	.-22     	; 0x1770 <vfprintf+0x648>
    1786:	15 c0       	rjmp	.+42     	; 0x17b2 <vfprintf+0x68a>
    1788:	f4 e0       	ldi	r31, 0x04	; 4
    178a:	f5 15       	cp	r31, r5
    178c:	60 f5       	brcc	.+88     	; 0x17e6 <vfprintf+0x6be>
    178e:	84 e0       	ldi	r24, 0x04	; 4
    1790:	58 1a       	sub	r5, r24
    1792:	93 fe       	sbrs	r9, 3
    1794:	1f c0       	rjmp	.+62     	; 0x17d4 <vfprintf+0x6ac>
    1796:	01 11       	cpse	r16, r1
    1798:	27 c0       	rjmp	.+78     	; 0x17e8 <vfprintf+0x6c0>
    179a:	2c 85       	ldd	r18, Y+12	; 0x0c
    179c:	23 ff       	sbrs	r18, 3
    179e:	2a c0       	rjmp	.+84     	; 0x17f4 <vfprintf+0x6cc>
    17a0:	04 e5       	ldi	r16, 0x54	; 84
    17a2:	10 e0       	ldi	r17, 0x00	; 0
    17a4:	39 2d       	mov	r19, r9
    17a6:	30 71       	andi	r19, 0x10	; 16
    17a8:	93 2e       	mov	r9, r19
    17aa:	f8 01       	movw	r30, r16
    17ac:	84 91       	lpm	r24, Z
    17ae:	81 11       	cpse	r24, r1
    17b0:	24 c0       	rjmp	.+72     	; 0x17fa <vfprintf+0x6d2>
    17b2:	55 20       	and	r5, r5
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <vfprintf+0x690>
    17b6:	e4 cc       	rjmp	.-1592   	; 0x1180 <vfprintf+0x58>
    17b8:	b7 01       	movw	r22, r14
    17ba:	80 e2       	ldi	r24, 0x20	; 32
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    17c2:	5a 94       	dec	r5
    17c4:	f6 cf       	rjmp	.-20     	; 0x17b2 <vfprintf+0x68a>
    17c6:	f7 01       	movw	r30, r14
    17c8:	86 81       	ldd	r24, Z+6	; 0x06
    17ca:	97 81       	ldd	r25, Z+7	; 0x07
    17cc:	26 c0       	rjmp	.+76     	; 0x181a <vfprintf+0x6f2>
    17ce:	8f ef       	ldi	r24, 0xFF	; 255
    17d0:	9f ef       	ldi	r25, 0xFF	; 255
    17d2:	23 c0       	rjmp	.+70     	; 0x181a <vfprintf+0x6f2>
    17d4:	b7 01       	movw	r22, r14
    17d6:	80 e2       	ldi	r24, 0x20	; 32
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    17de:	5a 94       	dec	r5
    17e0:	51 10       	cpse	r5, r1
    17e2:	f8 cf       	rjmp	.-16     	; 0x17d4 <vfprintf+0x6ac>
    17e4:	d8 cf       	rjmp	.-80     	; 0x1796 <vfprintf+0x66e>
    17e6:	51 2c       	mov	r5, r1
    17e8:	b7 01       	movw	r22, r14
    17ea:	80 2f       	mov	r24, r16
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    17f2:	d3 cf       	rjmp	.-90     	; 0x179a <vfprintf+0x672>
    17f4:	08 e5       	ldi	r16, 0x58	; 88
    17f6:	10 e0       	ldi	r17, 0x00	; 0
    17f8:	d5 cf       	rjmp	.-86     	; 0x17a4 <vfprintf+0x67c>
    17fa:	91 10       	cpse	r9, r1
    17fc:	80 52       	subi	r24, 0x20	; 32
    17fe:	b7 01       	movw	r22, r14
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fputc>
    1806:	0f 5f       	subi	r16, 0xFF	; 255
    1808:	1f 4f       	sbci	r17, 0xFF	; 255
    180a:	cf cf       	rjmp	.-98     	; 0x17aa <vfprintf+0x682>
    180c:	23 e0       	ldi	r18, 0x03	; 3
    180e:	25 15       	cp	r18, r5
    1810:	10 f4       	brcc	.+4      	; 0x1816 <vfprintf+0x6ee>
    1812:	83 e0       	ldi	r24, 0x03	; 3
    1814:	bd cf       	rjmp	.-134    	; 0x1790 <vfprintf+0x668>
    1816:	51 2c       	mov	r5, r1
    1818:	c0 cf       	rjmp	.-128    	; 0x179a <vfprintf+0x672>
    181a:	60 96       	adiw	r28, 0x10	; 16
    181c:	e2 e1       	ldi	r30, 0x12	; 18
    181e:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__epilogue_restores__>

00001822 <__prologue_saves__>:
    1822:	2f 92       	push	r2
    1824:	3f 92       	push	r3
    1826:	4f 92       	push	r4
    1828:	5f 92       	push	r5
    182a:	6f 92       	push	r6
    182c:	7f 92       	push	r7
    182e:	8f 92       	push	r8
    1830:	9f 92       	push	r9
    1832:	af 92       	push	r10
    1834:	bf 92       	push	r11
    1836:	cf 92       	push	r12
    1838:	df 92       	push	r13
    183a:	ef 92       	push	r14
    183c:	ff 92       	push	r15
    183e:	0f 93       	push	r16
    1840:	1f 93       	push	r17
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	ca 1b       	sub	r28, r26
    184c:	db 0b       	sbc	r29, r27
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	f8 94       	cli
    1852:	de bf       	out	0x3e, r29	; 62
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	cd bf       	out	0x3d, r28	; 61
    1858:	09 94       	ijmp

0000185a <__epilogue_restores__>:
    185a:	2a 88       	ldd	r2, Y+18	; 0x12
    185c:	39 88       	ldd	r3, Y+17	; 0x11
    185e:	48 88       	ldd	r4, Y+16	; 0x10
    1860:	5f 84       	ldd	r5, Y+15	; 0x0f
    1862:	6e 84       	ldd	r6, Y+14	; 0x0e
    1864:	7d 84       	ldd	r7, Y+13	; 0x0d
    1866:	8c 84       	ldd	r8, Y+12	; 0x0c
    1868:	9b 84       	ldd	r9, Y+11	; 0x0b
    186a:	aa 84       	ldd	r10, Y+10	; 0x0a
    186c:	b9 84       	ldd	r11, Y+9	; 0x09
    186e:	c8 84       	ldd	r12, Y+8	; 0x08
    1870:	df 80       	ldd	r13, Y+7	; 0x07
    1872:	ee 80       	ldd	r14, Y+6	; 0x06
    1874:	fd 80       	ldd	r15, Y+5	; 0x05
    1876:	0c 81       	ldd	r16, Y+4	; 0x04
    1878:	1b 81       	ldd	r17, Y+3	; 0x03
    187a:	aa 81       	ldd	r26, Y+2	; 0x02
    187c:	b9 81       	ldd	r27, Y+1	; 0x01
    187e:	ce 0f       	add	r28, r30
    1880:	d1 1d       	adc	r29, r1
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	f8 94       	cli
    1886:	de bf       	out	0x3e, r29	; 62
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	cd bf       	out	0x3d, r28	; 61
    188c:	ed 01       	movw	r28, r26
    188e:	08 95       	ret

00001890 <__ftoa_engine>:
    1890:	28 30       	cpi	r18, 0x08	; 8
    1892:	08 f0       	brcs	.+2      	; 0x1896 <__ftoa_engine+0x6>
    1894:	27 e0       	ldi	r18, 0x07	; 7
    1896:	33 27       	eor	r19, r19
    1898:	da 01       	movw	r26, r20
    189a:	99 0f       	add	r25, r25
    189c:	31 1d       	adc	r19, r1
    189e:	87 fd       	sbrc	r24, 7
    18a0:	91 60       	ori	r25, 0x01	; 1
    18a2:	00 96       	adiw	r24, 0x00	; 0
    18a4:	61 05       	cpc	r22, r1
    18a6:	71 05       	cpc	r23, r1
    18a8:	39 f4       	brne	.+14     	; 0x18b8 <__ftoa_engine+0x28>
    18aa:	32 60       	ori	r19, 0x02	; 2
    18ac:	2e 5f       	subi	r18, 0xFE	; 254
    18ae:	3d 93       	st	X+, r19
    18b0:	30 e3       	ldi	r19, 0x30	; 48
    18b2:	2a 95       	dec	r18
    18b4:	e1 f7       	brne	.-8      	; 0x18ae <__ftoa_engine+0x1e>
    18b6:	08 95       	ret
    18b8:	9f 3f       	cpi	r25, 0xFF	; 255
    18ba:	30 f0       	brcs	.+12     	; 0x18c8 <__ftoa_engine+0x38>
    18bc:	80 38       	cpi	r24, 0x80	; 128
    18be:	71 05       	cpc	r23, r1
    18c0:	61 05       	cpc	r22, r1
    18c2:	09 f0       	breq	.+2      	; 0x18c6 <__ftoa_engine+0x36>
    18c4:	3c 5f       	subi	r19, 0xFC	; 252
    18c6:	3c 5f       	subi	r19, 0xFC	; 252
    18c8:	3d 93       	st	X+, r19
    18ca:	91 30       	cpi	r25, 0x01	; 1
    18cc:	08 f0       	brcs	.+2      	; 0x18d0 <__ftoa_engine+0x40>
    18ce:	80 68       	ori	r24, 0x80	; 128
    18d0:	91 1d       	adc	r25, r1
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	1f 93       	push	r17
    18d8:	0f 93       	push	r16
    18da:	ff 92       	push	r15
    18dc:	ef 92       	push	r14
    18de:	19 2f       	mov	r17, r25
    18e0:	98 7f       	andi	r25, 0xF8	; 248
    18e2:	96 95       	lsr	r25
    18e4:	e9 2f       	mov	r30, r25
    18e6:	96 95       	lsr	r25
    18e8:	96 95       	lsr	r25
    18ea:	e9 0f       	add	r30, r25
    18ec:	ff 27       	eor	r31, r31
    18ee:	ea 54       	subi	r30, 0x4A	; 74
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	99 27       	eor	r25, r25
    18f4:	33 27       	eor	r19, r19
    18f6:	ee 24       	eor	r14, r14
    18f8:	ff 24       	eor	r15, r15
    18fa:	a7 01       	movw	r20, r14
    18fc:	e7 01       	movw	r28, r14
    18fe:	05 90       	lpm	r0, Z+
    1900:	08 94       	sec
    1902:	07 94       	ror	r0
    1904:	28 f4       	brcc	.+10     	; 0x1910 <__ftoa_engine+0x80>
    1906:	36 0f       	add	r19, r22
    1908:	e7 1e       	adc	r14, r23
    190a:	f8 1e       	adc	r15, r24
    190c:	49 1f       	adc	r20, r25
    190e:	51 1d       	adc	r21, r1
    1910:	66 0f       	add	r22, r22
    1912:	77 1f       	adc	r23, r23
    1914:	88 1f       	adc	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	06 94       	lsr	r0
    191a:	a1 f7       	brne	.-24     	; 0x1904 <__ftoa_engine+0x74>
    191c:	05 90       	lpm	r0, Z+
    191e:	07 94       	ror	r0
    1920:	28 f4       	brcc	.+10     	; 0x192c <__ftoa_engine+0x9c>
    1922:	e7 0e       	add	r14, r23
    1924:	f8 1e       	adc	r15, r24
    1926:	49 1f       	adc	r20, r25
    1928:	56 1f       	adc	r21, r22
    192a:	c1 1d       	adc	r28, r1
    192c:	77 0f       	add	r23, r23
    192e:	88 1f       	adc	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	66 1f       	adc	r22, r22
    1934:	06 94       	lsr	r0
    1936:	a1 f7       	brne	.-24     	; 0x1920 <__ftoa_engine+0x90>
    1938:	05 90       	lpm	r0, Z+
    193a:	07 94       	ror	r0
    193c:	28 f4       	brcc	.+10     	; 0x1948 <__ftoa_engine+0xb8>
    193e:	f8 0e       	add	r15, r24
    1940:	49 1f       	adc	r20, r25
    1942:	56 1f       	adc	r21, r22
    1944:	c7 1f       	adc	r28, r23
    1946:	d1 1d       	adc	r29, r1
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	66 1f       	adc	r22, r22
    194e:	77 1f       	adc	r23, r23
    1950:	06 94       	lsr	r0
    1952:	a1 f7       	brne	.-24     	; 0x193c <__ftoa_engine+0xac>
    1954:	05 90       	lpm	r0, Z+
    1956:	07 94       	ror	r0
    1958:	20 f4       	brcc	.+8      	; 0x1962 <__ftoa_engine+0xd2>
    195a:	49 0f       	add	r20, r25
    195c:	56 1f       	adc	r21, r22
    195e:	c7 1f       	adc	r28, r23
    1960:	d8 1f       	adc	r29, r24
    1962:	99 0f       	add	r25, r25
    1964:	66 1f       	adc	r22, r22
    1966:	77 1f       	adc	r23, r23
    1968:	88 1f       	adc	r24, r24
    196a:	06 94       	lsr	r0
    196c:	a9 f7       	brne	.-22     	; 0x1958 <__ftoa_engine+0xc8>
    196e:	84 91       	lpm	r24, Z
    1970:	10 95       	com	r17
    1972:	17 70       	andi	r17, 0x07	; 7
    1974:	41 f0       	breq	.+16     	; 0x1986 <__ftoa_engine+0xf6>
    1976:	d6 95       	lsr	r29
    1978:	c7 95       	ror	r28
    197a:	57 95       	ror	r21
    197c:	47 95       	ror	r20
    197e:	f7 94       	ror	r15
    1980:	e7 94       	ror	r14
    1982:	1a 95       	dec	r17
    1984:	c1 f7       	brne	.-16     	; 0x1976 <__ftoa_engine+0xe6>
    1986:	ec e5       	ldi	r30, 0x5C	; 92
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	68 94       	set
    198c:	15 90       	lpm	r1, Z+
    198e:	15 91       	lpm	r17, Z+
    1990:	35 91       	lpm	r19, Z+
    1992:	65 91       	lpm	r22, Z+
    1994:	95 91       	lpm	r25, Z+
    1996:	05 90       	lpm	r0, Z+
    1998:	7f e2       	ldi	r23, 0x2F	; 47
    199a:	73 95       	inc	r23
    199c:	e1 18       	sub	r14, r1
    199e:	f1 0a       	sbc	r15, r17
    19a0:	43 0b       	sbc	r20, r19
    19a2:	56 0b       	sbc	r21, r22
    19a4:	c9 0b       	sbc	r28, r25
    19a6:	d0 09       	sbc	r29, r0
    19a8:	c0 f7       	brcc	.-16     	; 0x199a <__ftoa_engine+0x10a>
    19aa:	e1 0c       	add	r14, r1
    19ac:	f1 1e       	adc	r15, r17
    19ae:	43 1f       	adc	r20, r19
    19b0:	56 1f       	adc	r21, r22
    19b2:	c9 1f       	adc	r28, r25
    19b4:	d0 1d       	adc	r29, r0
    19b6:	7e f4       	brtc	.+30     	; 0x19d6 <__ftoa_engine+0x146>
    19b8:	70 33       	cpi	r23, 0x30	; 48
    19ba:	11 f4       	brne	.+4      	; 0x19c0 <__ftoa_engine+0x130>
    19bc:	8a 95       	dec	r24
    19be:	e6 cf       	rjmp	.-52     	; 0x198c <__ftoa_engine+0xfc>
    19c0:	e8 94       	clt
    19c2:	01 50       	subi	r16, 0x01	; 1
    19c4:	30 f0       	brcs	.+12     	; 0x19d2 <__ftoa_engine+0x142>
    19c6:	08 0f       	add	r16, r24
    19c8:	0a f4       	brpl	.+2      	; 0x19cc <__ftoa_engine+0x13c>
    19ca:	00 27       	eor	r16, r16
    19cc:	02 17       	cp	r16, r18
    19ce:	08 f4       	brcc	.+2      	; 0x19d2 <__ftoa_engine+0x142>
    19d0:	20 2f       	mov	r18, r16
    19d2:	23 95       	inc	r18
    19d4:	02 2f       	mov	r16, r18
    19d6:	7a 33       	cpi	r23, 0x3A	; 58
    19d8:	28 f0       	brcs	.+10     	; 0x19e4 <__ftoa_engine+0x154>
    19da:	79 e3       	ldi	r23, 0x39	; 57
    19dc:	7d 93       	st	X+, r23
    19de:	2a 95       	dec	r18
    19e0:	e9 f7       	brne	.-6      	; 0x19dc <__ftoa_engine+0x14c>
    19e2:	10 c0       	rjmp	.+32     	; 0x1a04 <__ftoa_engine+0x174>
    19e4:	7d 93       	st	X+, r23
    19e6:	2a 95       	dec	r18
    19e8:	89 f6       	brne	.-94     	; 0x198c <__ftoa_engine+0xfc>
    19ea:	06 94       	lsr	r0
    19ec:	97 95       	ror	r25
    19ee:	67 95       	ror	r22
    19f0:	37 95       	ror	r19
    19f2:	17 95       	ror	r17
    19f4:	17 94       	ror	r1
    19f6:	e1 18       	sub	r14, r1
    19f8:	f1 0a       	sbc	r15, r17
    19fa:	43 0b       	sbc	r20, r19
    19fc:	56 0b       	sbc	r21, r22
    19fe:	c9 0b       	sbc	r28, r25
    1a00:	d0 09       	sbc	r29, r0
    1a02:	98 f0       	brcs	.+38     	; 0x1a2a <__ftoa_engine+0x19a>
    1a04:	23 95       	inc	r18
    1a06:	7e 91       	ld	r23, -X
    1a08:	73 95       	inc	r23
    1a0a:	7a 33       	cpi	r23, 0x3A	; 58
    1a0c:	08 f0       	brcs	.+2      	; 0x1a10 <__ftoa_engine+0x180>
    1a0e:	70 e3       	ldi	r23, 0x30	; 48
    1a10:	7c 93       	st	X, r23
    1a12:	20 13       	cpse	r18, r16
    1a14:	b8 f7       	brcc	.-18     	; 0x1a04 <__ftoa_engine+0x174>
    1a16:	7e 91       	ld	r23, -X
    1a18:	70 61       	ori	r23, 0x10	; 16
    1a1a:	7d 93       	st	X+, r23
    1a1c:	30 f0       	brcs	.+12     	; 0x1a2a <__ftoa_engine+0x19a>
    1a1e:	83 95       	inc	r24
    1a20:	71 e3       	ldi	r23, 0x31	; 49
    1a22:	7d 93       	st	X+, r23
    1a24:	70 e3       	ldi	r23, 0x30	; 48
    1a26:	2a 95       	dec	r18
    1a28:	e1 f7       	brne	.-8      	; 0x1a22 <__ftoa_engine+0x192>
    1a2a:	11 24       	eor	r1, r1
    1a2c:	ef 90       	pop	r14
    1a2e:	ff 90       	pop	r15
    1a30:	0f 91       	pop	r16
    1a32:	1f 91       	pop	r17
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	99 27       	eor	r25, r25
    1a3a:	87 fd       	sbrc	r24, 7
    1a3c:	90 95       	com	r25
    1a3e:	08 95       	ret

00001a40 <strnlen_P>:
    1a40:	fc 01       	movw	r30, r24
    1a42:	05 90       	lpm	r0, Z+
    1a44:	61 50       	subi	r22, 0x01	; 1
    1a46:	70 40       	sbci	r23, 0x00	; 0
    1a48:	01 10       	cpse	r0, r1
    1a4a:	d8 f7       	brcc	.-10     	; 0x1a42 <strnlen_P+0x2>
    1a4c:	80 95       	com	r24
    1a4e:	90 95       	com	r25
    1a50:	8e 0f       	add	r24, r30
    1a52:	9f 1f       	adc	r25, r31
    1a54:	08 95       	ret

00001a56 <strnlen>:
    1a56:	fc 01       	movw	r30, r24
    1a58:	61 50       	subi	r22, 0x01	; 1
    1a5a:	70 40       	sbci	r23, 0x00	; 0
    1a5c:	01 90       	ld	r0, Z+
    1a5e:	01 10       	cpse	r0, r1
    1a60:	d8 f7       	brcc	.-10     	; 0x1a58 <strnlen+0x2>
    1a62:	80 95       	com	r24
    1a64:	90 95       	com	r25
    1a66:	8e 0f       	add	r24, r30
    1a68:	9f 1f       	adc	r25, r31
    1a6a:	08 95       	ret

00001a6c <fputc>:
    1a6c:	0f 93       	push	r16
    1a6e:	1f 93       	push	r17
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	fb 01       	movw	r30, r22
    1a76:	23 81       	ldd	r18, Z+3	; 0x03
    1a78:	21 fd       	sbrc	r18, 1
    1a7a:	03 c0       	rjmp	.+6      	; 0x1a82 <fputc+0x16>
    1a7c:	8f ef       	ldi	r24, 0xFF	; 255
    1a7e:	9f ef       	ldi	r25, 0xFF	; 255
    1a80:	2c c0       	rjmp	.+88     	; 0x1ada <fputc+0x6e>
    1a82:	22 ff       	sbrs	r18, 2
    1a84:	16 c0       	rjmp	.+44     	; 0x1ab2 <fputc+0x46>
    1a86:	46 81       	ldd	r20, Z+6	; 0x06
    1a88:	57 81       	ldd	r21, Z+7	; 0x07
    1a8a:	24 81       	ldd	r18, Z+4	; 0x04
    1a8c:	35 81       	ldd	r19, Z+5	; 0x05
    1a8e:	42 17       	cp	r20, r18
    1a90:	53 07       	cpc	r21, r19
    1a92:	44 f4       	brge	.+16     	; 0x1aa4 <fputc+0x38>
    1a94:	a0 81       	ld	r26, Z
    1a96:	b1 81       	ldd	r27, Z+1	; 0x01
    1a98:	9d 01       	movw	r18, r26
    1a9a:	2f 5f       	subi	r18, 0xFF	; 255
    1a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9e:	31 83       	std	Z+1, r19	; 0x01
    1aa0:	20 83       	st	Z, r18
    1aa2:	8c 93       	st	X, r24
    1aa4:	26 81       	ldd	r18, Z+6	; 0x06
    1aa6:	37 81       	ldd	r19, Z+7	; 0x07
    1aa8:	2f 5f       	subi	r18, 0xFF	; 255
    1aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    1aac:	37 83       	std	Z+7, r19	; 0x07
    1aae:	26 83       	std	Z+6, r18	; 0x06
    1ab0:	14 c0       	rjmp	.+40     	; 0x1ada <fputc+0x6e>
    1ab2:	8b 01       	movw	r16, r22
    1ab4:	ec 01       	movw	r28, r24
    1ab6:	fb 01       	movw	r30, r22
    1ab8:	00 84       	ldd	r0, Z+8	; 0x08
    1aba:	f1 85       	ldd	r31, Z+9	; 0x09
    1abc:	e0 2d       	mov	r30, r0
    1abe:	09 95       	icall
    1ac0:	89 2b       	or	r24, r25
    1ac2:	e1 f6       	brne	.-72     	; 0x1a7c <fputc+0x10>
    1ac4:	d8 01       	movw	r26, r16
    1ac6:	16 96       	adiw	r26, 0x06	; 6
    1ac8:	8d 91       	ld	r24, X+
    1aca:	9c 91       	ld	r25, X
    1acc:	17 97       	sbiw	r26, 0x07	; 7
    1ace:	01 96       	adiw	r24, 0x01	; 1
    1ad0:	17 96       	adiw	r26, 0x07	; 7
    1ad2:	9c 93       	st	X, r25
    1ad4:	8e 93       	st	-X, r24
    1ad6:	16 97       	sbiw	r26, 0x06	; 6
    1ad8:	ce 01       	movw	r24, r28
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	1f 91       	pop	r17
    1ae0:	0f 91       	pop	r16
    1ae2:	08 95       	ret

00001ae4 <vsprintf>:
    1ae4:	ae e0       	ldi	r26, 0x0E	; 14
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e8 e7       	ldi	r30, 0x78	; 120
    1aea:	fd e0       	ldi	r31, 0x0D	; 13
    1aec:	0c 94 1f 0c 	jmp	0x183e	; 0x183e <__prologue_saves__+0x1c>
    1af0:	8c 01       	movw	r16, r24
    1af2:	86 e0       	ldi	r24, 0x06	; 6
    1af4:	8c 83       	std	Y+4, r24	; 0x04
    1af6:	1a 83       	std	Y+2, r17	; 0x02
    1af8:	09 83       	std	Y+1, r16	; 0x01
    1afa:	8f ef       	ldi	r24, 0xFF	; 255
    1afc:	9f e7       	ldi	r25, 0x7F	; 127
    1afe:	9e 83       	std	Y+6, r25	; 0x06
    1b00:	8d 83       	std	Y+5, r24	; 0x05
    1b02:	ce 01       	movw	r24, r28
    1b04:	01 96       	adiw	r24, 0x01	; 1
    1b06:	0e 94 94 08 	call	0x1128	; 0x1128 <vfprintf>
    1b0a:	ef 81       	ldd	r30, Y+7	; 0x07
    1b0c:	f8 85       	ldd	r31, Y+8	; 0x08
    1b0e:	e0 0f       	add	r30, r16
    1b10:	f1 1f       	adc	r31, r17
    1b12:	10 82       	st	Z, r1
    1b14:	2e 96       	adiw	r28, 0x0e	; 14
    1b16:	e4 e0       	ldi	r30, 0x04	; 4
    1b18:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__epilogue_restores__+0x1c>

00001b1c <__ultoa_invert>:
    1b1c:	fa 01       	movw	r30, r20
    1b1e:	aa 27       	eor	r26, r26
    1b20:	28 30       	cpi	r18, 0x08	; 8
    1b22:	51 f1       	breq	.+84     	; 0x1b78 <__ultoa_invert+0x5c>
    1b24:	20 31       	cpi	r18, 0x10	; 16
    1b26:	81 f1       	breq	.+96     	; 0x1b88 <__ultoa_invert+0x6c>
    1b28:	e8 94       	clt
    1b2a:	6f 93       	push	r22
    1b2c:	6e 7f       	andi	r22, 0xFE	; 254
    1b2e:	6e 5f       	subi	r22, 0xFE	; 254
    1b30:	7f 4f       	sbci	r23, 0xFF	; 255
    1b32:	8f 4f       	sbci	r24, 0xFF	; 255
    1b34:	9f 4f       	sbci	r25, 0xFF	; 255
    1b36:	af 4f       	sbci	r26, 0xFF	; 255
    1b38:	b1 e0       	ldi	r27, 0x01	; 1
    1b3a:	3e d0       	rcall	.+124    	; 0x1bb8 <__ultoa_invert+0x9c>
    1b3c:	b4 e0       	ldi	r27, 0x04	; 4
    1b3e:	3c d0       	rcall	.+120    	; 0x1bb8 <__ultoa_invert+0x9c>
    1b40:	67 0f       	add	r22, r23
    1b42:	78 1f       	adc	r23, r24
    1b44:	89 1f       	adc	r24, r25
    1b46:	9a 1f       	adc	r25, r26
    1b48:	a1 1d       	adc	r26, r1
    1b4a:	68 0f       	add	r22, r24
    1b4c:	79 1f       	adc	r23, r25
    1b4e:	8a 1f       	adc	r24, r26
    1b50:	91 1d       	adc	r25, r1
    1b52:	a1 1d       	adc	r26, r1
    1b54:	6a 0f       	add	r22, r26
    1b56:	71 1d       	adc	r23, r1
    1b58:	81 1d       	adc	r24, r1
    1b5a:	91 1d       	adc	r25, r1
    1b5c:	a1 1d       	adc	r26, r1
    1b5e:	20 d0       	rcall	.+64     	; 0x1ba0 <__ultoa_invert+0x84>
    1b60:	09 f4       	brne	.+2      	; 0x1b64 <__ultoa_invert+0x48>
    1b62:	68 94       	set
    1b64:	3f 91       	pop	r19
    1b66:	2a e0       	ldi	r18, 0x0A	; 10
    1b68:	26 9f       	mul	r18, r22
    1b6a:	11 24       	eor	r1, r1
    1b6c:	30 19       	sub	r19, r0
    1b6e:	30 5d       	subi	r19, 0xD0	; 208
    1b70:	31 93       	st	Z+, r19
    1b72:	de f6       	brtc	.-74     	; 0x1b2a <__ultoa_invert+0xe>
    1b74:	cf 01       	movw	r24, r30
    1b76:	08 95       	ret
    1b78:	46 2f       	mov	r20, r22
    1b7a:	47 70       	andi	r20, 0x07	; 7
    1b7c:	40 5d       	subi	r20, 0xD0	; 208
    1b7e:	41 93       	st	Z+, r20
    1b80:	b3 e0       	ldi	r27, 0x03	; 3
    1b82:	0f d0       	rcall	.+30     	; 0x1ba2 <__ultoa_invert+0x86>
    1b84:	c9 f7       	brne	.-14     	; 0x1b78 <__ultoa_invert+0x5c>
    1b86:	f6 cf       	rjmp	.-20     	; 0x1b74 <__ultoa_invert+0x58>
    1b88:	46 2f       	mov	r20, r22
    1b8a:	4f 70       	andi	r20, 0x0F	; 15
    1b8c:	40 5d       	subi	r20, 0xD0	; 208
    1b8e:	4a 33       	cpi	r20, 0x3A	; 58
    1b90:	18 f0       	brcs	.+6      	; 0x1b98 <__ultoa_invert+0x7c>
    1b92:	49 5d       	subi	r20, 0xD9	; 217
    1b94:	31 fd       	sbrc	r19, 1
    1b96:	40 52       	subi	r20, 0x20	; 32
    1b98:	41 93       	st	Z+, r20
    1b9a:	02 d0       	rcall	.+4      	; 0x1ba0 <__ultoa_invert+0x84>
    1b9c:	a9 f7       	brne	.-22     	; 0x1b88 <__ultoa_invert+0x6c>
    1b9e:	ea cf       	rjmp	.-44     	; 0x1b74 <__ultoa_invert+0x58>
    1ba0:	b4 e0       	ldi	r27, 0x04	; 4
    1ba2:	a6 95       	lsr	r26
    1ba4:	97 95       	ror	r25
    1ba6:	87 95       	ror	r24
    1ba8:	77 95       	ror	r23
    1baa:	67 95       	ror	r22
    1bac:	ba 95       	dec	r27
    1bae:	c9 f7       	brne	.-14     	; 0x1ba2 <__ultoa_invert+0x86>
    1bb0:	00 97       	sbiw	r24, 0x00	; 0
    1bb2:	61 05       	cpc	r22, r1
    1bb4:	71 05       	cpc	r23, r1
    1bb6:	08 95       	ret
    1bb8:	9b 01       	movw	r18, r22
    1bba:	ac 01       	movw	r20, r24
    1bbc:	0a 2e       	mov	r0, r26
    1bbe:	06 94       	lsr	r0
    1bc0:	57 95       	ror	r21
    1bc2:	47 95       	ror	r20
    1bc4:	37 95       	ror	r19
    1bc6:	27 95       	ror	r18
    1bc8:	ba 95       	dec	r27
    1bca:	c9 f7       	brne	.-14     	; 0x1bbe <__ultoa_invert+0xa2>
    1bcc:	62 0f       	add	r22, r18
    1bce:	73 1f       	adc	r23, r19
    1bd0:	84 1f       	adc	r24, r20
    1bd2:	95 1f       	adc	r25, r21
    1bd4:	a0 1d       	adc	r26, r0
    1bd6:	08 95       	ret

00001bd8 <_exit>:
    1bd8:	f8 94       	cli

00001bda <__stop_program>:
    1bda:	ff cf       	rjmp	.-2      	; 0x1bda <__stop_program>
