
nowy_sterownik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007c  00800060  00001a0e  00001aa2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000307  008000dc  008000dc  00001b1e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00001bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002816  00000000  00000000  00001e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001393  00000000  00000000  00004696  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001642  00000000  00000000  00005a29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000065c  00000000  00000000  0000706c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000df1  00000000  00000000  000076c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000145b  00000000  00000000  000084b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00009914  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      1c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      28:	0c 94 80 04 	jmp	0x900	; 0x900 <__vector_10>
      2c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 62 05 	jmp	0xac4	; 0xac4 <__vector_13>
      38:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__vector_14>
      3c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	6e 61       	ori	r22, 0x1E	; 30
      56:	6e 00       	.word	0x006e	; ????

00000058 <__c.2332>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf e5       	ldi	r28, 0x5F	; 95
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	10 e0       	ldi	r17, 0x00	; 0
     164:	a0 e6       	ldi	r26, 0x60	; 96
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	ee e0       	ldi	r30, 0x0E	; 14
     16a:	fa e1       	ldi	r31, 0x1A	; 26
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x10>
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	ac 3d       	cpi	r26, 0xDC	; 220
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0xc>

00000178 <__do_clear_bss>:
     178:	23 e0       	ldi	r18, 0x03	; 3
     17a:	ac ed       	ldi	r26, 0xDC	; 220
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a3 3e       	cpi	r26, 0xE3	; 227
     184:	b2 07       	cpc	r27, r18
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
     18c:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <_exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <debug_msg>:

#if L_DEBUG
#include <stdio.h>
char debug_buff[64];
void debug_msg( const char* format, ... )
{
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62
     19c:	ae 01       	movw	r20, r28
     19e:	4b 5f       	subi	r20, 0xFB	; 251
     1a0:	5f 4f       	sbci	r21, 0xFF	; 255
     1a2:	fa 01       	movw	r30, r20
     1a4:	61 91       	ld	r22, Z+
     1a6:	71 91       	ld	r23, Z+
     1a8:	af 01       	movw	r20, r30
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
     1aa:	85 e8       	ldi	r24, 0x85	; 133
     1ac:	92 e0       	ldi	r25, 0x02	; 2
     1ae:	0e 94 8b 0c 	call	0x1916	; 0x1916 <vsprintf>
	va_end( arglist );
	#if USE_USART
	uart_puts(debug_buff);
     1b2:	85 e8       	ldi	r24, 0x85	; 133
     1b4:	92 e0       	ldi	r25, 0x02	; 2
     1b6:	0e 94 07 06 	call	0xc0e	; 0xc0e <uart0_puts>
	#endif
}
     1ba:	df 91       	pop	r29
     1bc:	cf 91       	pop	r28
     1be:	08 95       	ret

000001c0 <init_pin>:
uint8_t servo_vibro_value;

void init_pin(void)
{
	//UART_TX_PIN
	DDRD |= (1<<1);
     1c0:	89 9a       	sbi	0x11, 1	; 17
     1c2:	08 95       	ret

000001c4 <init_driver>:
}

void init_driver(void)
{
	#if USE_USART
	uart_init(UART_BAUD_SELECT(57600, F_CPU));
     1c4:	88 e0       	ldi	r24, 0x08	; 8
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 bc 05 	call	0xb78	; 0xb78 <uart0_init>
	#endif
	timer0_init(TIM0_PRESCALER, TIM0_ARR);
     1cc:	62 e3       	ldi	r22, 0x32	; 50
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	0e 94 b5 04 	call	0x96a	; 0x96a <timer0_init>
	init_system();
     1d4:	0e 94 71 04 	call	0x8e2	; 0x8e2 <init_system>
	init_measure();
     1d8:	0e 94 1a 03 	call	0x634	; 0x634 <init_measure>
	at_communication_init();
     1dc:	0e 94 d5 02 	call	0x5aa	; 0x5aa <at_communication_init>
	CLEAR_PIN(SFIOR, PUD);
     1e0:	80 b7       	in	r24, 0x30	; 48
     1e2:	8b 7f       	andi	r24, 0xFB	; 251
     1e4:	80 bf       	out	0x30, r24	; 48
     1e6:	08 95       	ret

000001e8 <main>:

uint32_t tets_cnt;
int main(void)
{
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	0e 94 2c 04 	call	0x858	; 0x858 <servo_init>
	#endif
	init_pin();
     1ee:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <init_pin>
	sei();
     1f2:	78 94       	sei
	init_driver();
     1f4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <init_driver>
	debug_msg("/-----------START SYSTEM------------/\n");
     1f8:	80 e6       	ldi	r24, 0x60	; 96
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	9f 93       	push	r25
     1fe:	8f 93       	push	r24
     200:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
	on_system();
     204:	0e 94 72 04 	call	0x8e4	; 0x8e4 <on_system>
     208:	0f 90       	pop	r0
     20a:	0f 90       	pop	r0
		atm_com_process();
		at_read_data_process();
		#if SERIAL_PLOT && USE_USART
		uart_process();
		#endif
		if (tets_cnt < mktime.ms) {
     20c:	cd ed       	ldi	r28, 0xDD	; 221
     20e:	d3 e0       	ldi	r29, 0x03	; 3
			debug_msg("ATMEGA\n\r");
     210:	07 e8       	ldi	r16, 0x87	; 135
     212:	10 e0       	ldi	r17, 0x00	; 0
	debug_msg("/-----------START SYSTEM------------/\n");
	on_system();
    /* Replace with your application code */
    while (1) 
    {
		dcmotor_process(motor_value);
     214:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <motor_value>
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <dcmotor_process>
		#if CONFIG_DEVICE_SIEWNIK
		servo_process(servo_vibro_value);
     21e:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <servo_vibro_value>
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 5f 04 	call	0x8be	; 0x8be <servo_process>
		#endif
		measure_process();
     228:	0e 94 38 03 	call	0x670	; 0x670 <measure_process>
		accumulator_process();
     22c:	0e 94 44 01 	call	0x288	; 0x288 <accumulator_process>
		atm_com_process();
     230:	0e 94 9b 02 	call	0x536	; 0x536 <atm_com_process>
		at_read_data_process();
     234:	0e 94 5e 02 	call	0x4bc	; 0x4bc <at_read_data_process>
		#if SERIAL_PLOT && USE_USART
		uart_process();
		#endif
		if (tets_cnt < mktime.ms) {
     238:	4a 81       	ldd	r20, Y+2	; 0x02
     23a:	5b 81       	ldd	r21, Y+3	; 0x03
     23c:	6c 81       	ldd	r22, Y+4	; 0x04
     23e:	7d 81       	ldd	r23, Y+5	; 0x05
     240:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <tets_cnt>
     244:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <tets_cnt+0x1>
     248:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <tets_cnt+0x2>
     24c:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <tets_cnt+0x3>
     250:	84 17       	cp	r24, r20
     252:	95 07       	cpc	r25, r21
     254:	a6 07       	cpc	r26, r22
     256:	b7 07       	cpc	r27, r23
     258:	e8 f6       	brcc	.-70     	; 0x214 <main+0x2c>
			debug_msg("ATMEGA\n\r");
     25a:	1f 93       	push	r17
     25c:	0f 93       	push	r16
     25e:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
			tets_cnt = mktime.ms + 1000;
     262:	8a 81       	ldd	r24, Y+2	; 0x02
     264:	9b 81       	ldd	r25, Y+3	; 0x03
     266:	ac 81       	ldd	r26, Y+4	; 0x04
     268:	bd 81       	ldd	r27, Y+5	; 0x05
     26a:	88 51       	subi	r24, 0x18	; 24
     26c:	9c 4f       	sbci	r25, 0xFC	; 252
     26e:	af 4f       	sbci	r26, 0xFF	; 255
     270:	bf 4f       	sbci	r27, 0xFF	; 255
     272:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <tets_cnt>
     276:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <tets_cnt+0x1>
     27a:	a0 93 c7 02 	sts	0x02C7, r26	; 0x8002c7 <tets_cnt+0x2>
     27e:	b0 93 c8 02 	sts	0x02C8, r27	; 0x8002c8 <tets_cnt+0x3>
     282:	0f 90       	pop	r0
     284:	0f 90       	pop	r0
     286:	c6 cf       	rjmp	.-116    	; 0x214 <main+0x2c>

00000288 <accumulator_process>:
void accumulator_process(void)
{
	
	static timer_t accumulator_timer;
	
	if(accumulator_timer < mktime.ms)
     288:	40 91 df 03 	lds	r20, 0x03DF	; 0x8003df <mktime+0x2>
     28c:	50 91 e0 03 	lds	r21, 0x03E0	; 0x8003e0 <mktime+0x3>
     290:	60 91 e1 03 	lds	r22, 0x03E1	; 0x8003e1 <mktime+0x4>
     294:	70 91 e2 03 	lds	r23, 0x03E2	; 0x8003e2 <mktime+0x5>
     298:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__data_end>
     29c:	90 91 dd 00 	lds	r25, 0x00DD	; 0x8000dd <__data_end+0x1>
     2a0:	a0 91 de 00 	lds	r26, 0x00DE	; 0x8000de <__data_end+0x2>
     2a4:	b0 91 df 00 	lds	r27, 0x00DF	; 0x8000df <__data_end+0x3>
     2a8:	84 17       	cp	r24, r20
     2aa:	95 07       	cpc	r25, r21
     2ac:	a6 07       	cpc	r26, r22
     2ae:	b7 07       	cpc	r27, r23
     2b0:	b8 f4       	brcc	.+46     	; 0x2e0 <accumulator_process+0x58>
	{
		filtered_accum_adc_val = measure_get_filtered_value(MEAS_ACCUM);
     2b2:	83 e0       	ldi	r24, 0x03	; 3
     2b4:	0e 94 13 04 	call	0x826	; 0x826 <measure_get_filtered_value>
		accumulator_timer = mktime.ms + 100;
     2b8:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <mktime+0x2>
     2bc:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <mktime+0x3>
     2c0:	a0 91 e1 03 	lds	r26, 0x03E1	; 0x8003e1 <mktime+0x4>
     2c4:	b0 91 e2 03 	lds	r27, 0x03E2	; 0x8003e2 <mktime+0x5>
     2c8:	8c 59       	subi	r24, 0x9C	; 156
     2ca:	9f 4f       	sbci	r25, 0xFF	; 255
     2cc:	af 4f       	sbci	r26, 0xFF	; 255
     2ce:	bf 4f       	sbci	r27, 0xFF	; 255
     2d0:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__data_end>
     2d4:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <__data_end+0x1>
     2d8:	a0 93 de 00 	sts	0x00DE, r26	; 0x8000de <__data_end+0x2>
     2dc:	b0 93 df 00 	sts	0x00DF, r27	; 0x8000df <__data_end+0x3>
     2e0:	08 95       	ret

000002e2 <adc_setchannel>:
/*
 * set an adc channel
 */
void adc_setchannel(uint8_t channel)
{
	ADCSRA &= ~(1 << ADEN);
     2e2:	37 98       	cbi	0x06, 7	; 6
	ADMUX = (ADMUX & 0xf8) | (channel & 0x07); //set channel
     2e4:	97 b1       	in	r25, 0x07	; 7
     2e6:	98 7f       	andi	r25, 0xF8	; 248
     2e8:	87 70       	andi	r24, 0x07	; 7
     2ea:	89 2b       	or	r24, r25
     2ec:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN);
     2ee:	37 9a       	sbi	0x06, 7	; 6
     2f0:	08 95       	ret

000002f2 <adc_readsel>:
/*
 * read from selected adc channel
 */
uint16_t adc_readsel(void)
{
	ADCSRA |= (1 << ADSC); // Start conversion
     2f2:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & _BV(ADSC)); 
     2f4:	36 99       	sbic	0x06, 6	; 6
     2f6:	fe cf       	rjmp	.-4      	; 0x2f4 <adc_readsel+0x2>
	//while( !(ADCSRA & (1<<ADIF)) ); // Wait for conversion to complete
	uint16_t adc = ADC;
     2f8:	84 b1       	in	r24, 0x04	; 4
     2fa:	95 b1       	in	r25, 0x05	; 5
	//ADCSRA |= (1 << ADIF); // Clear ADIF by writing one to it
	return(adc);
}
     2fc:	08 95       	ret

000002fe <adc_read>:
/*
 * read from adc channel
 */
uint16_t adc_read(uint8_t channel)
{
	adc_setchannel(channel);
     2fe:	0e 94 71 01 	call	0x2e2	; 0x2e2 <adc_setchannel>
	return adc_readsel();
     302:	0e 94 79 01 	call	0x2f2	; 0x2f2 <adc_readsel>
}
     306:	08 95       	ret

00000308 <clear_msg>:
uint16_t atmega_get_data(atmega_data_read_t data_type) {
	if (data_type < AT_R_LAST_POSITION) {
		return data_read[data_type];
	}
	return 0;
}
     308:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <byte_received>
     30c:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <byte_received+0x1>
     310:	10 92 ff 00 	sts	0x00FF, r1	; 0x8000ff <byte_received+0x2>
     314:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <byte_received+0x3>
     318:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <cmd>
     31c:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <data_len>
     320:	88 ee       	ldi	r24, 0xE8	; 232
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 21 05 	call	0xa42	; 0xa42 <evTime_off>
     328:	08 95       	ret

0000032a <at_send_data>:
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	16 16       	cp	r1, r22
     334:	17 06       	cpc	r1, r23
     336:	54 f4       	brge	.+20     	; 0x34c <at_send_data+0x22>
     338:	8c 01       	movw	r16, r24
     33a:	ec 01       	movw	r28, r24
     33c:	06 0f       	add	r16, r22
     33e:	17 1f       	adc	r17, r23
     340:	89 91       	ld	r24, Y+
     342:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <uart0_putc>
     346:	c0 17       	cp	r28, r16
     348:	d1 07       	cpc	r29, r17
     34a:	d1 f7       	brne	.-12     	; 0x340 <at_send_data+0x16>
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	1f 91       	pop	r17
     352:	0f 91       	pop	r16
     354:	08 95       	ret

00000356 <at_write_data>:
     356:	e9 ec       	ldi	r30, 0xC9	; 201
     358:	f2 e0       	ldi	r31, 0x02	; 2
     35a:	8e ed       	ldi	r24, 0xDE	; 222
     35c:	80 83       	st	Z, r24
     35e:	86 e0       	ldi	r24, 0x06	; 6
     360:	81 83       	std	Z+1, r24	; 0x01
     362:	a5 ef       	ldi	r26, 0xF5	; 245
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	eb ec       	ldi	r30, 0xCB	; 203
     368:	f2 e0       	ldi	r31, 0x02	; 2
     36a:	21 ed       	ldi	r18, 0xD1	; 209
     36c:	32 e0       	ldi	r19, 0x02	; 2
     36e:	8d 91       	ld	r24, X+
     370:	81 93       	st	Z+, r24
     372:	e2 17       	cp	r30, r18
     374:	f3 07       	cpc	r31, r19
     376:	d9 f7       	brne	.-10     	; 0x36e <at_write_data+0x18>
     378:	68 e0       	ldi	r22, 0x08	; 8
     37a:	70 e0       	ldi	r23, 0x00	; 0
     37c:	89 ec       	ldi	r24, 0xC9	; 201
     37e:	92 e0       	ldi	r25, 0x02	; 2
     380:	0e 94 95 01 	call	0x32a	; 0x32a <at_send_data>
     384:	08 95       	ret

00000386 <at_read_byte>:
		atm_timer = mktime.ms + 5;
		
	}
}

void at_read_byte(uint8_t byte) {
     386:	cf 92       	push	r12
     388:	df 92       	push	r13
     38a:	ef 92       	push	r14
     38c:	ff 92       	push	r15
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
	if (byte_received == 0) {
     392:	40 91 fd 00 	lds	r20, 0x00FD	; 0x8000fd <byte_received>
     396:	50 91 fe 00 	lds	r21, 0x00FE	; 0x8000fe <byte_received+0x1>
     39a:	60 91 ff 00 	lds	r22, 0x00FF	; 0x8000ff <byte_received+0x2>
     39e:	70 91 00 01 	lds	r23, 0x0100	; 0x800100 <byte_received+0x3>
     3a2:	41 15       	cp	r20, r1
     3a4:	51 05       	cpc	r21, r1
     3a6:	61 05       	cpc	r22, r1
     3a8:	71 05       	cpc	r23, r1
     3aa:	b9 f4       	brne	.+46     	; 0x3da <at_read_byte+0x54>
		cmd = byte;
     3ac:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <cmd>
		byte_received++;
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	a0 e0       	ldi	r26, 0x00	; 0
     3b6:	b0 e0       	ldi	r27, 0x00	; 0
     3b8:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <byte_received>
     3bc:	90 93 fe 00 	sts	0x00FE, r25	; 0x8000fe <byte_received+0x1>
     3c0:	a0 93 ff 00 	sts	0x00FF, r26	; 0x8000ff <byte_received+0x2>
     3c4:	b0 93 00 01 	sts	0x0100, r27	; 0x800100 <byte_received+0x3>
		evTime_start(&xTimers, 200);
     3c8:	48 ec       	ldi	r20, 0xC8	; 200
     3ca:	50 e0       	ldi	r21, 0x00	; 0
     3cc:	60 e0       	ldi	r22, 0x00	; 0
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	88 ee       	ldi	r24, 0xE8	; 232
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <evTime_start>
		return;
     3d8:	6a c0       	rjmp	.+212    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
	}

	switch(cmd) {
     3da:	90 91 fc 00 	lds	r25, 0x00FC	; 0x8000fc <cmd>
     3de:	9e 3e       	cpi	r25, 0xEE	; 238
     3e0:	09 f4       	brne	.+2      	; 0x3e4 <at_read_byte+0x5e>
     3e2:	60 c0       	rjmp	.+192    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     3e4:	9e 3f       	cpi	r25, 0xFE	; 254
     3e6:	09 f4       	brne	.+2      	; 0x3ea <at_read_byte+0x64>
     3e8:	58 c0       	rjmp	.+176    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     3ea:	9e 3d       	cpi	r25, 0xDE	; 222
     3ec:	09 f0       	breq	.+2      	; 0x3f0 <at_read_byte+0x6a>
     3ee:	5d c0       	rjmp	.+186    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
		case START_FRAME_WRITE:
		if (byte_received == 1) {
     3f0:	41 30       	cpi	r20, 0x01	; 1
     3f2:	51 05       	cpc	r21, r1
     3f4:	61 05       	cpc	r22, r1
     3f6:	71 05       	cpc	r23, r1
     3f8:	19 f5       	brne	.+70     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			data_len = byte;
     3fa:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <data_len>
			byte_received++;
     3fe:	42 e0       	ldi	r20, 0x02	; 2
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	60 e0       	ldi	r22, 0x00	; 0
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	40 93 fd 00 	sts	0x00FD, r20	; 0x8000fd <byte_received>
     40a:	50 93 fe 00 	sts	0x00FE, r21	; 0x8000fe <byte_received+0x1>
     40e:	60 93 ff 00 	sts	0x00FF, r22	; 0x8000ff <byte_received+0x2>
     412:	70 93 00 01 	sts	0x0100, r23	; 0x800100 <byte_received+0x3>
			if (data_len != sizeof(data_read)) {
     416:	88 30       	cpi	r24, 0x08	; 8
     418:	51 f0       	breq	.+20     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
				clear_msg();
     41a:	0e 94 84 01 	call	0x308	; 0x308 <clear_msg>
				debug_msg("FRAME BAD LEN\n\r");
     41e:	80 e9       	ldi	r24, 0x90	; 144
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	9f 93       	push	r25
     424:	8f 93       	push	r24
     426:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
     42a:	0f 90       	pop	r0
     42c:	0f 90       	pop	r0
			}
			evTime_start(&xTimers, 200);
     42e:	48 ec       	ldi	r20, 0xC8	; 200
     430:	50 e0       	ldi	r21, 0x00	; 0
     432:	60 e0       	ldi	r22, 0x00	; 0
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	88 ee       	ldi	r24, 0xE8	; 232
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <evTime_start>
     43e:	37 c0       	rjmp	.+110    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
		}
		else if (byte_received - 2 < data_len) {
     440:	00 91 fb 00 	lds	r16, 0x00FB	; 0x8000fb <data_len>
     444:	10 e0       	ldi	r17, 0x00	; 0
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	6a 01       	movw	r12, r20
     44c:	7b 01       	movw	r14, r22
     44e:	92 e0       	ldi	r25, 0x02	; 2
     450:	c9 1a       	sub	r12, r25
     452:	d1 08       	sbc	r13, r1
     454:	e1 08       	sbc	r14, r1
     456:	f1 08       	sbc	r15, r1
     458:	c0 16       	cp	r12, r16
     45a:	d1 06       	cpc	r13, r17
     45c:	e2 06       	cpc	r14, r18
     45e:	f3 06       	cpc	r15, r19
     460:	c8 f4       	brcc	.+50     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
			uint8_t *pnt = (uint8_t *)data_read;
			pnt[byte_received - 2] = byte;
     462:	fa 01       	movw	r30, r20
     464:	e5 51       	subi	r30, 0x15	; 21
     466:	ff 4f       	sbci	r31, 0xFF	; 255
     468:	80 83       	st	Z, r24
			byte_received++;
     46a:	4f 5f       	subi	r20, 0xFF	; 255
     46c:	5f 4f       	sbci	r21, 0xFF	; 255
     46e:	6f 4f       	sbci	r22, 0xFF	; 255
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	40 93 fd 00 	sts	0x00FD, r20	; 0x8000fd <byte_received>
     476:	50 93 fe 00 	sts	0x00FE, r21	; 0x8000fe <byte_received+0x1>
     47a:	60 93 ff 00 	sts	0x00FF, r22	; 0x8000ff <byte_received+0x2>
     47e:	70 93 00 01 	sts	0x0100, r23	; 0x800100 <byte_received+0x3>
			if (byte_received - 2 == data_len) {
				/* Verify data */
			}
			evTime_start(&xTimers, 200);
     482:	48 ec       	ldi	r20, 0xC8	; 200
     484:	50 e0       	ldi	r21, 0x00	; 0
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	88 ee       	ldi	r24, 0xE8	; 232
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <evTime_start>
     492:	0d c0       	rjmp	.+26     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
		}
		else {
			/* End receive data or unknown error */
			clear_msg();
     494:	0e 94 84 01 	call	0x308	; 0x308 <clear_msg>
     498:	0a c0       	rjmp	.+20     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
		}
		break;

		case START_FRAME_READ:
		/* SEND BUFF data_write */
		at_write_data();
     49a:	0e 94 ab 01 	call	0x356	; 0x356 <at_write_data>
		clear_msg();
     49e:	0e 94 84 01 	call	0x308	; 0x308 <clear_msg>
		break;
     4a2:	05 c0       	rjmp	.+10     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>

		case START_FRAME_CMD:
		/* Nothing for host */
		clear_msg();
     4a4:	0e 94 84 01 	call	0x308	; 0x308 <clear_msg>
		break;
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>

		default:
		//debug_msg("FRAME BAD START\n\r");
		clear_msg();
     4aa:	0e 94 84 01 	call	0x308	; 0x308 <clear_msg>
	}
}
     4ae:	1f 91       	pop	r17
     4b0:	0f 91       	pop	r16
     4b2:	ff 90       	pop	r15
     4b4:	ef 90       	pop	r14
     4b6:	df 90       	pop	r13
     4b8:	cf 90       	pop	r12
     4ba:	08 95       	ret

000004bc <at_read_data_process>:
	
}

void at_read_data_process(void) {
	static uint32_t atm_timer;
	if (atm_timer < mktime.ms) {
     4bc:	40 91 df 03 	lds	r20, 0x03DF	; 0x8003df <mktime+0x2>
     4c0:	50 91 e0 03 	lds	r21, 0x03E0	; 0x8003e0 <mktime+0x3>
     4c4:	60 91 e1 03 	lds	r22, 0x03E1	; 0x8003e1 <mktime+0x4>
     4c8:	70 91 e2 03 	lds	r23, 0x03E2	; 0x8003e2 <mktime+0x5>
     4cc:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <atm_timer.1834>
     4d0:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <atm_timer.1834+0x1>
     4d4:	a0 91 e6 00 	lds	r26, 0x00E6	; 0x8000e6 <atm_timer.1834+0x2>
     4d8:	b0 91 e7 00 	lds	r27, 0x00E7	; 0x8000e7 <atm_timer.1834+0x3>
     4dc:	84 17       	cp	r24, r20
     4de:	95 07       	cpc	r25, r21
     4e0:	a6 07       	cpc	r26, r22
     4e2:	b7 07       	cpc	r27, r23
     4e4:	38 f5       	brcc	.+78     	; 0x534 <at_read_data_process+0x78>
		
		uint8_t byte, error_val;
		uint16_t data = uart_getc();
     4e6:	0e 94 d2 05 	call	0xba4	; 0xba4 <uart0_getc>
		if (error_val == UART_NO_DATA) {
			atm_timer = mktime.ms + 50;
			return;
		}
		
		at_read_byte(byte);
     4ea:	0e 94 c3 01 	call	0x386	; 0x386 <at_read_byte>
		
		if (evTime_check(&xTimers)) {
     4ee:	88 ee       	ldi	r24, 0xE8	; 232
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 01 05 	call	0xa02	; 0xa02 <evTime_check>
     4f6:	89 2b       	or	r24, r25
     4f8:	51 f0       	breq	.+20     	; 0x50e <at_read_data_process+0x52>
}

static void vTimerCallback( evTime *xTimer )
{
	(void)xTimer;
	clear_msg();
     4fa:	0e 94 84 01 	call	0x308	; 0x308 <clear_msg>
	debug_msg("vTimerCallback/n/r");
     4fe:	80 ea       	ldi	r24, 0xA0	; 160
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	9f 93       	push	r25
     504:	8f 93       	push	r24
     506:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
		at_read_byte(byte);
		
		if (evTime_check(&xTimers)) {
			vTimerCallback(&xTimers);
		}
		atm_timer = mktime.ms + 5;
     50e:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <mktime+0x2>
     512:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <mktime+0x3>
     516:	a0 91 e1 03 	lds	r26, 0x03E1	; 0x8003e1 <mktime+0x4>
     51a:	b0 91 e2 03 	lds	r27, 0x03E2	; 0x8003e2 <mktime+0x5>
     51e:	05 96       	adiw	r24, 0x05	; 5
     520:	a1 1d       	adc	r26, r1
     522:	b1 1d       	adc	r27, r1
     524:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <atm_timer.1834>
     528:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <atm_timer.1834+0x1>
     52c:	a0 93 e6 00 	sts	0x00E6, r26	; 0x8000e6 <atm_timer.1834+0x2>
     530:	b0 93 e7 00 	sts	0x00E7, r27	; 0x8000e7 <atm_timer.1834+0x3>
     534:	08 95       	ret

00000536 <atm_com_process>:
	}
}

void atm_com_process(void) {
	static uint32_t atm_timer;
	if (atm_timer < mktime.ms)
     536:	40 91 df 03 	lds	r20, 0x03DF	; 0x8003df <mktime+0x2>
     53a:	50 91 e0 03 	lds	r21, 0x03E0	; 0x8003e0 <mktime+0x3>
     53e:	60 91 e1 03 	lds	r22, 0x03E1	; 0x8003e1 <mktime+0x4>
     542:	70 91 e2 03 	lds	r23, 0x03E2	; 0x8003e2 <mktime+0x5>
     546:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <atm_timer.1850>
     54a:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <atm_timer.1850+0x1>
     54e:	a0 91 e2 00 	lds	r26, 0x00E2	; 0x8000e2 <atm_timer.1850+0x2>
     552:	b0 91 e3 00 	lds	r27, 0x00E3	; 0x8000e3 <atm_timer.1850+0x3>
     556:	84 17       	cp	r24, r20
     558:	95 07       	cpc	r25, r21
     55a:	a6 07       	cpc	r26, r22
     55c:	b7 07       	cpc	r27, r23
     55e:	20 f5       	brcc	.+72     	; 0x5a8 <atm_com_process+0x72>
	{
		/* Do poprawy */
		data_write[AT_W_MEAS_ACCUM] = 123;//(uint16_t)accum_get_voltage();
     560:	e5 ef       	ldi	r30, 0xF5	; 245
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	8b e7       	ldi	r24, 0x7B	; 123
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	91 83       	std	Z+1, r25	; 0x01
     56a:	80 83       	st	Z, r24
		data_write[AT_W_MEAS_MOTOR] = 321;//(uint16_t)measure_get_current(MEAS_MOTOR, MOTOR_RESISTOR);
     56c:	81 e4       	ldi	r24, 0x41	; 65
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	93 83       	std	Z+3, r25	; 0x03
     572:	82 83       	std	Z+2, r24	; 0x02
		data_write[AT_W_MEAS_SERVO] = 4095;//(uint16_t)measure_get_filtered_value(MEAS_SERVO);
     574:	8f ef       	ldi	r24, 0xFF	; 255
     576:	9f e0       	ldi	r25, 0x0F	; 15
     578:	95 83       	std	Z+5, r25	; 0x05
     57a:	84 83       	std	Z+4, r24	; 0x04
		at_write_data();
     57c:	0e 94 ab 01 	call	0x356	; 0x356 <at_write_data>
		atm_timer = mktime.ms + 200;
     580:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <mktime+0x2>
     584:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <mktime+0x3>
     588:	a0 91 e1 03 	lds	r26, 0x03E1	; 0x8003e1 <mktime+0x4>
     58c:	b0 91 e2 03 	lds	r27, 0x03E2	; 0x8003e2 <mktime+0x5>
     590:	88 53       	subi	r24, 0x38	; 56
     592:	9f 4f       	sbci	r25, 0xFF	; 255
     594:	af 4f       	sbci	r26, 0xFF	; 255
     596:	bf 4f       	sbci	r27, 0xFF	; 255
     598:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <atm_timer.1850>
     59c:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <atm_timer.1850+0x1>
     5a0:	a0 93 e2 00 	sts	0x00E2, r26	; 0x8000e2 <atm_timer.1850+0x2>
     5a4:	b0 93 e3 00 	sts	0x00E3, r27	; 0x8000e3 <atm_timer.1850+0x3>
     5a8:	08 95       	ret

000005aa <at_communication_init>:
	}
}


void at_communication_init(void) {
	evTime_init(&xTimers);
     5aa:	88 ee       	ldi	r24, 0xE8	; 232
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <evTime_init>
     5b2:	08 95       	ret

000005b4 <dcmotorpwm_init>:
	else 
	{
		//debug_msg("dcmotor canot start\n");
		return 0;
	}
}
     5b4:	83 eb       	ldi	r24, 0xB3	; 179
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	9f 93       	push	r25
     5ba:	8f 93       	push	r24
     5bc:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
     5c0:	8d ec       	ldi	r24, 0xCD	; 205
     5c2:	93 e0       	ldi	r25, 0x03	; 3
     5c4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <evTime_init>
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <motorD>
     5ce:	94 98       	cbi	0x12, 4	; 18
     5d0:	15 bc       	out	0x25, r1	; 37
     5d2:	8f 9a       	sbi	0x11, 7	; 17
     5d4:	97 9a       	sbi	0x12, 7	; 18
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	08 95       	ret

000005dc <dcmotor_process>:

void dcmotor_process(uint16_t value)
{
     5dc:	cf 93       	push	r28
     5de:	c8 2f       	mov	r28, r24
	static evTime dcmotor_timer;
	if (evTime_process_period(&dcmotor_timer, 150))
     5e0:	46 e9       	ldi	r20, 0x96	; 150
     5e2:	50 e0       	ldi	r21, 0x00	; 0
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	0e 94 2b 05 	call	0xa56	; 0xa56 <evTime_process_period>
     5f0:	89 2b       	or	r24, r25
     5f2:	61 f0       	breq	.+24     	; 0x60c <dcmotor_process+0x30>
	{
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
     5f4:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <motorD>
     5f8:	82 30       	cpi	r24, 0x02	; 2
     5fa:	19 f0       	breq	.+6      	; 0x602 <dcmotor_process+0x26>
     5fc:	84 30       	cpi	r24, 0x04	; 4
     5fe:	19 f0       	breq	.+6      	; 0x606 <dcmotor_process+0x2a>
     600:	05 c0       	rjmp	.+10     	; 0x60c <dcmotor_process+0x30>
		{
			case MOTOR_ON:
			OCR2 = value;
     602:	c3 bd       	out	0x23, r28	; 35
			break;
     604:	03 c0       	rjmp	.+6      	; 0x60c <dcmotor_process+0x30>

			case MOTOR_OFF:
			break;

			case MOTOR_AXELERATE:
			motorD.state = MOTOR_ON; //!!
     606:	82 e0       	ldi	r24, 0x02	; 2
     608:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <motorD>
		
	}
	#if !TEST_APP
	
	#endif
}
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <filtered_value>:
static uint16_t s_o_t_adc;


static uint16_t filtered_value(uint16_t *tab, uint8_t size)
{
	uint16_t ret_val = *tab;
     610:	fc 01       	movw	r30, r24
     612:	20 81       	ld	r18, Z
     614:	31 81       	ldd	r19, Z+1	; 0x01
	for (uint8_t i = 1; i<size; i++)
     616:	62 30       	cpi	r22, 0x02	; 2
     618:	58 f0       	brcs	.+22     	; 0x630 <filtered_value+0x20>
     61a:	32 96       	adiw	r30, 0x02	; 2
     61c:	91 e0       	ldi	r25, 0x01	; 1
	{
		ret_val = (ret_val + tab[i])/2;
     61e:	41 91       	ld	r20, Z+
     620:	51 91       	ld	r21, Z+
     622:	24 0f       	add	r18, r20
     624:	35 1f       	adc	r19, r21
     626:	36 95       	lsr	r19
     628:	27 95       	ror	r18


static uint16_t filtered_value(uint16_t *tab, uint8_t size)
{
	uint16_t ret_val = *tab;
	for (uint8_t i = 1; i<size; i++)
     62a:	9f 5f       	subi	r25, 0xFF	; 255
     62c:	69 13       	cpse	r22, r25
     62e:	f7 cf       	rjmp	.-18     	; 0x61e <filtered_value+0xe>
	{
		ret_val = (ret_val + tab[i])/2;
	}
	return ret_val;
}
     630:	c9 01       	movw	r24, r18
     632:	08 95       	ret

00000634 <init_measure>:

void init_measure(void)
{
     634:	ea e4       	ldi	r30, 0x4A	; 74
     636:	f1 e0       	ldi	r31, 0x01	; 1
     638:	22 e7       	ldi	r18, 0x72	; 114
     63a:	31 e0       	ldi	r19, 0x01	; 1
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
     63c:	81 ef       	ldi	r24, 0xF1	; 241
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	81 93       	st	Z+, r24
     642:	91 93       	st	Z+, r25
	return ret_val;
}

void init_measure(void)
{
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
     644:	2e 17       	cp	r18, r30
     646:	3f 07       	cpc	r19, r31
     648:	d9 f7       	brne	.-10     	; 0x640 <init_measure+0xc>
     64a:	e9 e2       	ldi	r30, 0x29	; 41
     64c:	f1 e0       	ldi	r31, 0x01	; 1
     64e:	87 e4       	ldi	r24, 0x47	; 71
     650:	91 e0       	ldi	r25, 0x01	; 1
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
	{
		motor_f_table[i] = 0;
     652:	11 92       	st	Z+, r1
     654:	11 92       	st	Z+, r1
{
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
     656:	8e 17       	cp	r24, r30
     658:	9f 07       	cpc	r25, r31
     65a:	d9 f7       	brne	.-10     	; 0x652 <init_measure+0x1e>
     65c:	e1 e1       	ldi	r30, 0x11	; 17
     65e:	f1 e0       	ldi	r31, 0x01	; 1
     660:	85 e2       	ldi	r24, 0x25	; 37
     662:	91 e0       	ldi	r25, 0x01	; 1
	{
		motor_f_table[i] = 0;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_S_SIZE; i++)
	{
		s_o_t_f_table[i] = 0;
     664:	11 92       	st	Z+, r1
     666:	11 92       	st	Z+, r1
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
	{
		motor_f_table[i] = 0;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_S_SIZE; i++)
     668:	8e 17       	cp	r24, r30
     66a:	9f 07       	cpc	r25, r31
     66c:	d9 f7       	brne	.-10     	; 0x664 <init_measure+0x30>
	{
		s_o_t_f_table[i] = 0;
	}
}
     66e:	08 95       	ret

00000670 <measure_process>:
static timer_t measure_timer;
static uint32_t debug_msg_counter;
void measure_process(void)
{
     670:	cf 92       	push	r12
     672:	df 92       	push	r13
     674:	ef 92       	push	r14
     676:	ff 92       	push	r15
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
	if (measure_timer < mktime.ms)
     67c:	40 91 df 03 	lds	r20, 0x03DF	; 0x8003df <mktime+0x2>
     680:	50 91 e0 03 	lds	r21, 0x03E0	; 0x8003e0 <mktime+0x3>
     684:	60 91 e1 03 	lds	r22, 0x03E1	; 0x8003e1 <mktime+0x4>
     688:	70 91 e2 03 	lds	r23, 0x03E2	; 0x8003e2 <mktime+0x5>
     68c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <measure_timer>
     690:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <measure_timer+0x1>
     694:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <measure_timer+0x2>
     698:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <measure_timer+0x3>
     69c:	84 17       	cp	r24, r20
     69e:	95 07       	cpc	r25, r21
     6a0:	a6 07       	cpc	r26, r22
     6a2:	b7 07       	cpc	r27, r23
     6a4:	08 f0       	brcs	.+2      	; 0x6a8 <measure_process+0x38>
     6a6:	b8 c0       	rjmp	.+368    	; 0x818 <measure_process+0x1a8>
	{
		measure_timer = mktime.ms + 20;
     6a8:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <mktime+0x2>
     6ac:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <mktime+0x3>
     6b0:	a0 91 e1 03 	lds	r26, 0x03E1	; 0x8003e1 <mktime+0x4>
     6b4:	b0 91 e2 03 	lds	r27, 0x03E2	; 0x8003e2 <mktime+0x5>
     6b8:	44 96       	adiw	r24, 0x14	; 20
     6ba:	a1 1d       	adc	r26, r1
     6bc:	b1 1d       	adc	r27, r1
     6be:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <measure_timer>
     6c2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <measure_timer+0x1>
     6c6:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <measure_timer+0x2>
     6ca:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <measure_timer+0x3>
		accum_adc = adc_read(ACCUMULATOR_ADC_CH); 
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <adc_read>
     6d4:	ec 01       	movw	r28, r24
		#if CONFIG_DEVICE_SOLARKA
		#endif
		#if CONFIG_DEVICE_SIEWNIK
		accum_adc += motor_filter_value*0.27; //motor_filter_value*0.0075*1025/5/5.7
     6d6:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <motor_filter_value>
     6da:	70 91 48 01 	lds	r23, 0x0148	; 0x800148 <motor_filter_value+0x1>
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 b2 06 	call	0xd64	; 0xd64 <__floatunsisf>
     6e6:	21 e7       	ldi	r18, 0x71	; 113
     6e8:	3d e3       	ldi	r19, 0x3D	; 61
     6ea:	4a e8       	ldi	r20, 0x8A	; 138
     6ec:	5e e3       	ldi	r21, 0x3E	; 62
     6ee:	0e 94 40 07 	call	0xe80	; 0xe80 <__mulsf3>
     6f2:	6b 01       	movw	r12, r22
     6f4:	7c 01       	movw	r14, r24
     6f6:	be 01       	movw	r22, r28
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	0e 94 b2 06 	call	0xd64	; 0xd64 <__floatunsisf>
     700:	9b 01       	movw	r18, r22
     702:	ac 01       	movw	r20, r24
     704:	c7 01       	movw	r24, r14
     706:	b6 01       	movw	r22, r12
     708:	0e 94 17 06 	call	0xc2e	; 0xc2e <__addsf3>
     70c:	0e 94 83 06 	call	0xd06	; 0xd06 <__fixunssfsi>
     710:	70 93 75 01 	sts	0x0175, r23	; 0x800175 <accum_adc+0x1>
     714:	60 93 74 01 	sts	0x0174, r22	; 0x800174 <accum_adc>
		#endif
		accumulator_tab[iteration_adc_accum_table] = accum_adc;
     718:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <iteration_adc_accum_table>
     71c:	e2 2f       	mov	r30, r18
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	ee 0f       	add	r30, r30
     722:	ff 1f       	adc	r31, r31
     724:	e6 5b       	subi	r30, 0xB6	; 182
     726:	fe 4f       	sbci	r31, 0xFE	; 254
     728:	71 83       	std	Z+1, r23	; 0x01
     72a:	60 83       	st	Z, r22
		
		iteration_adc_accum_table++;
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	82 0f       	add	r24, r18
     730:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <iteration_adc_accum_table>
		motor_adc = adc_read(MOTOR_ADC_CH);
     734:	82 e0       	ldi	r24, 0x02	; 2
     736:	0e 94 7f 01 	call	0x2fe	; 0x2fe <adc_read>
		if (motor_adc > 31) motor_adc = motor_adc - 31;
     73a:	80 32       	cpi	r24, 0x20	; 32
     73c:	91 05       	cpc	r25, r1
     73e:	30 f0       	brcs	.+12     	; 0x74c <measure_process+0xdc>
     740:	4f 97       	sbiw	r24, 0x1f	; 31
     742:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <motor_adc+0x1>
     746:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <motor_adc>
     74a:	04 c0       	rjmp	.+8      	; 0x754 <measure_process+0xe4>
		else motor_adc = 0;
     74c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <motor_adc+0x1>
     750:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <motor_adc>
		motor_f_table[iteration_adc_motor_table] = motor_adc;
     754:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <iteration_adc_motor_table>
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	ee 0f       	add	r30, r30
     75c:	ff 1f       	adc	r31, r31
     75e:	e7 5d       	subi	r30, 0xD7	; 215
     760:	fe 4f       	sbci	r31, 0xFE	; 254
     762:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <motor_adc>
     766:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <motor_adc+0x1>
     76a:	91 83       	std	Z+1, r25	; 0x01
     76c:	80 83       	st	Z, r24
		///////////////////////////////////////////////////////////
		////////// TODO isset_timer
		s_o_t_adc = adc_read(SERVO_ADC_CH);
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	0e 94 7f 01 	call	0x2fe	; 0x2fe <adc_read>
     774:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <s_o_t_adc+0x1>
     778:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <s_o_t_adc>

		s_o_t_f_table[s_o_t_iteration_adc_table] = s_o_t_adc;
     77c:	c0 91 10 01 	lds	r28, 0x0110	; 0x800110 <s_o_t_iteration_adc_table>
     780:	ec 2f       	mov	r30, r28
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	ee 0f       	add	r30, r30
     786:	ff 1f       	adc	r31, r31
     788:	ef 5e       	subi	r30, 0xEF	; 239
     78a:	fe 4f       	sbci	r31, 0xFE	; 254
     78c:	91 83       	std	Z+1, r25	; 0x01
     78e:	80 83       	st	Z, r24
		iteration_adc_motor_table++;
     790:	d0 91 49 01 	lds	r29, 0x0149	; 0x800149 <iteration_adc_motor_table>
     794:	df 5f       	subi	r29, 0xFF	; 255
     796:	d0 93 49 01 	sts	0x0149, r29	; 0x800149 <iteration_adc_motor_table>
		s_o_t_iteration_adc_table++;
     79a:	cf 5f       	subi	r28, 0xFF	; 255
     79c:	c0 93 10 01 	sts	0x0110, r28	; 0x800110 <s_o_t_iteration_adc_table>
		filtered_accum_adc_val = filtered_value(accumulator_tab, ACCUMULATOR_SIZE_TAB);
     7a0:	64 e1       	ldi	r22, 0x14	; 20
     7a2:	8a e4       	ldi	r24, 0x4A	; 74
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	0e 94 08 03 	call	0x610	; 0x610 <filtered_value>
     7aa:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <filtered_accum_adc_val+0x1>
     7ae:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <filtered_accum_adc_val>
		motor_filter_value = filtered_value(motor_f_table, FILTER_TABLE_SIZE);
     7b2:	6f e0       	ldi	r22, 0x0F	; 15
     7b4:	89 e2       	ldi	r24, 0x29	; 41
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	0e 94 08 03 	call	0x610	; 0x610 <filtered_value>
     7bc:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <motor_filter_value+0x1>
     7c0:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <motor_filter_value>
		s_o_t_filter_value = filtered_value(s_o_t_f_table, FILTER_TABLE_S_SIZE);
     7c4:	6a e0       	ldi	r22, 0x0A	; 10
     7c6:	81 e1       	ldi	r24, 0x11	; 17
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	0e 94 08 03 	call	0x610	; 0x610 <filtered_value>
     7ce:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <s_o_t_filter_value+0x1>
     7d2:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <s_o_t_filter_value>
		debug_msg_counter++;
     7d6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <debug_msg_counter>
     7da:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <debug_msg_counter+0x1>
     7de:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <debug_msg_counter+0x2>
     7e2:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <debug_msg_counter+0x3>
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	a1 1d       	adc	r26, r1
     7ea:	b1 1d       	adc	r27, r1
     7ec:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <debug_msg_counter>
     7f0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <debug_msg_counter+0x1>
     7f4:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <debug_msg_counter+0x2>
     7f8:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <debug_msg_counter+0x3>
		
		if (iteration_adc_accum_table == ACCUMULATOR_SIZE_TAB) iteration_adc_accum_table = 0;
     7fc:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <iteration_adc_accum_table>
     800:	84 31       	cpi	r24, 0x14	; 20
     802:	11 f4       	brne	.+4      	; 0x808 <measure_process+0x198>
     804:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <iteration_adc_accum_table>
		if (s_o_t_iteration_adc_table == FILTER_TABLE_S_SIZE) s_o_t_iteration_adc_table = 0;
     808:	ca 30       	cpi	r28, 0x0A	; 10
     80a:	11 f4       	brne	.+4      	; 0x810 <measure_process+0x1a0>
     80c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <s_o_t_iteration_adc_table>
		if (iteration_adc_motor_table == FILTER_TABLE_SIZE) iteration_adc_motor_table = 0;
     810:	df 30       	cpi	r29, 0x0F	; 15
     812:	11 f4       	brne	.+4      	; 0x818 <measure_process+0x1a8>
     814:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <iteration_adc_motor_table>
	}
}
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	df 90       	pop	r13
     822:	cf 90       	pop	r12
     824:	08 95       	ret

00000826 <measure_get_filtered_value>:

uint16_t measure_get_filtered_value(_type_measure type)
{
    switch(type)
     826:	83 30       	cpi	r24, 0x03	; 3
     828:	18 f4       	brcc	.+6      	; 0x830 <measure_get_filtered_value+0xa>
     82a:	81 30       	cpi	r24, 0x01	; 1
     82c:	40 f0       	brcs	.+16     	; 0x83e <measure_get_filtered_value+0x18>
     82e:	0c c0       	rjmp	.+24     	; 0x848 <measure_get_filtered_value+0x22>
     830:	83 30       	cpi	r24, 0x03	; 3
     832:	79 f4       	brne	.+30     	; 0x852 <measure_get_filtered_value+0x2c>
    {
        case MEAS_ACCUM:
        return filtered_accum_adc_val;
     834:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <filtered_accum_adc_val>
     838:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <filtered_accum_adc_val+0x1>
     83c:	08 95       	ret
        break;

        case MEAS_MOTOR:
        return motor_filter_value;
     83e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <motor_filter_value>
     842:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <motor_filter_value+0x1>
     846:	08 95       	ret
        break;

        case MEAS_SERVO:
		case MEAS_TEMPERATURE:
        return s_o_t_filter_value;
     848:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <s_o_t_filter_value>
     84c:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <s_o_t_filter_value+0x1>
     850:	08 95       	ret
        break;
    }
	return 0;
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
}
     856:	08 95       	ret

00000858 <servo_init>:
	//debug_msg("REG: close %d, open %d, pwm %d\n", min, max, pwm);
	set_pwm(value);
}

void servo_init(uint8_t prescaler)
{
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
	(void) prescaler;
	#if !TEST_APP
	ICR1 = 19999;
     85c:	2f e1       	ldi	r18, 0x1F	; 31
     85e:	3e e4       	ldi	r19, 0x4E	; 78
     860:	37 bd       	out	0x27, r19	; 39
     862:	26 bd       	out	0x26, r18	; 38
	DDRD |= (1 << 4) | (1<<5); //?????????? TO DO
     864:	81 b3       	in	r24, 0x11	; 17
     866:	80 63       	ori	r24, 0x30	; 48
     868:	81 bb       	out	0x11, r24	; 17
	// set TOP to 16bit
	OCR1B = 0x0;
     86a:	19 bc       	out	0x29, r1	; 41
     86c:	18 bc       	out	0x28, r1	; 40
	OCR1A = 0x0;
     86e:	1b bc       	out	0x2b, r1	; 43
     870:	1a bc       	out	0x2a, r1	; 42
	TCCR1A |= (1 << WGM11);
     872:	8f b5       	in	r24, 0x2f	; 47
     874:	82 60       	ori	r24, 0x02	; 2
     876:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
     878:	8e b5       	in	r24, 0x2e	; 46
     87a:	88 61       	ori	r24, 0x18	; 24
     87c:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |=  (1<<COM1A1); //(1 << COM1B1) |
     87e:	8f b5       	in	r24, 0x2f	; 47
     880:	80 68       	ori	r24, 0x80	; 128
     882:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS11);
     884:	8e b5       	in	r24, 0x2e	; 46
     886:	82 60       	ori	r24, 0x02	; 2
     888:	8e bd       	out	0x2e, r24	; 46
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
     88a:	3b bd       	out	0x2b, r19	; 43
     88c:	2a bd       	out	0x2a, r18	; 42
	TCCR1A |= (1 << WGM11);
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
	TCCR1A |=  (1<<COM1A1); //(1 << COM1B1) |
	TCCR1B |= (1<<CS11);
	set_pwm(19999);
	LED_SERVO_OFF;
     88e:	96 98       	cbi	0x12, 6	; 18
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
     890:	1b bc       	out	0x2b, r1	; 43
     892:	1a bc       	out	0x2a, r1	; 42
	TCCR1B |= (1<<CS11);
	set_pwm(19999);
	LED_SERVO_OFF;
	#endif
	servo_set_pwm_val((uint16_t)0);
	servoD.state = SERVO_CLOSE;
     894:	c3 ed       	ldi	r28, 0xD3	; 211
     896:	d3 e0       	ldi	r29, 0x03	; 3
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	88 83       	st	Y, r24
	servoD.value = 0;
     89c:	1b 82       	std	Y+3, r1	; 0x03
	evTime_init(&servoD.timeout);
     89e:	87 ed       	ldi	r24, 0xD7	; 215
     8a0:	93 e0       	ldi	r25, 0x03	; 3
     8a2:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <evTime_init>
	servoD.try_cnt = 0;
     8a6:	19 86       	std	Y+9, r1	; 0x09
	try_count = 0;
	debug_msg("SERVO: init\n");
     8a8:	8f ec       	ldi	r24, 0xCF	; 207
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	9f 93       	push	r25
     8ae:	8f 93       	push	r24
     8b0:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
}
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <servo_process>:

void servo_process(uint16_t value)
{
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	ec 01       	movw	r28, r24
	static evTime servo_timer;
	if (evTime_process_period(&servo_timer, 75))
     8c4:	4b e4       	ldi	r20, 0x4B	; 75
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	87 e7       	ldi	r24, 0x77	; 119
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	0e 94 2b 05 	call	0xa56	; 0xa56 <evTime_process_period>
     8d4:	89 2b       	or	r24, r25
     8d6:	11 f0       	breq	.+4      	; 0x8dc <servo_process+0x1e>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
     8d8:	db bd       	out	0x2b, r29	; 43
     8da:	ca bd       	out	0x2a, r28	; 42
	static evTime servo_timer;
	if (evTime_process_period(&servo_timer, 75))
	{
		servo_set_pwm_val((uint16_t)value);
	}
}
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <init_system>:
extern uint8_t servo_vibro_value;

extern uint8_t motor_value;

void init_system(void)
{
     8e2:	08 95       	ret

000008e4 <on_system>:

}

void on_system(void)
{
	dcmotorpwm_init();	
     8e4:	0e 94 da 02 	call	0x5b4	; 0x5b4 <dcmotorpwm_init>
	servo_init(0);
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	0e 94 2c 04 	call	0x858	; 0x858 <servo_init>
	init_measure();
     8ee:	0e 94 1a 03 	call	0x634	; 0x634 <init_measure>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <system_events+0x1>
     8fa:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <system_events>
     8fe:	08 95       	ret

00000900 <__vector_10>:
	int time_to_end;
	if (evt->timer > mktime.ms)
		time_to_end = evt->timer - mktime.ms;
	else time_to_end = 0;
	return time_to_end;
}
     900:	1f 92       	push	r1
     902:	0f 92       	push	r0
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	0f 92       	push	r0
     908:	11 24       	eor	r1, r1
     90a:	2f 93       	push	r18
     90c:	8f 93       	push	r24
     90e:	9f 93       	push	r25
     910:	af 93       	push	r26
     912:	bf 93       	push	r27
     914:	ef 93       	push	r30
     916:	ff 93       	push	r31
     918:	ed ed       	ldi	r30, 0xDD	; 221
     91a:	f3 e0       	ldi	r31, 0x03	; 3
     91c:	80 81       	ld	r24, Z
     91e:	91 81       	ldd	r25, Z+1	; 0x01
     920:	c2 96       	adiw	r24, 0x32	; 50
     922:	91 83       	std	Z+1, r25	; 0x01
     924:	80 83       	st	Z, r24
     926:	80 81       	ld	r24, Z
     928:	91 81       	ldd	r25, Z+1	; 0x01
     92a:	88 3e       	cpi	r24, 0xE8	; 232
     92c:	93 40       	sbci	r25, 0x03	; 3
     92e:	88 f0       	brcs	.+34     	; 0x952 <__vector_10+0x52>
     930:	82 81       	ldd	r24, Z+2	; 0x02
     932:	93 81       	ldd	r25, Z+3	; 0x03
     934:	a4 81       	ldd	r26, Z+4	; 0x04
     936:	b5 81       	ldd	r27, Z+5	; 0x05
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	a1 1d       	adc	r26, r1
     93c:	b1 1d       	adc	r27, r1
     93e:	82 83       	std	Z+2, r24	; 0x02
     940:	93 83       	std	Z+3, r25	; 0x03
     942:	a4 83       	std	Z+4, r26	; 0x04
     944:	b5 83       	std	Z+5, r27	; 0x05
     946:	80 81       	ld	r24, Z
     948:	91 81       	ldd	r25, Z+1	; 0x01
     94a:	88 5e       	subi	r24, 0xE8	; 232
     94c:	93 40       	sbci	r25, 0x03	; 3
     94e:	91 83       	std	Z+1, r25	; 0x01
     950:	80 83       	st	Z, r24
     952:	ff 91       	pop	r31
     954:	ef 91       	pop	r30
     956:	bf 91       	pop	r27
     958:	af 91       	pop	r26
     95a:	9f 91       	pop	r25
     95c:	8f 91       	pop	r24
     95e:	2f 91       	pop	r18
     960:	0f 90       	pop	r0
     962:	0f be       	out	0x3f, r0	; 63
     964:	0f 90       	pop	r0
     966:	1f 90       	pop	r1
     968:	18 95       	reti

0000096a <timer0_init>:
     96a:	93 b7       	in	r25, 0x33	; 51
     96c:	98 60       	ori	r25, 0x08	; 8
     96e:	93 bf       	out	0x33, r25	; 51
     970:	6c bf       	out	0x3c, r22	; 60
     972:	82 30       	cpi	r24, 0x02	; 2
     974:	99 f0       	breq	.+38     	; 0x99c <timer0_init+0x32>
     976:	28 f4       	brcc	.+10     	; 0x982 <timer0_init+0x18>
     978:	88 23       	and	r24, r24
     97a:	41 f0       	breq	.+16     	; 0x98c <timer0_init+0x22>
     97c:	81 30       	cpi	r24, 0x01	; 1
     97e:	51 f0       	breq	.+20     	; 0x994 <timer0_init+0x2a>
     980:	19 c0       	rjmp	.+50     	; 0x9b4 <timer0_init+0x4a>
     982:	83 30       	cpi	r24, 0x03	; 3
     984:	79 f0       	breq	.+30     	; 0x9a4 <timer0_init+0x3a>
     986:	84 30       	cpi	r24, 0x04	; 4
     988:	89 f0       	breq	.+34     	; 0x9ac <timer0_init+0x42>
     98a:	14 c0       	rjmp	.+40     	; 0x9b4 <timer0_init+0x4a>
     98c:	83 b7       	in	r24, 0x33	; 51
     98e:	81 60       	ori	r24, 0x01	; 1
     990:	83 bf       	out	0x33, r24	; 51
     992:	13 c0       	rjmp	.+38     	; 0x9ba <timer0_init+0x50>
     994:	83 b7       	in	r24, 0x33	; 51
     996:	82 60       	ori	r24, 0x02	; 2
     998:	83 bf       	out	0x33, r24	; 51
     99a:	0f c0       	rjmp	.+30     	; 0x9ba <timer0_init+0x50>
     99c:	83 b7       	in	r24, 0x33	; 51
     99e:	83 60       	ori	r24, 0x03	; 3
     9a0:	83 bf       	out	0x33, r24	; 51
     9a2:	0b c0       	rjmp	.+22     	; 0x9ba <timer0_init+0x50>
     9a4:	83 b7       	in	r24, 0x33	; 51
     9a6:	84 60       	ori	r24, 0x04	; 4
     9a8:	83 bf       	out	0x33, r24	; 51
     9aa:	07 c0       	rjmp	.+14     	; 0x9ba <timer0_init+0x50>
     9ac:	83 b7       	in	r24, 0x33	; 51
     9ae:	85 60       	ori	r24, 0x05	; 5
     9b0:	83 bf       	out	0x33, r24	; 51
     9b2:	03 c0       	rjmp	.+6      	; 0x9ba <timer0_init+0x50>
     9b4:	83 b7       	in	r24, 0x33	; 51
     9b6:	81 60       	ori	r24, 0x01	; 1
     9b8:	83 bf       	out	0x33, r24	; 51
     9ba:	89 b7       	in	r24, 0x39	; 57
     9bc:	82 60       	ori	r24, 0x02	; 2
     9be:	89 bf       	out	0x39, r24	; 57
     9c0:	08 95       	ret

000009c2 <evTime_init>:
     9c2:	23 e0       	ldi	r18, 0x03	; 3
     9c4:	fc 01       	movw	r30, r24
     9c6:	24 83       	std	Z+4, r18	; 0x04
     9c8:	10 82       	st	Z, r1
     9ca:	11 82       	std	Z+1, r1	; 0x01
     9cc:	12 82       	std	Z+2, r1	; 0x02
     9ce:	13 82       	std	Z+3, r1	; 0x03
     9d0:	08 95       	ret

000009d2 <evTime_start>:
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	21 e0       	ldi	r18, 0x01	; 1
     9d8:	fc 01       	movw	r30, r24
     9da:	24 83       	std	Z+4, r18	; 0x04
     9dc:	00 91 df 03 	lds	r16, 0x03DF	; 0x8003df <mktime+0x2>
     9e0:	10 91 e0 03 	lds	r17, 0x03E0	; 0x8003e0 <mktime+0x3>
     9e4:	20 91 e1 03 	lds	r18, 0x03E1	; 0x8003e1 <mktime+0x4>
     9e8:	30 91 e2 03 	lds	r19, 0x03E2	; 0x8003e2 <mktime+0x5>
     9ec:	40 0f       	add	r20, r16
     9ee:	51 1f       	adc	r21, r17
     9f0:	62 1f       	adc	r22, r18
     9f2:	73 1f       	adc	r23, r19
     9f4:	40 83       	st	Z, r20
     9f6:	51 83       	std	Z+1, r21	; 0x01
     9f8:	62 83       	std	Z+2, r22	; 0x02
     9fa:	73 83       	std	Z+3, r23	; 0x03
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	08 95       	ret

00000a02 <evTime_check>:

int evTime_check(evTime * evt)
{
     a02:	fc 01       	movw	r30, r24
	if (evt->time_state == TIMER_START)
     a04:	84 81       	ldd	r24, Z+4	; 0x04
     a06:	81 30       	cpi	r24, 0x01	; 1
     a08:	b1 f4       	brne	.+44     	; 0xa36 <evTime_check+0x34>
	{
		if (evt->timer < mktime.ms) 
     a0a:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <mktime+0x2>
     a0e:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <mktime+0x3>
     a12:	a0 91 e1 03 	lds	r26, 0x03E1	; 0x8003e1 <mktime+0x4>
     a16:	b0 91 e2 03 	lds	r27, 0x03E2	; 0x8003e2 <mktime+0x5>
     a1a:	40 81       	ld	r20, Z
     a1c:	51 81       	ldd	r21, Z+1	; 0x01
     a1e:	62 81       	ldd	r22, Z+2	; 0x02
     a20:	73 81       	ldd	r23, Z+3	; 0x03
     a22:	48 17       	cp	r20, r24
     a24:	59 07       	cpc	r21, r25
     a26:	6a 07       	cpc	r22, r26
     a28:	7b 07       	cpc	r23, r27
     a2a:	40 f4       	brcc	.+16     	; 0xa3c <evTime_check+0x3a>
		{
			evt->time_state = TIMER_END;
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	84 83       	std	Z+4, r24	; 0x04
			return 1;
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	08 95       	ret
		}
		else return 0;
	}
	else return -1;
     a36:	8f ef       	ldi	r24, 0xFF	; 255
     a38:	9f ef       	ldi	r25, 0xFF	; 255
     a3a:	08 95       	ret
		if (evt->timer < mktime.ms) 
		{
			evt->time_state = TIMER_END;
			return 1;
		}
		else return 0;
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	90 e0       	ldi	r25, 0x00	; 0
	}
	else return -1;
}
     a40:	08 95       	ret

00000a42 <evTime_off>:

int evTime_off(evTime * evt)
{
	return evt->time_state == TIMER_OFF;
     a42:	21 e0       	ldi	r18, 0x01	; 1
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	fc 01       	movw	r30, r24
     a48:	84 81       	ldd	r24, Z+4	; 0x04
     a4a:	83 30       	cpi	r24, 0x03	; 3
     a4c:	11 f0       	breq	.+4      	; 0xa52 <evTime_off+0x10>
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	30 e0       	ldi	r19, 0x00	; 0
}
     a52:	c9 01       	movw	r24, r18
     a54:	08 95       	ret

00000a56 <evTime_process_period>:

int evTime_process_period(evTime * timer, uint32_t period)
{
     a56:	cf 92       	push	r12
     a58:	df 92       	push	r13
     a5a:	ef 92       	push	r14
     a5c:	ff 92       	push	r15
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	ec 01       	movw	r28, r24
     a68:	6a 01       	movw	r12, r20
     a6a:	7b 01       	movw	r14, r22
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
     a6c:	8c 81       	ldd	r24, Y+4	; 0x04
     a6e:	81 11       	cpse	r24, r1
     a70:	06 c0       	rjmp	.+12     	; 0xa7e <evTime_process_period+0x28>
	#endif
}

void evTime_init(evTime * evt)
{
	evt->time_state = TIMER_OFF;
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 83       	std	Y+4, r24	; 0x04
	evt->timer = 0;
     a76:	18 82       	st	Y, r1
     a78:	19 82       	std	Y+1, r1	; 0x01
     a7a:	1a 82       	std	Y+2, r1	; 0x02
     a7c:	1b 82       	std	Y+3, r1	; 0x03

int evTime_process_period(evTime * timer, uint32_t period)
{
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
	ret_val = evTime_check(timer);
     a7e:	ce 01       	movw	r24, r28
     a80:	0e 94 01 05 	call	0xa02	; 0xa02 <evTime_check>
     a84:	8c 01       	movw	r16, r24
	if (ret_val == 1)
     a86:	01 97       	sbiw	r24, 0x01	; 1
     a88:	31 f4       	brne	.+12     	; 0xa96 <evTime_process_period+0x40>
	{
		evTime_start(timer, period);
     a8a:	b7 01       	movw	r22, r14
     a8c:	a6 01       	movw	r20, r12
     a8e:	ce 01       	movw	r24, r28
     a90:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <evTime_start>
		return 1;
     a94:	0d c0       	rjmp	.+26     	; 0xab0 <evTime_process_period+0x5a>
	}
	else if (evTime_off(timer))
     a96:	8c 81       	ldd	r24, Y+4	; 0x04
     a98:	83 30       	cpi	r24, 0x03	; 3
     a9a:	41 f4       	brne	.+16     	; 0xaac <evTime_process_period+0x56>
	{
		evTime_start(timer, period);
     a9c:	b7 01       	movw	r22, r14
     a9e:	a6 01       	movw	r20, r12
     aa0:	ce 01       	movw	r24, r28
     aa2:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <evTime_start>
	}
	return 0;
     aa6:	00 e0       	ldi	r16, 0x00	; 0
     aa8:	10 e0       	ldi	r17, 0x00	; 0
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <evTime_process_period+0x5a>
     aac:	00 e0       	ldi	r16, 0x00	; 0
     aae:	10 e0       	ldi	r17, 0x00	; 0
}
     ab0:	c8 01       	movw	r24, r16
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	df 90       	pop	r13
     ac0:	cf 90       	pop	r12
     ac2:	08 95       	ret

00000ac4 <__vector_13>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
     ac4:	1f 92       	push	r1
     ac6:	0f 92       	push	r0
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	0f 92       	push	r0
     acc:	11 24       	eor	r1, r1
     ace:	2f 93       	push	r18
     ad0:	3f 93       	push	r19
     ad2:	4f 93       	push	r20
     ad4:	5f 93       	push	r21
     ad6:	8f 93       	push	r24
     ad8:	9f 93       	push	r25
     ada:	ef 93       	push	r30
     adc:	ff 93       	push	r31
     ade:	2b b1       	in	r18, 0x0b	; 11
     ae0:	3c b1       	in	r19, 0x0c	; 12
     ae2:	28 71       	andi	r18, 0x18	; 24
     ae4:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <UART_RxHead>
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	8f 77       	andi	r24, 0x7F	; 127
     aee:	99 27       	eor	r25, r25
     af0:	40 91 7d 01 	lds	r20, 0x017D	; 0x80017d <UART_RxTail>
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	84 17       	cp	r24, r20
     af8:	95 07       	cpc	r25, r21
     afa:	39 f0       	breq	.+14     	; 0xb0a <__vector_13+0x46>
     afc:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <UART_RxHead>
     b00:	fc 01       	movw	r30, r24
     b02:	ef 57       	subi	r30, 0x7F	; 127
     b04:	fe 4f       	sbci	r31, 0xFE	; 254
     b06:	30 83       	st	Z, r19
     b08:	01 c0       	rjmp	.+2      	; 0xb0c <__vector_13+0x48>
     b0a:	22 e0       	ldi	r18, 0x02	; 2
     b0c:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <UART_LastRxError>
     b10:	ff 91       	pop	r31
     b12:	ef 91       	pop	r30
     b14:	9f 91       	pop	r25
     b16:	8f 91       	pop	r24
     b18:	5f 91       	pop	r21
     b1a:	4f 91       	pop	r20
     b1c:	3f 91       	pop	r19
     b1e:	2f 91       	pop	r18
     b20:	0f 90       	pop	r0
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	0f 90       	pop	r0
     b26:	1f 90       	pop	r1
     b28:	18 95       	reti

00000b2a <__vector_14>:
     b2a:	1f 92       	push	r1
     b2c:	0f 92       	push	r0
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	0f 92       	push	r0
     b32:	11 24       	eor	r1, r1
     b34:	8f 93       	push	r24
     b36:	9f 93       	push	r25
     b38:	ef 93       	push	r30
     b3a:	ff 93       	push	r31
     b3c:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <UART_TxHead>
     b40:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <UART_TxTail>
     b44:	98 17       	cp	r25, r24
     b46:	71 f0       	breq	.+28     	; 0xb64 <__vector_14+0x3a>
     b48:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <UART_TxTail>
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	8f 77       	andi	r24, 0x7F	; 127
     b52:	99 27       	eor	r25, r25
     b54:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <UART_TxTail>
     b58:	fc 01       	movw	r30, r24
     b5a:	ef 5f       	subi	r30, 0xFF	; 255
     b5c:	fd 4f       	sbci	r31, 0xFD	; 253
     b5e:	80 81       	ld	r24, Z
     b60:	8c b9       	out	0x0c, r24	; 12
     b62:	01 c0       	rjmp	.+2      	; 0xb66 <__vector_14+0x3c>
     b64:	55 98       	cbi	0x0a, 5	; 10
     b66:	ff 91       	pop	r31
     b68:	ef 91       	pop	r30
     b6a:	9f 91       	pop	r25
     b6c:	8f 91       	pop	r24
     b6e:	0f 90       	pop	r0
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	0f 90       	pop	r0
     b74:	1f 90       	pop	r1
     b76:	18 95       	reti

00000b78 <uart0_init>:
     b78:	f8 94       	cli
     b7a:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <UART_TxHead>
     b7e:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <UART_TxTail>
     b82:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <UART_RxHead>
     b86:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <UART_RxTail>
     b8a:	78 94       	sei
     b8c:	99 23       	and	r25, r25
     b8e:	1c f4       	brge	.+6      	; 0xb96 <uart0_init+0x1e>
     b90:	22 e0       	ldi	r18, 0x02	; 2
     b92:	2b b9       	out	0x0b, r18	; 11
     b94:	9f 77       	andi	r25, 0x7F	; 127
     b96:	90 bd       	out	0x20, r25	; 32
     b98:	89 b9       	out	0x09, r24	; 9
     b9a:	88 e9       	ldi	r24, 0x98	; 152
     b9c:	8a b9       	out	0x0a, r24	; 10
     b9e:	86 e8       	ldi	r24, 0x86	; 134
     ba0:	80 bd       	out	0x20, r24	; 32
     ba2:	08 95       	ret

00000ba4 <uart0_getc>:
     ba4:	f8 94       	cli
     ba6:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <UART_RxHead>
     baa:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <UART_RxTail>
     bae:	98 13       	cpse	r25, r24
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <uart0_getc+0x16>
     bb2:	78 94       	sei
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	08 95       	ret
     bba:	78 94       	sei
     bbc:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <UART_RxTail>
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	8f 77       	andi	r24, 0x7F	; 127
     bc6:	99 27       	eor	r25, r25
     bc8:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <UART_RxTail>
     bcc:	fc 01       	movw	r30, r24
     bce:	ef 57       	subi	r30, 0x7F	; 127
     bd0:	fe 4f       	sbci	r31, 0xFE	; 254
     bd2:	20 81       	ld	r18, Z
     bd4:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <UART_LastRxError>
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	98 2f       	mov	r25, r24
     bdc:	88 27       	eor	r24, r24
     bde:	82 0f       	add	r24, r18
     be0:	91 1d       	adc	r25, r1
     be2:	08 95       	ret

00000be4 <uart0_putc>:
		}
	} while (tmphead == txtail_tmp); /* wait for free space in buffer */
#else
	uint16_t tmphead;
	
	tmphead = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
     be4:	40 91 80 01 	lds	r20, 0x0180	; 0x800180 <UART_TxHead>
     be8:	50 e0       	ldi	r21, 0x00	; 0
     bea:	4f 5f       	subi	r20, 0xFF	; 255
     bec:	5f 4f       	sbci	r21, 0xFF	; 255
     bee:	4f 77       	andi	r20, 0x7F	; 127
     bf0:	55 27       	eor	r21, r21
	
	while (tmphead == UART_TxTail); /* wait for free space in buffer */
     bf2:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <UART_TxTail>
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	42 17       	cp	r20, r18
     bfa:	53 07       	cpc	r21, r19
     bfc:	d1 f3       	breq	.-12     	; 0xbf2 <uart0_putc+0xe>
#endif

	UART_TxBuf[tmphead] = data;
     bfe:	fa 01       	movw	r30, r20
     c00:	ef 5f       	subi	r30, 0xFF	; 255
     c02:	fd 4f       	sbci	r31, 0xFD	; 253
     c04:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
     c06:	40 93 80 01 	sts	0x0180, r20	; 0x800180 <UART_TxHead>

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
     c0a:	55 9a       	sbi	0x0a, 5	; 10
     c0c:	08 95       	ret

00000c0e <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	ec 01       	movw	r28, r24
	while (*s) {
     c14:	88 81       	ld	r24, Y
     c16:	88 23       	and	r24, r24
     c18:	31 f0       	breq	.+12     	; 0xc26 <uart0_puts+0x18>
     c1a:	21 96       	adiw	r28, 0x01	; 1
		uart0_putc(*s++);
     c1c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
	while (*s) {
     c20:	89 91       	ld	r24, Y+
     c22:	81 11       	cpse	r24, r1
     c24:	fb cf       	rjmp	.-10     	; 0xc1c <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	08 95       	ret

00000c2c <__subsf3>:
     c2c:	50 58       	subi	r21, 0x80	; 128

00000c2e <__addsf3>:
     c2e:	bb 27       	eor	r27, r27
     c30:	aa 27       	eor	r26, r26
     c32:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__addsf3x>
     c36:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__fp_round>
     c3a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__fp_pscA>
     c3e:	38 f0       	brcs	.+14     	; 0xc4e <__addsf3+0x20>
     c40:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__fp_pscB>
     c44:	20 f0       	brcs	.+8      	; 0xc4e <__addsf3+0x20>
     c46:	39 f4       	brne	.+14     	; 0xc56 <__addsf3+0x28>
     c48:	9f 3f       	cpi	r25, 0xFF	; 255
     c4a:	19 f4       	brne	.+6      	; 0xc52 <__addsf3+0x24>
     c4c:	26 f4       	brtc	.+8      	; 0xc56 <__addsf3+0x28>
     c4e:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__fp_nan>
     c52:	0e f4       	brtc	.+2      	; 0xc56 <__addsf3+0x28>
     c54:	e0 95       	com	r30
     c56:	e7 fb       	bst	r30, 7
     c58:	0c 94 ef 06 	jmp	0xdde	; 0xdde <__fp_inf>

00000c5c <__addsf3x>:
     c5c:	e9 2f       	mov	r30, r25
     c5e:	0e 94 17 07 	call	0xe2e	; 0xe2e <__fp_split3>
     c62:	58 f3       	brcs	.-42     	; 0xc3a <__addsf3+0xc>
     c64:	ba 17       	cp	r27, r26
     c66:	62 07       	cpc	r22, r18
     c68:	73 07       	cpc	r23, r19
     c6a:	84 07       	cpc	r24, r20
     c6c:	95 07       	cpc	r25, r21
     c6e:	20 f0       	brcs	.+8      	; 0xc78 <__addsf3x+0x1c>
     c70:	79 f4       	brne	.+30     	; 0xc90 <__addsf3x+0x34>
     c72:	a6 f5       	brtc	.+104    	; 0xcdc <__addsf3x+0x80>
     c74:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__fp_zero>
     c78:	0e f4       	brtc	.+2      	; 0xc7c <__addsf3x+0x20>
     c7a:	e0 95       	com	r30
     c7c:	0b 2e       	mov	r0, r27
     c7e:	ba 2f       	mov	r27, r26
     c80:	a0 2d       	mov	r26, r0
     c82:	0b 01       	movw	r0, r22
     c84:	b9 01       	movw	r22, r18
     c86:	90 01       	movw	r18, r0
     c88:	0c 01       	movw	r0, r24
     c8a:	ca 01       	movw	r24, r20
     c8c:	a0 01       	movw	r20, r0
     c8e:	11 24       	eor	r1, r1
     c90:	ff 27       	eor	r31, r31
     c92:	59 1b       	sub	r21, r25
     c94:	99 f0       	breq	.+38     	; 0xcbc <__addsf3x+0x60>
     c96:	59 3f       	cpi	r21, 0xF9	; 249
     c98:	50 f4       	brcc	.+20     	; 0xcae <__addsf3x+0x52>
     c9a:	50 3e       	cpi	r21, 0xE0	; 224
     c9c:	68 f1       	brcs	.+90     	; 0xcf8 <__addsf3x+0x9c>
     c9e:	1a 16       	cp	r1, r26
     ca0:	f0 40       	sbci	r31, 0x00	; 0
     ca2:	a2 2f       	mov	r26, r18
     ca4:	23 2f       	mov	r18, r19
     ca6:	34 2f       	mov	r19, r20
     ca8:	44 27       	eor	r20, r20
     caa:	58 5f       	subi	r21, 0xF8	; 248
     cac:	f3 cf       	rjmp	.-26     	; 0xc94 <__addsf3x+0x38>
     cae:	46 95       	lsr	r20
     cb0:	37 95       	ror	r19
     cb2:	27 95       	ror	r18
     cb4:	a7 95       	ror	r26
     cb6:	f0 40       	sbci	r31, 0x00	; 0
     cb8:	53 95       	inc	r21
     cba:	c9 f7       	brne	.-14     	; 0xcae <__addsf3x+0x52>
     cbc:	7e f4       	brtc	.+30     	; 0xcdc <__addsf3x+0x80>
     cbe:	1f 16       	cp	r1, r31
     cc0:	ba 0b       	sbc	r27, r26
     cc2:	62 0b       	sbc	r22, r18
     cc4:	73 0b       	sbc	r23, r19
     cc6:	84 0b       	sbc	r24, r20
     cc8:	ba f0       	brmi	.+46     	; 0xcf8 <__addsf3x+0x9c>
     cca:	91 50       	subi	r25, 0x01	; 1
     ccc:	a1 f0       	breq	.+40     	; 0xcf6 <__addsf3x+0x9a>
     cce:	ff 0f       	add	r31, r31
     cd0:	bb 1f       	adc	r27, r27
     cd2:	66 1f       	adc	r22, r22
     cd4:	77 1f       	adc	r23, r23
     cd6:	88 1f       	adc	r24, r24
     cd8:	c2 f7       	brpl	.-16     	; 0xcca <__addsf3x+0x6e>
     cda:	0e c0       	rjmp	.+28     	; 0xcf8 <__addsf3x+0x9c>
     cdc:	ba 0f       	add	r27, r26
     cde:	62 1f       	adc	r22, r18
     ce0:	73 1f       	adc	r23, r19
     ce2:	84 1f       	adc	r24, r20
     ce4:	48 f4       	brcc	.+18     	; 0xcf8 <__addsf3x+0x9c>
     ce6:	87 95       	ror	r24
     ce8:	77 95       	ror	r23
     cea:	67 95       	ror	r22
     cec:	b7 95       	ror	r27
     cee:	f7 95       	ror	r31
     cf0:	9e 3f       	cpi	r25, 0xFE	; 254
     cf2:	08 f0       	brcs	.+2      	; 0xcf6 <__addsf3x+0x9a>
     cf4:	b0 cf       	rjmp	.-160    	; 0xc56 <__addsf3+0x28>
     cf6:	93 95       	inc	r25
     cf8:	88 0f       	add	r24, r24
     cfa:	08 f0       	brcs	.+2      	; 0xcfe <__addsf3x+0xa2>
     cfc:	99 27       	eor	r25, r25
     cfe:	ee 0f       	add	r30, r30
     d00:	97 95       	ror	r25
     d02:	87 95       	ror	r24
     d04:	08 95       	ret

00000d06 <__fixunssfsi>:
     d06:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fp_splitA>
     d0a:	88 f0       	brcs	.+34     	; 0xd2e <__fixunssfsi+0x28>
     d0c:	9f 57       	subi	r25, 0x7F	; 127
     d0e:	98 f0       	brcs	.+38     	; 0xd36 <__fixunssfsi+0x30>
     d10:	b9 2f       	mov	r27, r25
     d12:	99 27       	eor	r25, r25
     d14:	b7 51       	subi	r27, 0x17	; 23
     d16:	b0 f0       	brcs	.+44     	; 0xd44 <__fixunssfsi+0x3e>
     d18:	e1 f0       	breq	.+56     	; 0xd52 <__fixunssfsi+0x4c>
     d1a:	66 0f       	add	r22, r22
     d1c:	77 1f       	adc	r23, r23
     d1e:	88 1f       	adc	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	1a f0       	brmi	.+6      	; 0xd2a <__fixunssfsi+0x24>
     d24:	ba 95       	dec	r27
     d26:	c9 f7       	brne	.-14     	; 0xd1a <__fixunssfsi+0x14>
     d28:	14 c0       	rjmp	.+40     	; 0xd52 <__fixunssfsi+0x4c>
     d2a:	b1 30       	cpi	r27, 0x01	; 1
     d2c:	91 f0       	breq	.+36     	; 0xd52 <__fixunssfsi+0x4c>
     d2e:	0e 94 39 07 	call	0xe72	; 0xe72 <__fp_zero>
     d32:	b1 e0       	ldi	r27, 0x01	; 1
     d34:	08 95       	ret
     d36:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__fp_zero>
     d3a:	67 2f       	mov	r22, r23
     d3c:	78 2f       	mov	r23, r24
     d3e:	88 27       	eor	r24, r24
     d40:	b8 5f       	subi	r27, 0xF8	; 248
     d42:	39 f0       	breq	.+14     	; 0xd52 <__fixunssfsi+0x4c>
     d44:	b9 3f       	cpi	r27, 0xF9	; 249
     d46:	cc f3       	brlt	.-14     	; 0xd3a <__fixunssfsi+0x34>
     d48:	86 95       	lsr	r24
     d4a:	77 95       	ror	r23
     d4c:	67 95       	ror	r22
     d4e:	b3 95       	inc	r27
     d50:	d9 f7       	brne	.-10     	; 0xd48 <__fixunssfsi+0x42>
     d52:	3e f4       	brtc	.+14     	; 0xd62 <__fixunssfsi+0x5c>
     d54:	90 95       	com	r25
     d56:	80 95       	com	r24
     d58:	70 95       	com	r23
     d5a:	61 95       	neg	r22
     d5c:	7f 4f       	sbci	r23, 0xFF	; 255
     d5e:	8f 4f       	sbci	r24, 0xFF	; 255
     d60:	9f 4f       	sbci	r25, 0xFF	; 255
     d62:	08 95       	ret

00000d64 <__floatunsisf>:
     d64:	e8 94       	clt
     d66:	09 c0       	rjmp	.+18     	; 0xd7a <__floatsisf+0x12>

00000d68 <__floatsisf>:
     d68:	97 fb       	bst	r25, 7
     d6a:	3e f4       	brtc	.+14     	; 0xd7a <__floatsisf+0x12>
     d6c:	90 95       	com	r25
     d6e:	80 95       	com	r24
     d70:	70 95       	com	r23
     d72:	61 95       	neg	r22
     d74:	7f 4f       	sbci	r23, 0xFF	; 255
     d76:	8f 4f       	sbci	r24, 0xFF	; 255
     d78:	9f 4f       	sbci	r25, 0xFF	; 255
     d7a:	99 23       	and	r25, r25
     d7c:	a9 f0       	breq	.+42     	; 0xda8 <__floatsisf+0x40>
     d7e:	f9 2f       	mov	r31, r25
     d80:	96 e9       	ldi	r25, 0x96	; 150
     d82:	bb 27       	eor	r27, r27
     d84:	93 95       	inc	r25
     d86:	f6 95       	lsr	r31
     d88:	87 95       	ror	r24
     d8a:	77 95       	ror	r23
     d8c:	67 95       	ror	r22
     d8e:	b7 95       	ror	r27
     d90:	f1 11       	cpse	r31, r1
     d92:	f8 cf       	rjmp	.-16     	; 0xd84 <__floatsisf+0x1c>
     d94:	fa f4       	brpl	.+62     	; 0xdd4 <__floatsisf+0x6c>
     d96:	bb 0f       	add	r27, r27
     d98:	11 f4       	brne	.+4      	; 0xd9e <__floatsisf+0x36>
     d9a:	60 ff       	sbrs	r22, 0
     d9c:	1b c0       	rjmp	.+54     	; 0xdd4 <__floatsisf+0x6c>
     d9e:	6f 5f       	subi	r22, 0xFF	; 255
     da0:	7f 4f       	sbci	r23, 0xFF	; 255
     da2:	8f 4f       	sbci	r24, 0xFF	; 255
     da4:	9f 4f       	sbci	r25, 0xFF	; 255
     da6:	16 c0       	rjmp	.+44     	; 0xdd4 <__floatsisf+0x6c>
     da8:	88 23       	and	r24, r24
     daa:	11 f0       	breq	.+4      	; 0xdb0 <__floatsisf+0x48>
     dac:	96 e9       	ldi	r25, 0x96	; 150
     dae:	11 c0       	rjmp	.+34     	; 0xdd2 <__floatsisf+0x6a>
     db0:	77 23       	and	r23, r23
     db2:	21 f0       	breq	.+8      	; 0xdbc <__floatsisf+0x54>
     db4:	9e e8       	ldi	r25, 0x8E	; 142
     db6:	87 2f       	mov	r24, r23
     db8:	76 2f       	mov	r23, r22
     dba:	05 c0       	rjmp	.+10     	; 0xdc6 <__floatsisf+0x5e>
     dbc:	66 23       	and	r22, r22
     dbe:	71 f0       	breq	.+28     	; 0xddc <__floatsisf+0x74>
     dc0:	96 e8       	ldi	r25, 0x86	; 134
     dc2:	86 2f       	mov	r24, r22
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	2a f0       	brmi	.+10     	; 0xdd4 <__floatsisf+0x6c>
     dca:	9a 95       	dec	r25
     dcc:	66 0f       	add	r22, r22
     dce:	77 1f       	adc	r23, r23
     dd0:	88 1f       	adc	r24, r24
     dd2:	da f7       	brpl	.-10     	; 0xdca <__floatsisf+0x62>
     dd4:	88 0f       	add	r24, r24
     dd6:	96 95       	lsr	r25
     dd8:	87 95       	ror	r24
     dda:	97 f9       	bld	r25, 7
     ddc:	08 95       	ret

00000dde <__fp_inf>:
     dde:	97 f9       	bld	r25, 7
     de0:	9f 67       	ori	r25, 0x7F	; 127
     de2:	80 e8       	ldi	r24, 0x80	; 128
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	08 95       	ret

00000dea <__fp_nan>:
     dea:	9f ef       	ldi	r25, 0xFF	; 255
     dec:	80 ec       	ldi	r24, 0xC0	; 192
     dee:	08 95       	ret

00000df0 <__fp_pscA>:
     df0:	00 24       	eor	r0, r0
     df2:	0a 94       	dec	r0
     df4:	16 16       	cp	r1, r22
     df6:	17 06       	cpc	r1, r23
     df8:	18 06       	cpc	r1, r24
     dfa:	09 06       	cpc	r0, r25
     dfc:	08 95       	ret

00000dfe <__fp_pscB>:
     dfe:	00 24       	eor	r0, r0
     e00:	0a 94       	dec	r0
     e02:	12 16       	cp	r1, r18
     e04:	13 06       	cpc	r1, r19
     e06:	14 06       	cpc	r1, r20
     e08:	05 06       	cpc	r0, r21
     e0a:	08 95       	ret

00000e0c <__fp_round>:
     e0c:	09 2e       	mov	r0, r25
     e0e:	03 94       	inc	r0
     e10:	00 0c       	add	r0, r0
     e12:	11 f4       	brne	.+4      	; 0xe18 <__fp_round+0xc>
     e14:	88 23       	and	r24, r24
     e16:	52 f0       	brmi	.+20     	; 0xe2c <__fp_round+0x20>
     e18:	bb 0f       	add	r27, r27
     e1a:	40 f4       	brcc	.+16     	; 0xe2c <__fp_round+0x20>
     e1c:	bf 2b       	or	r27, r31
     e1e:	11 f4       	brne	.+4      	; 0xe24 <__fp_round+0x18>
     e20:	60 ff       	sbrs	r22, 0
     e22:	04 c0       	rjmp	.+8      	; 0xe2c <__fp_round+0x20>
     e24:	6f 5f       	subi	r22, 0xFF	; 255
     e26:	7f 4f       	sbci	r23, 0xFF	; 255
     e28:	8f 4f       	sbci	r24, 0xFF	; 255
     e2a:	9f 4f       	sbci	r25, 0xFF	; 255
     e2c:	08 95       	ret

00000e2e <__fp_split3>:
     e2e:	57 fd       	sbrc	r21, 7
     e30:	90 58       	subi	r25, 0x80	; 128
     e32:	44 0f       	add	r20, r20
     e34:	55 1f       	adc	r21, r21
     e36:	59 f0       	breq	.+22     	; 0xe4e <__fp_splitA+0x10>
     e38:	5f 3f       	cpi	r21, 0xFF	; 255
     e3a:	71 f0       	breq	.+28     	; 0xe58 <__fp_splitA+0x1a>
     e3c:	47 95       	ror	r20

00000e3e <__fp_splitA>:
     e3e:	88 0f       	add	r24, r24
     e40:	97 fb       	bst	r25, 7
     e42:	99 1f       	adc	r25, r25
     e44:	61 f0       	breq	.+24     	; 0xe5e <__fp_splitA+0x20>
     e46:	9f 3f       	cpi	r25, 0xFF	; 255
     e48:	79 f0       	breq	.+30     	; 0xe68 <__fp_splitA+0x2a>
     e4a:	87 95       	ror	r24
     e4c:	08 95       	ret
     e4e:	12 16       	cp	r1, r18
     e50:	13 06       	cpc	r1, r19
     e52:	14 06       	cpc	r1, r20
     e54:	55 1f       	adc	r21, r21
     e56:	f2 cf       	rjmp	.-28     	; 0xe3c <__fp_split3+0xe>
     e58:	46 95       	lsr	r20
     e5a:	f1 df       	rcall	.-30     	; 0xe3e <__fp_splitA>
     e5c:	08 c0       	rjmp	.+16     	; 0xe6e <__fp_splitA+0x30>
     e5e:	16 16       	cp	r1, r22
     e60:	17 06       	cpc	r1, r23
     e62:	18 06       	cpc	r1, r24
     e64:	99 1f       	adc	r25, r25
     e66:	f1 cf       	rjmp	.-30     	; 0xe4a <__fp_splitA+0xc>
     e68:	86 95       	lsr	r24
     e6a:	71 05       	cpc	r23, r1
     e6c:	61 05       	cpc	r22, r1
     e6e:	08 94       	sec
     e70:	08 95       	ret

00000e72 <__fp_zero>:
     e72:	e8 94       	clt

00000e74 <__fp_szero>:
     e74:	bb 27       	eor	r27, r27
     e76:	66 27       	eor	r22, r22
     e78:	77 27       	eor	r23, r23
     e7a:	cb 01       	movw	r24, r22
     e7c:	97 f9       	bld	r25, 7
     e7e:	08 95       	ret

00000e80 <__mulsf3>:
     e80:	0e 94 53 07 	call	0xea6	; 0xea6 <__mulsf3x>
     e84:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__fp_round>
     e88:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__fp_pscA>
     e8c:	38 f0       	brcs	.+14     	; 0xe9c <__mulsf3+0x1c>
     e8e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__fp_pscB>
     e92:	20 f0       	brcs	.+8      	; 0xe9c <__mulsf3+0x1c>
     e94:	95 23       	and	r25, r21
     e96:	11 f0       	breq	.+4      	; 0xe9c <__mulsf3+0x1c>
     e98:	0c 94 ef 06 	jmp	0xdde	; 0xdde <__fp_inf>
     e9c:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__fp_nan>
     ea0:	11 24       	eor	r1, r1
     ea2:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <__fp_szero>

00000ea6 <__mulsf3x>:
     ea6:	0e 94 17 07 	call	0xe2e	; 0xe2e <__fp_split3>
     eaa:	70 f3       	brcs	.-36     	; 0xe88 <__mulsf3+0x8>

00000eac <__mulsf3_pse>:
     eac:	95 9f       	mul	r25, r21
     eae:	c1 f3       	breq	.-16     	; 0xea0 <__mulsf3+0x20>
     eb0:	95 0f       	add	r25, r21
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	55 1f       	adc	r21, r21
     eb6:	62 9f       	mul	r22, r18
     eb8:	f0 01       	movw	r30, r0
     eba:	72 9f       	mul	r23, r18
     ebc:	bb 27       	eor	r27, r27
     ebe:	f0 0d       	add	r31, r0
     ec0:	b1 1d       	adc	r27, r1
     ec2:	63 9f       	mul	r22, r19
     ec4:	aa 27       	eor	r26, r26
     ec6:	f0 0d       	add	r31, r0
     ec8:	b1 1d       	adc	r27, r1
     eca:	aa 1f       	adc	r26, r26
     ecc:	64 9f       	mul	r22, r20
     ece:	66 27       	eor	r22, r22
     ed0:	b0 0d       	add	r27, r0
     ed2:	a1 1d       	adc	r26, r1
     ed4:	66 1f       	adc	r22, r22
     ed6:	82 9f       	mul	r24, r18
     ed8:	22 27       	eor	r18, r18
     eda:	b0 0d       	add	r27, r0
     edc:	a1 1d       	adc	r26, r1
     ede:	62 1f       	adc	r22, r18
     ee0:	73 9f       	mul	r23, r19
     ee2:	b0 0d       	add	r27, r0
     ee4:	a1 1d       	adc	r26, r1
     ee6:	62 1f       	adc	r22, r18
     ee8:	83 9f       	mul	r24, r19
     eea:	a0 0d       	add	r26, r0
     eec:	61 1d       	adc	r22, r1
     eee:	22 1f       	adc	r18, r18
     ef0:	74 9f       	mul	r23, r20
     ef2:	33 27       	eor	r19, r19
     ef4:	a0 0d       	add	r26, r0
     ef6:	61 1d       	adc	r22, r1
     ef8:	23 1f       	adc	r18, r19
     efa:	84 9f       	mul	r24, r20
     efc:	60 0d       	add	r22, r0
     efe:	21 1d       	adc	r18, r1
     f00:	82 2f       	mov	r24, r18
     f02:	76 2f       	mov	r23, r22
     f04:	6a 2f       	mov	r22, r26
     f06:	11 24       	eor	r1, r1
     f08:	9f 57       	subi	r25, 0x7F	; 127
     f0a:	50 40       	sbci	r21, 0x00	; 0
     f0c:	9a f0       	brmi	.+38     	; 0xf34 <__mulsf3_pse+0x88>
     f0e:	f1 f0       	breq	.+60     	; 0xf4c <__mulsf3_pse+0xa0>
     f10:	88 23       	and	r24, r24
     f12:	4a f0       	brmi	.+18     	; 0xf26 <__mulsf3_pse+0x7a>
     f14:	ee 0f       	add	r30, r30
     f16:	ff 1f       	adc	r31, r31
     f18:	bb 1f       	adc	r27, r27
     f1a:	66 1f       	adc	r22, r22
     f1c:	77 1f       	adc	r23, r23
     f1e:	88 1f       	adc	r24, r24
     f20:	91 50       	subi	r25, 0x01	; 1
     f22:	50 40       	sbci	r21, 0x00	; 0
     f24:	a9 f7       	brne	.-22     	; 0xf10 <__mulsf3_pse+0x64>
     f26:	9e 3f       	cpi	r25, 0xFE	; 254
     f28:	51 05       	cpc	r21, r1
     f2a:	80 f0       	brcs	.+32     	; 0xf4c <__mulsf3_pse+0xa0>
     f2c:	0c 94 ef 06 	jmp	0xdde	; 0xdde <__fp_inf>
     f30:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <__fp_szero>
     f34:	5f 3f       	cpi	r21, 0xFF	; 255
     f36:	e4 f3       	brlt	.-8      	; 0xf30 <__mulsf3_pse+0x84>
     f38:	98 3e       	cpi	r25, 0xE8	; 232
     f3a:	d4 f3       	brlt	.-12     	; 0xf30 <__mulsf3_pse+0x84>
     f3c:	86 95       	lsr	r24
     f3e:	77 95       	ror	r23
     f40:	67 95       	ror	r22
     f42:	b7 95       	ror	r27
     f44:	f7 95       	ror	r31
     f46:	e7 95       	ror	r30
     f48:	9f 5f       	subi	r25, 0xFF	; 255
     f4a:	c1 f7       	brne	.-16     	; 0xf3c <__mulsf3_pse+0x90>
     f4c:	fe 2b       	or	r31, r30
     f4e:	88 0f       	add	r24, r24
     f50:	91 1d       	adc	r25, r1
     f52:	96 95       	lsr	r25
     f54:	87 95       	ror	r24
     f56:	97 f9       	bld	r25, 7
     f58:	08 95       	ret

00000f5a <vfprintf>:
     f5a:	a0 e1       	ldi	r26, 0x10	; 16
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e3 eb       	ldi	r30, 0xB3	; 179
     f60:	f7 e0       	ldi	r31, 0x07	; 7
     f62:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__prologue_saves__>
     f66:	7c 01       	movw	r14, r24
     f68:	1b 01       	movw	r2, r22
     f6a:	6a 01       	movw	r12, r20
     f6c:	fc 01       	movw	r30, r24
     f6e:	17 82       	std	Z+7, r1	; 0x07
     f70:	16 82       	std	Z+6, r1	; 0x06
     f72:	83 81       	ldd	r24, Z+3	; 0x03
     f74:	81 ff       	sbrs	r24, 1
     f76:	44 c3       	rjmp	.+1672   	; 0x1600 <vfprintf+0x6a6>
     f78:	9e 01       	movw	r18, r28
     f7a:	2f 5f       	subi	r18, 0xFF	; 255
     f7c:	3f 4f       	sbci	r19, 0xFF	; 255
     f7e:	39 01       	movw	r6, r18
     f80:	f7 01       	movw	r30, r14
     f82:	93 81       	ldd	r25, Z+3	; 0x03
     f84:	f1 01       	movw	r30, r2
     f86:	93 fd       	sbrc	r25, 3
     f88:	85 91       	lpm	r24, Z+
     f8a:	93 ff       	sbrs	r25, 3
     f8c:	81 91       	ld	r24, Z+
     f8e:	1f 01       	movw	r2, r30
     f90:	88 23       	and	r24, r24
     f92:	09 f4       	brne	.+2      	; 0xf96 <vfprintf+0x3c>
     f94:	31 c3       	rjmp	.+1634   	; 0x15f8 <vfprintf+0x69e>
     f96:	85 32       	cpi	r24, 0x25	; 37
     f98:	39 f4       	brne	.+14     	; 0xfa8 <vfprintf+0x4e>
     f9a:	93 fd       	sbrc	r25, 3
     f9c:	85 91       	lpm	r24, Z+
     f9e:	93 ff       	sbrs	r25, 3
     fa0:	81 91       	ld	r24, Z+
     fa2:	1f 01       	movw	r2, r30
     fa4:	85 32       	cpi	r24, 0x25	; 37
     fa6:	39 f4       	brne	.+14     	; 0xfb6 <vfprintf+0x5c>
     fa8:	b7 01       	movw	r22, r14
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
     fb0:	56 01       	movw	r10, r12
     fb2:	65 01       	movw	r12, r10
     fb4:	e5 cf       	rjmp	.-54     	; 0xf80 <vfprintf+0x26>
     fb6:	10 e0       	ldi	r17, 0x00	; 0
     fb8:	51 2c       	mov	r5, r1
     fba:	91 2c       	mov	r9, r1
     fbc:	ff e1       	ldi	r31, 0x1F	; 31
     fbe:	f9 15       	cp	r31, r9
     fc0:	d8 f0       	brcs	.+54     	; 0xff8 <vfprintf+0x9e>
     fc2:	8b 32       	cpi	r24, 0x2B	; 43
     fc4:	79 f0       	breq	.+30     	; 0xfe4 <vfprintf+0x8a>
     fc6:	38 f4       	brcc	.+14     	; 0xfd6 <vfprintf+0x7c>
     fc8:	80 32       	cpi	r24, 0x20	; 32
     fca:	79 f0       	breq	.+30     	; 0xfea <vfprintf+0x90>
     fcc:	83 32       	cpi	r24, 0x23	; 35
     fce:	a1 f4       	brne	.+40     	; 0xff8 <vfprintf+0x9e>
     fd0:	f9 2d       	mov	r31, r9
     fd2:	f0 61       	ori	r31, 0x10	; 16
     fd4:	2e c0       	rjmp	.+92     	; 0x1032 <vfprintf+0xd8>
     fd6:	8d 32       	cpi	r24, 0x2D	; 45
     fd8:	61 f0       	breq	.+24     	; 0xff2 <vfprintf+0x98>
     fda:	80 33       	cpi	r24, 0x30	; 48
     fdc:	69 f4       	brne	.+26     	; 0xff8 <vfprintf+0x9e>
     fde:	29 2d       	mov	r18, r9
     fe0:	21 60       	ori	r18, 0x01	; 1
     fe2:	2d c0       	rjmp	.+90     	; 0x103e <vfprintf+0xe4>
     fe4:	39 2d       	mov	r19, r9
     fe6:	32 60       	ori	r19, 0x02	; 2
     fe8:	93 2e       	mov	r9, r19
     fea:	89 2d       	mov	r24, r9
     fec:	84 60       	ori	r24, 0x04	; 4
     fee:	98 2e       	mov	r9, r24
     ff0:	2a c0       	rjmp	.+84     	; 0x1046 <vfprintf+0xec>
     ff2:	e9 2d       	mov	r30, r9
     ff4:	e8 60       	ori	r30, 0x08	; 8
     ff6:	15 c0       	rjmp	.+42     	; 0x1022 <vfprintf+0xc8>
     ff8:	97 fc       	sbrc	r9, 7
     ffa:	2d c0       	rjmp	.+90     	; 0x1056 <vfprintf+0xfc>
     ffc:	20 ed       	ldi	r18, 0xD0	; 208
     ffe:	28 0f       	add	r18, r24
    1000:	2a 30       	cpi	r18, 0x0A	; 10
    1002:	88 f4       	brcc	.+34     	; 0x1026 <vfprintf+0xcc>
    1004:	96 fe       	sbrs	r9, 6
    1006:	06 c0       	rjmp	.+12     	; 0x1014 <vfprintf+0xba>
    1008:	3a e0       	ldi	r19, 0x0A	; 10
    100a:	13 9f       	mul	r17, r19
    100c:	20 0d       	add	r18, r0
    100e:	11 24       	eor	r1, r1
    1010:	12 2f       	mov	r17, r18
    1012:	19 c0       	rjmp	.+50     	; 0x1046 <vfprintf+0xec>
    1014:	8a e0       	ldi	r24, 0x0A	; 10
    1016:	58 9e       	mul	r5, r24
    1018:	20 0d       	add	r18, r0
    101a:	11 24       	eor	r1, r1
    101c:	52 2e       	mov	r5, r18
    101e:	e9 2d       	mov	r30, r9
    1020:	e0 62       	ori	r30, 0x20	; 32
    1022:	9e 2e       	mov	r9, r30
    1024:	10 c0       	rjmp	.+32     	; 0x1046 <vfprintf+0xec>
    1026:	8e 32       	cpi	r24, 0x2E	; 46
    1028:	31 f4       	brne	.+12     	; 0x1036 <vfprintf+0xdc>
    102a:	96 fc       	sbrc	r9, 6
    102c:	e5 c2       	rjmp	.+1482   	; 0x15f8 <vfprintf+0x69e>
    102e:	f9 2d       	mov	r31, r9
    1030:	f0 64       	ori	r31, 0x40	; 64
    1032:	9f 2e       	mov	r9, r31
    1034:	08 c0       	rjmp	.+16     	; 0x1046 <vfprintf+0xec>
    1036:	8c 36       	cpi	r24, 0x6C	; 108
    1038:	21 f4       	brne	.+8      	; 0x1042 <vfprintf+0xe8>
    103a:	29 2d       	mov	r18, r9
    103c:	20 68       	ori	r18, 0x80	; 128
    103e:	92 2e       	mov	r9, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <vfprintf+0xec>
    1042:	88 36       	cpi	r24, 0x68	; 104
    1044:	41 f4       	brne	.+16     	; 0x1056 <vfprintf+0xfc>
    1046:	f1 01       	movw	r30, r2
    1048:	93 fd       	sbrc	r25, 3
    104a:	85 91       	lpm	r24, Z+
    104c:	93 ff       	sbrs	r25, 3
    104e:	81 91       	ld	r24, Z+
    1050:	1f 01       	movw	r2, r30
    1052:	81 11       	cpse	r24, r1
    1054:	b3 cf       	rjmp	.-154    	; 0xfbc <vfprintf+0x62>
    1056:	9b eb       	ldi	r25, 0xBB	; 187
    1058:	98 0f       	add	r25, r24
    105a:	93 30       	cpi	r25, 0x03	; 3
    105c:	20 f4       	brcc	.+8      	; 0x1066 <vfprintf+0x10c>
    105e:	99 2d       	mov	r25, r9
    1060:	90 61       	ori	r25, 0x10	; 16
    1062:	80 5e       	subi	r24, 0xE0	; 224
    1064:	07 c0       	rjmp	.+14     	; 0x1074 <vfprintf+0x11a>
    1066:	9b e9       	ldi	r25, 0x9B	; 155
    1068:	98 0f       	add	r25, r24
    106a:	93 30       	cpi	r25, 0x03	; 3
    106c:	08 f0       	brcs	.+2      	; 0x1070 <vfprintf+0x116>
    106e:	66 c1       	rjmp	.+716    	; 0x133c <vfprintf+0x3e2>
    1070:	99 2d       	mov	r25, r9
    1072:	9f 7e       	andi	r25, 0xEF	; 239
    1074:	96 ff       	sbrs	r25, 6
    1076:	16 e0       	ldi	r17, 0x06	; 6
    1078:	9f 73       	andi	r25, 0x3F	; 63
    107a:	99 2e       	mov	r9, r25
    107c:	85 36       	cpi	r24, 0x65	; 101
    107e:	19 f4       	brne	.+6      	; 0x1086 <vfprintf+0x12c>
    1080:	90 64       	ori	r25, 0x40	; 64
    1082:	99 2e       	mov	r9, r25
    1084:	08 c0       	rjmp	.+16     	; 0x1096 <vfprintf+0x13c>
    1086:	86 36       	cpi	r24, 0x66	; 102
    1088:	21 f4       	brne	.+8      	; 0x1092 <vfprintf+0x138>
    108a:	39 2f       	mov	r19, r25
    108c:	30 68       	ori	r19, 0x80	; 128
    108e:	93 2e       	mov	r9, r19
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <vfprintf+0x13c>
    1092:	11 11       	cpse	r17, r1
    1094:	11 50       	subi	r17, 0x01	; 1
    1096:	97 fe       	sbrs	r9, 7
    1098:	07 c0       	rjmp	.+14     	; 0x10a8 <vfprintf+0x14e>
    109a:	1c 33       	cpi	r17, 0x3C	; 60
    109c:	50 f4       	brcc	.+20     	; 0x10b2 <vfprintf+0x158>
    109e:	44 24       	eor	r4, r4
    10a0:	43 94       	inc	r4
    10a2:	41 0e       	add	r4, r17
    10a4:	27 e0       	ldi	r18, 0x07	; 7
    10a6:	0b c0       	rjmp	.+22     	; 0x10be <vfprintf+0x164>
    10a8:	18 30       	cpi	r17, 0x08	; 8
    10aa:	38 f0       	brcs	.+14     	; 0x10ba <vfprintf+0x160>
    10ac:	27 e0       	ldi	r18, 0x07	; 7
    10ae:	17 e0       	ldi	r17, 0x07	; 7
    10b0:	05 c0       	rjmp	.+10     	; 0x10bc <vfprintf+0x162>
    10b2:	27 e0       	ldi	r18, 0x07	; 7
    10b4:	9c e3       	ldi	r25, 0x3C	; 60
    10b6:	49 2e       	mov	r4, r25
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <vfprintf+0x164>
    10ba:	21 2f       	mov	r18, r17
    10bc:	41 2c       	mov	r4, r1
    10be:	56 01       	movw	r10, r12
    10c0:	84 e0       	ldi	r24, 0x04	; 4
    10c2:	a8 0e       	add	r10, r24
    10c4:	b1 1c       	adc	r11, r1
    10c6:	f6 01       	movw	r30, r12
    10c8:	60 81       	ld	r22, Z
    10ca:	71 81       	ldd	r23, Z+1	; 0x01
    10cc:	82 81       	ldd	r24, Z+2	; 0x02
    10ce:	93 81       	ldd	r25, Z+3	; 0x03
    10d0:	04 2d       	mov	r16, r4
    10d2:	a3 01       	movw	r20, r6
    10d4:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__ftoa_engine>
    10d8:	6c 01       	movw	r12, r24
    10da:	f9 81       	ldd	r31, Y+1	; 0x01
    10dc:	fc 87       	std	Y+12, r31	; 0x0c
    10de:	f0 ff       	sbrs	r31, 0
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <vfprintf+0x18c>
    10e2:	f3 ff       	sbrs	r31, 3
    10e4:	06 c0       	rjmp	.+12     	; 0x10f2 <vfprintf+0x198>
    10e6:	91 fc       	sbrc	r9, 1
    10e8:	06 c0       	rjmp	.+12     	; 0x10f6 <vfprintf+0x19c>
    10ea:	92 fe       	sbrs	r9, 2
    10ec:	06 c0       	rjmp	.+12     	; 0x10fa <vfprintf+0x1a0>
    10ee:	00 e2       	ldi	r16, 0x20	; 32
    10f0:	05 c0       	rjmp	.+10     	; 0x10fc <vfprintf+0x1a2>
    10f2:	0d e2       	ldi	r16, 0x2D	; 45
    10f4:	03 c0       	rjmp	.+6      	; 0x10fc <vfprintf+0x1a2>
    10f6:	0b e2       	ldi	r16, 0x2B	; 43
    10f8:	01 c0       	rjmp	.+2      	; 0x10fc <vfprintf+0x1a2>
    10fa:	00 e0       	ldi	r16, 0x00	; 0
    10fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    10fe:	8c 70       	andi	r24, 0x0C	; 12
    1100:	19 f0       	breq	.+6      	; 0x1108 <vfprintf+0x1ae>
    1102:	01 11       	cpse	r16, r1
    1104:	5a c2       	rjmp	.+1204   	; 0x15ba <vfprintf+0x660>
    1106:	9b c2       	rjmp	.+1334   	; 0x163e <vfprintf+0x6e4>
    1108:	97 fe       	sbrs	r9, 7
    110a:	10 c0       	rjmp	.+32     	; 0x112c <vfprintf+0x1d2>
    110c:	4c 0c       	add	r4, r12
    110e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1110:	f4 ff       	sbrs	r31, 4
    1112:	04 c0       	rjmp	.+8      	; 0x111c <vfprintf+0x1c2>
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	81 33       	cpi	r24, 0x31	; 49
    1118:	09 f4       	brne	.+2      	; 0x111c <vfprintf+0x1c2>
    111a:	4a 94       	dec	r4
    111c:	14 14       	cp	r1, r4
    111e:	74 f5       	brge	.+92     	; 0x117c <vfprintf+0x222>
    1120:	28 e0       	ldi	r18, 0x08	; 8
    1122:	24 15       	cp	r18, r4
    1124:	78 f5       	brcc	.+94     	; 0x1184 <vfprintf+0x22a>
    1126:	88 e0       	ldi	r24, 0x08	; 8
    1128:	48 2e       	mov	r4, r24
    112a:	2c c0       	rjmp	.+88     	; 0x1184 <vfprintf+0x22a>
    112c:	96 fc       	sbrc	r9, 6
    112e:	2a c0       	rjmp	.+84     	; 0x1184 <vfprintf+0x22a>
    1130:	81 2f       	mov	r24, r17
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	8c 15       	cp	r24, r12
    1136:	9d 05       	cpc	r25, r13
    1138:	9c f0       	brlt	.+38     	; 0x1160 <vfprintf+0x206>
    113a:	3c ef       	ldi	r19, 0xFC	; 252
    113c:	c3 16       	cp	r12, r19
    113e:	3f ef       	ldi	r19, 0xFF	; 255
    1140:	d3 06       	cpc	r13, r19
    1142:	74 f0       	brlt	.+28     	; 0x1160 <vfprintf+0x206>
    1144:	89 2d       	mov	r24, r9
    1146:	80 68       	ori	r24, 0x80	; 128
    1148:	98 2e       	mov	r9, r24
    114a:	0a c0       	rjmp	.+20     	; 0x1160 <vfprintf+0x206>
    114c:	e2 e0       	ldi	r30, 0x02	; 2
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	ec 0f       	add	r30, r28
    1152:	fd 1f       	adc	r31, r29
    1154:	e1 0f       	add	r30, r17
    1156:	f1 1d       	adc	r31, r1
    1158:	80 81       	ld	r24, Z
    115a:	80 33       	cpi	r24, 0x30	; 48
    115c:	19 f4       	brne	.+6      	; 0x1164 <vfprintf+0x20a>
    115e:	11 50       	subi	r17, 0x01	; 1
    1160:	11 11       	cpse	r17, r1
    1162:	f4 cf       	rjmp	.-24     	; 0x114c <vfprintf+0x1f2>
    1164:	97 fe       	sbrs	r9, 7
    1166:	0e c0       	rjmp	.+28     	; 0x1184 <vfprintf+0x22a>
    1168:	44 24       	eor	r4, r4
    116a:	43 94       	inc	r4
    116c:	41 0e       	add	r4, r17
    116e:	81 2f       	mov	r24, r17
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	c8 16       	cp	r12, r24
    1174:	d9 06       	cpc	r13, r25
    1176:	2c f4       	brge	.+10     	; 0x1182 <vfprintf+0x228>
    1178:	1c 19       	sub	r17, r12
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <vfprintf+0x22a>
    117c:	44 24       	eor	r4, r4
    117e:	43 94       	inc	r4
    1180:	01 c0       	rjmp	.+2      	; 0x1184 <vfprintf+0x22a>
    1182:	10 e0       	ldi	r17, 0x00	; 0
    1184:	97 fe       	sbrs	r9, 7
    1186:	06 c0       	rjmp	.+12     	; 0x1194 <vfprintf+0x23a>
    1188:	1c 14       	cp	r1, r12
    118a:	1d 04       	cpc	r1, r13
    118c:	34 f4       	brge	.+12     	; 0x119a <vfprintf+0x240>
    118e:	c6 01       	movw	r24, r12
    1190:	01 96       	adiw	r24, 0x01	; 1
    1192:	05 c0       	rjmp	.+10     	; 0x119e <vfprintf+0x244>
    1194:	85 e0       	ldi	r24, 0x05	; 5
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 c0       	rjmp	.+4      	; 0x119e <vfprintf+0x244>
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	01 11       	cpse	r16, r1
    11a0:	01 96       	adiw	r24, 0x01	; 1
    11a2:	11 23       	and	r17, r17
    11a4:	31 f0       	breq	.+12     	; 0x11b2 <vfprintf+0x258>
    11a6:	21 2f       	mov	r18, r17
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	2f 5f       	subi	r18, 0xFF	; 255
    11ac:	3f 4f       	sbci	r19, 0xFF	; 255
    11ae:	82 0f       	add	r24, r18
    11b0:	93 1f       	adc	r25, r19
    11b2:	25 2d       	mov	r18, r5
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	82 17       	cp	r24, r18
    11b8:	93 07       	cpc	r25, r19
    11ba:	14 f4       	brge	.+4      	; 0x11c0 <vfprintf+0x266>
    11bc:	58 1a       	sub	r5, r24
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <vfprintf+0x268>
    11c0:	51 2c       	mov	r5, r1
    11c2:	89 2d       	mov	r24, r9
    11c4:	89 70       	andi	r24, 0x09	; 9
    11c6:	49 f4       	brne	.+18     	; 0x11da <vfprintf+0x280>
    11c8:	55 20       	and	r5, r5
    11ca:	39 f0       	breq	.+14     	; 0x11da <vfprintf+0x280>
    11cc:	b7 01       	movw	r22, r14
    11ce:	80 e2       	ldi	r24, 0x20	; 32
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    11d6:	5a 94       	dec	r5
    11d8:	f7 cf       	rjmp	.-18     	; 0x11c8 <vfprintf+0x26e>
    11da:	00 23       	and	r16, r16
    11dc:	29 f0       	breq	.+10     	; 0x11e8 <vfprintf+0x28e>
    11de:	b7 01       	movw	r22, r14
    11e0:	80 2f       	mov	r24, r16
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    11e8:	93 fc       	sbrc	r9, 3
    11ea:	09 c0       	rjmp	.+18     	; 0x11fe <vfprintf+0x2a4>
    11ec:	55 20       	and	r5, r5
    11ee:	39 f0       	breq	.+14     	; 0x11fe <vfprintf+0x2a4>
    11f0:	b7 01       	movw	r22, r14
    11f2:	80 e3       	ldi	r24, 0x30	; 48
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    11fa:	5a 94       	dec	r5
    11fc:	f7 cf       	rjmp	.-18     	; 0x11ec <vfprintf+0x292>
    11fe:	97 fe       	sbrs	r9, 7
    1200:	4c c0       	rjmp	.+152    	; 0x129a <vfprintf+0x340>
    1202:	46 01       	movw	r8, r12
    1204:	d7 fe       	sbrs	r13, 7
    1206:	02 c0       	rjmp	.+4      	; 0x120c <vfprintf+0x2b2>
    1208:	81 2c       	mov	r8, r1
    120a:	91 2c       	mov	r9, r1
    120c:	c6 01       	movw	r24, r12
    120e:	88 19       	sub	r24, r8
    1210:	99 09       	sbc	r25, r9
    1212:	f3 01       	movw	r30, r6
    1214:	e8 0f       	add	r30, r24
    1216:	f9 1f       	adc	r31, r25
    1218:	fe 87       	std	Y+14, r31	; 0x0e
    121a:	ed 87       	std	Y+13, r30	; 0x0d
    121c:	96 01       	movw	r18, r12
    121e:	24 19       	sub	r18, r4
    1220:	31 09       	sbc	r19, r1
    1222:	38 8b       	std	Y+16, r19	; 0x10
    1224:	2f 87       	std	Y+15, r18	; 0x0f
    1226:	01 2f       	mov	r16, r17
    1228:	10 e0       	ldi	r17, 0x00	; 0
    122a:	11 95       	neg	r17
    122c:	01 95       	neg	r16
    122e:	11 09       	sbc	r17, r1
    1230:	3f ef       	ldi	r19, 0xFF	; 255
    1232:	83 16       	cp	r8, r19
    1234:	93 06       	cpc	r9, r19
    1236:	29 f4       	brne	.+10     	; 0x1242 <vfprintf+0x2e8>
    1238:	b7 01       	movw	r22, r14
    123a:	8e e2       	ldi	r24, 0x2E	; 46
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    1242:	c8 14       	cp	r12, r8
    1244:	d9 04       	cpc	r13, r9
    1246:	4c f0       	brlt	.+18     	; 0x125a <vfprintf+0x300>
    1248:	8f 85       	ldd	r24, Y+15	; 0x0f
    124a:	98 89       	ldd	r25, Y+16	; 0x10
    124c:	88 15       	cp	r24, r8
    124e:	99 05       	cpc	r25, r9
    1250:	24 f4       	brge	.+8      	; 0x125a <vfprintf+0x300>
    1252:	ed 85       	ldd	r30, Y+13	; 0x0d
    1254:	fe 85       	ldd	r31, Y+14	; 0x0e
    1256:	81 81       	ldd	r24, Z+1	; 0x01
    1258:	01 c0       	rjmp	.+2      	; 0x125c <vfprintf+0x302>
    125a:	80 e3       	ldi	r24, 0x30	; 48
    125c:	f1 e0       	ldi	r31, 0x01	; 1
    125e:	8f 1a       	sub	r8, r31
    1260:	91 08       	sbc	r9, r1
    1262:	2d 85       	ldd	r18, Y+13	; 0x0d
    1264:	3e 85       	ldd	r19, Y+14	; 0x0e
    1266:	2f 5f       	subi	r18, 0xFF	; 255
    1268:	3f 4f       	sbci	r19, 0xFF	; 255
    126a:	3e 87       	std	Y+14, r19	; 0x0e
    126c:	2d 87       	std	Y+13, r18	; 0x0d
    126e:	80 16       	cp	r8, r16
    1270:	91 06       	cpc	r9, r17
    1272:	2c f0       	brlt	.+10     	; 0x127e <vfprintf+0x324>
    1274:	b7 01       	movw	r22, r14
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    127c:	d9 cf       	rjmp	.-78     	; 0x1230 <vfprintf+0x2d6>
    127e:	c8 14       	cp	r12, r8
    1280:	d9 04       	cpc	r13, r9
    1282:	41 f4       	brne	.+16     	; 0x1294 <vfprintf+0x33a>
    1284:	9a 81       	ldd	r25, Y+2	; 0x02
    1286:	96 33       	cpi	r25, 0x36	; 54
    1288:	20 f4       	brcc	.+8      	; 0x1292 <vfprintf+0x338>
    128a:	95 33       	cpi	r25, 0x35	; 53
    128c:	19 f4       	brne	.+6      	; 0x1294 <vfprintf+0x33a>
    128e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1290:	34 ff       	sbrs	r19, 4
    1292:	81 e3       	ldi	r24, 0x31	; 49
    1294:	b7 01       	movw	r22, r14
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	4e c0       	rjmp	.+156    	; 0x1336 <vfprintf+0x3dc>
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	81 33       	cpi	r24, 0x31	; 49
    129e:	19 f0       	breq	.+6      	; 0x12a6 <vfprintf+0x34c>
    12a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    12a2:	9f 7e       	andi	r25, 0xEF	; 239
    12a4:	9c 87       	std	Y+12, r25	; 0x0c
    12a6:	b7 01       	movw	r22, r14
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    12ae:	11 11       	cpse	r17, r1
    12b0:	05 c0       	rjmp	.+10     	; 0x12bc <vfprintf+0x362>
    12b2:	94 fc       	sbrc	r9, 4
    12b4:	18 c0       	rjmp	.+48     	; 0x12e6 <vfprintf+0x38c>
    12b6:	85 e6       	ldi	r24, 0x65	; 101
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	17 c0       	rjmp	.+46     	; 0x12ea <vfprintf+0x390>
    12bc:	b7 01       	movw	r22, r14
    12be:	8e e2       	ldi	r24, 0x2E	; 46
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    12c6:	1e 5f       	subi	r17, 0xFE	; 254
    12c8:	82 e0       	ldi	r24, 0x02	; 2
    12ca:	01 e0       	ldi	r16, 0x01	; 1
    12cc:	08 0f       	add	r16, r24
    12ce:	f3 01       	movw	r30, r6
    12d0:	e8 0f       	add	r30, r24
    12d2:	f1 1d       	adc	r31, r1
    12d4:	80 81       	ld	r24, Z
    12d6:	b7 01       	movw	r22, r14
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    12de:	80 2f       	mov	r24, r16
    12e0:	01 13       	cpse	r16, r17
    12e2:	f3 cf       	rjmp	.-26     	; 0x12ca <vfprintf+0x370>
    12e4:	e6 cf       	rjmp	.-52     	; 0x12b2 <vfprintf+0x358>
    12e6:	85 e4       	ldi	r24, 0x45	; 69
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	b7 01       	movw	r22, r14
    12ec:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    12f0:	d7 fc       	sbrc	r13, 7
    12f2:	06 c0       	rjmp	.+12     	; 0x1300 <vfprintf+0x3a6>
    12f4:	c1 14       	cp	r12, r1
    12f6:	d1 04       	cpc	r13, r1
    12f8:	41 f4       	brne	.+16     	; 0x130a <vfprintf+0x3b0>
    12fa:	ec 85       	ldd	r30, Y+12	; 0x0c
    12fc:	e4 ff       	sbrs	r30, 4
    12fe:	05 c0       	rjmp	.+10     	; 0x130a <vfprintf+0x3b0>
    1300:	d1 94       	neg	r13
    1302:	c1 94       	neg	r12
    1304:	d1 08       	sbc	r13, r1
    1306:	8d e2       	ldi	r24, 0x2D	; 45
    1308:	01 c0       	rjmp	.+2      	; 0x130c <vfprintf+0x3b2>
    130a:	8b e2       	ldi	r24, 0x2B	; 43
    130c:	b7 01       	movw	r22, r14
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    1314:	80 e3       	ldi	r24, 0x30	; 48
    1316:	2a e0       	ldi	r18, 0x0A	; 10
    1318:	c2 16       	cp	r12, r18
    131a:	d1 04       	cpc	r13, r1
    131c:	2c f0       	brlt	.+10     	; 0x1328 <vfprintf+0x3ce>
    131e:	8f 5f       	subi	r24, 0xFF	; 255
    1320:	fa e0       	ldi	r31, 0x0A	; 10
    1322:	cf 1a       	sub	r12, r31
    1324:	d1 08       	sbc	r13, r1
    1326:	f7 cf       	rjmp	.-18     	; 0x1316 <vfprintf+0x3bc>
    1328:	b7 01       	movw	r22, r14
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    1330:	b7 01       	movw	r22, r14
    1332:	c6 01       	movw	r24, r12
    1334:	c0 96       	adiw	r24, 0x30	; 48
    1336:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    133a:	54 c1       	rjmp	.+680    	; 0x15e4 <vfprintf+0x68a>
    133c:	83 36       	cpi	r24, 0x63	; 99
    133e:	31 f0       	breq	.+12     	; 0x134c <vfprintf+0x3f2>
    1340:	83 37       	cpi	r24, 0x73	; 115
    1342:	79 f0       	breq	.+30     	; 0x1362 <vfprintf+0x408>
    1344:	83 35       	cpi	r24, 0x53	; 83
    1346:	09 f0       	breq	.+2      	; 0x134a <vfprintf+0x3f0>
    1348:	56 c0       	rjmp	.+172    	; 0x13f6 <vfprintf+0x49c>
    134a:	20 c0       	rjmp	.+64     	; 0x138c <vfprintf+0x432>
    134c:	56 01       	movw	r10, r12
    134e:	32 e0       	ldi	r19, 0x02	; 2
    1350:	a3 0e       	add	r10, r19
    1352:	b1 1c       	adc	r11, r1
    1354:	f6 01       	movw	r30, r12
    1356:	80 81       	ld	r24, Z
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	01 e0       	ldi	r16, 0x01	; 1
    135c:	10 e0       	ldi	r17, 0x00	; 0
    135e:	63 01       	movw	r12, r6
    1360:	12 c0       	rjmp	.+36     	; 0x1386 <vfprintf+0x42c>
    1362:	56 01       	movw	r10, r12
    1364:	f2 e0       	ldi	r31, 0x02	; 2
    1366:	af 0e       	add	r10, r31
    1368:	b1 1c       	adc	r11, r1
    136a:	f6 01       	movw	r30, r12
    136c:	c0 80       	ld	r12, Z
    136e:	d1 80       	ldd	r13, Z+1	; 0x01
    1370:	96 fe       	sbrs	r9, 6
    1372:	03 c0       	rjmp	.+6      	; 0x137a <vfprintf+0x420>
    1374:	61 2f       	mov	r22, r17
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	02 c0       	rjmp	.+4      	; 0x137e <vfprintf+0x424>
    137a:	6f ef       	ldi	r22, 0xFF	; 255
    137c:	7f ef       	ldi	r23, 0xFF	; 255
    137e:	c6 01       	movw	r24, r12
    1380:	0e 94 44 0c 	call	0x1888	; 0x1888 <strnlen>
    1384:	8c 01       	movw	r16, r24
    1386:	f9 2d       	mov	r31, r9
    1388:	ff 77       	andi	r31, 0x7F	; 127
    138a:	14 c0       	rjmp	.+40     	; 0x13b4 <vfprintf+0x45a>
    138c:	56 01       	movw	r10, r12
    138e:	22 e0       	ldi	r18, 0x02	; 2
    1390:	a2 0e       	add	r10, r18
    1392:	b1 1c       	adc	r11, r1
    1394:	f6 01       	movw	r30, r12
    1396:	c0 80       	ld	r12, Z
    1398:	d1 80       	ldd	r13, Z+1	; 0x01
    139a:	96 fe       	sbrs	r9, 6
    139c:	03 c0       	rjmp	.+6      	; 0x13a4 <vfprintf+0x44a>
    139e:	61 2f       	mov	r22, r17
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <vfprintf+0x44e>
    13a4:	6f ef       	ldi	r22, 0xFF	; 255
    13a6:	7f ef       	ldi	r23, 0xFF	; 255
    13a8:	c6 01       	movw	r24, r12
    13aa:	0e 94 39 0c 	call	0x1872	; 0x1872 <strnlen_P>
    13ae:	8c 01       	movw	r16, r24
    13b0:	f9 2d       	mov	r31, r9
    13b2:	f0 68       	ori	r31, 0x80	; 128
    13b4:	9f 2e       	mov	r9, r31
    13b6:	f3 fd       	sbrc	r31, 3
    13b8:	1a c0       	rjmp	.+52     	; 0x13ee <vfprintf+0x494>
    13ba:	85 2d       	mov	r24, r5
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	08 17       	cp	r16, r24
    13c0:	19 07       	cpc	r17, r25
    13c2:	a8 f4       	brcc	.+42     	; 0x13ee <vfprintf+0x494>
    13c4:	b7 01       	movw	r22, r14
    13c6:	80 e2       	ldi	r24, 0x20	; 32
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    13ce:	5a 94       	dec	r5
    13d0:	f4 cf       	rjmp	.-24     	; 0x13ba <vfprintf+0x460>
    13d2:	f6 01       	movw	r30, r12
    13d4:	97 fc       	sbrc	r9, 7
    13d6:	85 91       	lpm	r24, Z+
    13d8:	97 fe       	sbrs	r9, 7
    13da:	81 91       	ld	r24, Z+
    13dc:	6f 01       	movw	r12, r30
    13de:	b7 01       	movw	r22, r14
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    13e6:	51 10       	cpse	r5, r1
    13e8:	5a 94       	dec	r5
    13ea:	01 50       	subi	r16, 0x01	; 1
    13ec:	11 09       	sbc	r17, r1
    13ee:	01 15       	cp	r16, r1
    13f0:	11 05       	cpc	r17, r1
    13f2:	79 f7       	brne	.-34     	; 0x13d2 <vfprintf+0x478>
    13f4:	f7 c0       	rjmp	.+494    	; 0x15e4 <vfprintf+0x68a>
    13f6:	84 36       	cpi	r24, 0x64	; 100
    13f8:	11 f0       	breq	.+4      	; 0x13fe <vfprintf+0x4a4>
    13fa:	89 36       	cpi	r24, 0x69	; 105
    13fc:	61 f5       	brne	.+88     	; 0x1456 <vfprintf+0x4fc>
    13fe:	56 01       	movw	r10, r12
    1400:	97 fe       	sbrs	r9, 7
    1402:	09 c0       	rjmp	.+18     	; 0x1416 <vfprintf+0x4bc>
    1404:	24 e0       	ldi	r18, 0x04	; 4
    1406:	a2 0e       	add	r10, r18
    1408:	b1 1c       	adc	r11, r1
    140a:	f6 01       	movw	r30, r12
    140c:	60 81       	ld	r22, Z
    140e:	71 81       	ldd	r23, Z+1	; 0x01
    1410:	82 81       	ldd	r24, Z+2	; 0x02
    1412:	93 81       	ldd	r25, Z+3	; 0x03
    1414:	0a c0       	rjmp	.+20     	; 0x142a <vfprintf+0x4d0>
    1416:	f2 e0       	ldi	r31, 0x02	; 2
    1418:	af 0e       	add	r10, r31
    141a:	b1 1c       	adc	r11, r1
    141c:	f6 01       	movw	r30, r12
    141e:	60 81       	ld	r22, Z
    1420:	71 81       	ldd	r23, Z+1	; 0x01
    1422:	07 2e       	mov	r0, r23
    1424:	00 0c       	add	r0, r0
    1426:	88 0b       	sbc	r24, r24
    1428:	99 0b       	sbc	r25, r25
    142a:	f9 2d       	mov	r31, r9
    142c:	ff 76       	andi	r31, 0x6F	; 111
    142e:	9f 2e       	mov	r9, r31
    1430:	97 ff       	sbrs	r25, 7
    1432:	09 c0       	rjmp	.+18     	; 0x1446 <vfprintf+0x4ec>
    1434:	90 95       	com	r25
    1436:	80 95       	com	r24
    1438:	70 95       	com	r23
    143a:	61 95       	neg	r22
    143c:	7f 4f       	sbci	r23, 0xFF	; 255
    143e:	8f 4f       	sbci	r24, 0xFF	; 255
    1440:	9f 4f       	sbci	r25, 0xFF	; 255
    1442:	f0 68       	ori	r31, 0x80	; 128
    1444:	9f 2e       	mov	r9, r31
    1446:	2a e0       	ldi	r18, 0x0A	; 10
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	a3 01       	movw	r20, r6
    144c:	0e 94 a7 0c 	call	0x194e	; 0x194e <__ultoa_invert>
    1450:	c8 2e       	mov	r12, r24
    1452:	c6 18       	sub	r12, r6
    1454:	3f c0       	rjmp	.+126    	; 0x14d4 <vfprintf+0x57a>
    1456:	09 2d       	mov	r16, r9
    1458:	85 37       	cpi	r24, 0x75	; 117
    145a:	21 f4       	brne	.+8      	; 0x1464 <vfprintf+0x50a>
    145c:	0f 7e       	andi	r16, 0xEF	; 239
    145e:	2a e0       	ldi	r18, 0x0A	; 10
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	1d c0       	rjmp	.+58     	; 0x149e <vfprintf+0x544>
    1464:	09 7f       	andi	r16, 0xF9	; 249
    1466:	8f 36       	cpi	r24, 0x6F	; 111
    1468:	91 f0       	breq	.+36     	; 0x148e <vfprintf+0x534>
    146a:	18 f4       	brcc	.+6      	; 0x1472 <vfprintf+0x518>
    146c:	88 35       	cpi	r24, 0x58	; 88
    146e:	59 f0       	breq	.+22     	; 0x1486 <vfprintf+0x52c>
    1470:	c3 c0       	rjmp	.+390    	; 0x15f8 <vfprintf+0x69e>
    1472:	80 37       	cpi	r24, 0x70	; 112
    1474:	19 f0       	breq	.+6      	; 0x147c <vfprintf+0x522>
    1476:	88 37       	cpi	r24, 0x78	; 120
    1478:	11 f0       	breq	.+4      	; 0x147e <vfprintf+0x524>
    147a:	be c0       	rjmp	.+380    	; 0x15f8 <vfprintf+0x69e>
    147c:	00 61       	ori	r16, 0x10	; 16
    147e:	04 ff       	sbrs	r16, 4
    1480:	09 c0       	rjmp	.+18     	; 0x1494 <vfprintf+0x53a>
    1482:	04 60       	ori	r16, 0x04	; 4
    1484:	07 c0       	rjmp	.+14     	; 0x1494 <vfprintf+0x53a>
    1486:	94 fe       	sbrs	r9, 4
    1488:	08 c0       	rjmp	.+16     	; 0x149a <vfprintf+0x540>
    148a:	06 60       	ori	r16, 0x06	; 6
    148c:	06 c0       	rjmp	.+12     	; 0x149a <vfprintf+0x540>
    148e:	28 e0       	ldi	r18, 0x08	; 8
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	05 c0       	rjmp	.+10     	; 0x149e <vfprintf+0x544>
    1494:	20 e1       	ldi	r18, 0x10	; 16
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	02 c0       	rjmp	.+4      	; 0x149e <vfprintf+0x544>
    149a:	20 e1       	ldi	r18, 0x10	; 16
    149c:	32 e0       	ldi	r19, 0x02	; 2
    149e:	56 01       	movw	r10, r12
    14a0:	07 ff       	sbrs	r16, 7
    14a2:	09 c0       	rjmp	.+18     	; 0x14b6 <vfprintf+0x55c>
    14a4:	84 e0       	ldi	r24, 0x04	; 4
    14a6:	a8 0e       	add	r10, r24
    14a8:	b1 1c       	adc	r11, r1
    14aa:	f6 01       	movw	r30, r12
    14ac:	60 81       	ld	r22, Z
    14ae:	71 81       	ldd	r23, Z+1	; 0x01
    14b0:	82 81       	ldd	r24, Z+2	; 0x02
    14b2:	93 81       	ldd	r25, Z+3	; 0x03
    14b4:	08 c0       	rjmp	.+16     	; 0x14c6 <vfprintf+0x56c>
    14b6:	f2 e0       	ldi	r31, 0x02	; 2
    14b8:	af 0e       	add	r10, r31
    14ba:	b1 1c       	adc	r11, r1
    14bc:	f6 01       	movw	r30, r12
    14be:	60 81       	ld	r22, Z
    14c0:	71 81       	ldd	r23, Z+1	; 0x01
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	a3 01       	movw	r20, r6
    14c8:	0e 94 a7 0c 	call	0x194e	; 0x194e <__ultoa_invert>
    14cc:	c8 2e       	mov	r12, r24
    14ce:	c6 18       	sub	r12, r6
    14d0:	0f 77       	andi	r16, 0x7F	; 127
    14d2:	90 2e       	mov	r9, r16
    14d4:	96 fe       	sbrs	r9, 6
    14d6:	0b c0       	rjmp	.+22     	; 0x14ee <vfprintf+0x594>
    14d8:	09 2d       	mov	r16, r9
    14da:	0e 7f       	andi	r16, 0xFE	; 254
    14dc:	c1 16       	cp	r12, r17
    14de:	50 f4       	brcc	.+20     	; 0x14f4 <vfprintf+0x59a>
    14e0:	94 fe       	sbrs	r9, 4
    14e2:	0a c0       	rjmp	.+20     	; 0x14f8 <vfprintf+0x59e>
    14e4:	92 fc       	sbrc	r9, 2
    14e6:	08 c0       	rjmp	.+16     	; 0x14f8 <vfprintf+0x59e>
    14e8:	09 2d       	mov	r16, r9
    14ea:	0e 7e       	andi	r16, 0xEE	; 238
    14ec:	05 c0       	rjmp	.+10     	; 0x14f8 <vfprintf+0x59e>
    14ee:	dc 2c       	mov	r13, r12
    14f0:	09 2d       	mov	r16, r9
    14f2:	03 c0       	rjmp	.+6      	; 0x14fa <vfprintf+0x5a0>
    14f4:	dc 2c       	mov	r13, r12
    14f6:	01 c0       	rjmp	.+2      	; 0x14fa <vfprintf+0x5a0>
    14f8:	d1 2e       	mov	r13, r17
    14fa:	04 ff       	sbrs	r16, 4
    14fc:	0d c0       	rjmp	.+26     	; 0x1518 <vfprintf+0x5be>
    14fe:	fe 01       	movw	r30, r28
    1500:	ec 0d       	add	r30, r12
    1502:	f1 1d       	adc	r31, r1
    1504:	80 81       	ld	r24, Z
    1506:	80 33       	cpi	r24, 0x30	; 48
    1508:	11 f4       	brne	.+4      	; 0x150e <vfprintf+0x5b4>
    150a:	09 7e       	andi	r16, 0xE9	; 233
    150c:	09 c0       	rjmp	.+18     	; 0x1520 <vfprintf+0x5c6>
    150e:	02 ff       	sbrs	r16, 2
    1510:	06 c0       	rjmp	.+12     	; 0x151e <vfprintf+0x5c4>
    1512:	d3 94       	inc	r13
    1514:	d3 94       	inc	r13
    1516:	04 c0       	rjmp	.+8      	; 0x1520 <vfprintf+0x5c6>
    1518:	80 2f       	mov	r24, r16
    151a:	86 78       	andi	r24, 0x86	; 134
    151c:	09 f0       	breq	.+2      	; 0x1520 <vfprintf+0x5c6>
    151e:	d3 94       	inc	r13
    1520:	03 fd       	sbrc	r16, 3
    1522:	11 c0       	rjmp	.+34     	; 0x1546 <vfprintf+0x5ec>
    1524:	00 ff       	sbrs	r16, 0
    1526:	06 c0       	rjmp	.+12     	; 0x1534 <vfprintf+0x5da>
    1528:	1c 2d       	mov	r17, r12
    152a:	d5 14       	cp	r13, r5
    152c:	80 f4       	brcc	.+32     	; 0x154e <vfprintf+0x5f4>
    152e:	15 0d       	add	r17, r5
    1530:	1d 19       	sub	r17, r13
    1532:	0d c0       	rjmp	.+26     	; 0x154e <vfprintf+0x5f4>
    1534:	d5 14       	cp	r13, r5
    1536:	58 f4       	brcc	.+22     	; 0x154e <vfprintf+0x5f4>
    1538:	b7 01       	movw	r22, r14
    153a:	80 e2       	ldi	r24, 0x20	; 32
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    1542:	d3 94       	inc	r13
    1544:	f7 cf       	rjmp	.-18     	; 0x1534 <vfprintf+0x5da>
    1546:	d5 14       	cp	r13, r5
    1548:	10 f4       	brcc	.+4      	; 0x154e <vfprintf+0x5f4>
    154a:	5d 18       	sub	r5, r13
    154c:	01 c0       	rjmp	.+2      	; 0x1550 <vfprintf+0x5f6>
    154e:	51 2c       	mov	r5, r1
    1550:	04 ff       	sbrs	r16, 4
    1552:	10 c0       	rjmp	.+32     	; 0x1574 <vfprintf+0x61a>
    1554:	b7 01       	movw	r22, r14
    1556:	80 e3       	ldi	r24, 0x30	; 48
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    155e:	02 ff       	sbrs	r16, 2
    1560:	17 c0       	rjmp	.+46     	; 0x1590 <vfprintf+0x636>
    1562:	01 fd       	sbrc	r16, 1
    1564:	03 c0       	rjmp	.+6      	; 0x156c <vfprintf+0x612>
    1566:	88 e7       	ldi	r24, 0x78	; 120
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <vfprintf+0x616>
    156c:	88 e5       	ldi	r24, 0x58	; 88
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	b7 01       	movw	r22, r14
    1572:	0c c0       	rjmp	.+24     	; 0x158c <vfprintf+0x632>
    1574:	80 2f       	mov	r24, r16
    1576:	86 78       	andi	r24, 0x86	; 134
    1578:	59 f0       	breq	.+22     	; 0x1590 <vfprintf+0x636>
    157a:	01 ff       	sbrs	r16, 1
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <vfprintf+0x628>
    157e:	8b e2       	ldi	r24, 0x2B	; 43
    1580:	01 c0       	rjmp	.+2      	; 0x1584 <vfprintf+0x62a>
    1582:	80 e2       	ldi	r24, 0x20	; 32
    1584:	07 fd       	sbrc	r16, 7
    1586:	8d e2       	ldi	r24, 0x2D	; 45
    1588:	b7 01       	movw	r22, r14
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    1590:	c1 16       	cp	r12, r17
    1592:	38 f4       	brcc	.+14     	; 0x15a2 <vfprintf+0x648>
    1594:	b7 01       	movw	r22, r14
    1596:	80 e3       	ldi	r24, 0x30	; 48
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    159e:	11 50       	subi	r17, 0x01	; 1
    15a0:	f7 cf       	rjmp	.-18     	; 0x1590 <vfprintf+0x636>
    15a2:	ca 94       	dec	r12
    15a4:	f3 01       	movw	r30, r6
    15a6:	ec 0d       	add	r30, r12
    15a8:	f1 1d       	adc	r31, r1
    15aa:	80 81       	ld	r24, Z
    15ac:	b7 01       	movw	r22, r14
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    15b4:	c1 10       	cpse	r12, r1
    15b6:	f5 cf       	rjmp	.-22     	; 0x15a2 <vfprintf+0x648>
    15b8:	15 c0       	rjmp	.+42     	; 0x15e4 <vfprintf+0x68a>
    15ba:	f4 e0       	ldi	r31, 0x04	; 4
    15bc:	f5 15       	cp	r31, r5
    15be:	60 f5       	brcc	.+88     	; 0x1618 <vfprintf+0x6be>
    15c0:	84 e0       	ldi	r24, 0x04	; 4
    15c2:	58 1a       	sub	r5, r24
    15c4:	93 fe       	sbrs	r9, 3
    15c6:	1f c0       	rjmp	.+62     	; 0x1606 <vfprintf+0x6ac>
    15c8:	01 11       	cpse	r16, r1
    15ca:	27 c0       	rjmp	.+78     	; 0x161a <vfprintf+0x6c0>
    15cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    15ce:	23 ff       	sbrs	r18, 3
    15d0:	2a c0       	rjmp	.+84     	; 0x1626 <vfprintf+0x6cc>
    15d2:	04 e5       	ldi	r16, 0x54	; 84
    15d4:	10 e0       	ldi	r17, 0x00	; 0
    15d6:	39 2d       	mov	r19, r9
    15d8:	30 71       	andi	r19, 0x10	; 16
    15da:	93 2e       	mov	r9, r19
    15dc:	f8 01       	movw	r30, r16
    15de:	84 91       	lpm	r24, Z
    15e0:	81 11       	cpse	r24, r1
    15e2:	24 c0       	rjmp	.+72     	; 0x162c <vfprintf+0x6d2>
    15e4:	55 20       	and	r5, r5
    15e6:	09 f4       	brne	.+2      	; 0x15ea <vfprintf+0x690>
    15e8:	e4 cc       	rjmp	.-1592   	; 0xfb2 <vfprintf+0x58>
    15ea:	b7 01       	movw	r22, r14
    15ec:	80 e2       	ldi	r24, 0x20	; 32
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    15f4:	5a 94       	dec	r5
    15f6:	f6 cf       	rjmp	.-20     	; 0x15e4 <vfprintf+0x68a>
    15f8:	f7 01       	movw	r30, r14
    15fa:	86 81       	ldd	r24, Z+6	; 0x06
    15fc:	97 81       	ldd	r25, Z+7	; 0x07
    15fe:	26 c0       	rjmp	.+76     	; 0x164c <vfprintf+0x6f2>
    1600:	8f ef       	ldi	r24, 0xFF	; 255
    1602:	9f ef       	ldi	r25, 0xFF	; 255
    1604:	23 c0       	rjmp	.+70     	; 0x164c <vfprintf+0x6f2>
    1606:	b7 01       	movw	r22, r14
    1608:	80 e2       	ldi	r24, 0x20	; 32
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    1610:	5a 94       	dec	r5
    1612:	51 10       	cpse	r5, r1
    1614:	f8 cf       	rjmp	.-16     	; 0x1606 <vfprintf+0x6ac>
    1616:	d8 cf       	rjmp	.-80     	; 0x15c8 <vfprintf+0x66e>
    1618:	51 2c       	mov	r5, r1
    161a:	b7 01       	movw	r22, r14
    161c:	80 2f       	mov	r24, r16
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    1624:	d3 cf       	rjmp	.-90     	; 0x15cc <vfprintf+0x672>
    1626:	08 e5       	ldi	r16, 0x58	; 88
    1628:	10 e0       	ldi	r17, 0x00	; 0
    162a:	d5 cf       	rjmp	.-86     	; 0x15d6 <vfprintf+0x67c>
    162c:	91 10       	cpse	r9, r1
    162e:	80 52       	subi	r24, 0x20	; 32
    1630:	b7 01       	movw	r22, r14
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    1638:	0f 5f       	subi	r16, 0xFF	; 255
    163a:	1f 4f       	sbci	r17, 0xFF	; 255
    163c:	cf cf       	rjmp	.-98     	; 0x15dc <vfprintf+0x682>
    163e:	23 e0       	ldi	r18, 0x03	; 3
    1640:	25 15       	cp	r18, r5
    1642:	10 f4       	brcc	.+4      	; 0x1648 <vfprintf+0x6ee>
    1644:	83 e0       	ldi	r24, 0x03	; 3
    1646:	bd cf       	rjmp	.-134    	; 0x15c2 <vfprintf+0x668>
    1648:	51 2c       	mov	r5, r1
    164a:	c0 cf       	rjmp	.-128    	; 0x15cc <vfprintf+0x672>
    164c:	60 96       	adiw	r28, 0x10	; 16
    164e:	e2 e1       	ldi	r30, 0x12	; 18
    1650:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__epilogue_restores__>

00001654 <__prologue_saves__>:
    1654:	2f 92       	push	r2
    1656:	3f 92       	push	r3
    1658:	4f 92       	push	r4
    165a:	5f 92       	push	r5
    165c:	6f 92       	push	r6
    165e:	7f 92       	push	r7
    1660:	8f 92       	push	r8
    1662:	9f 92       	push	r9
    1664:	af 92       	push	r10
    1666:	bf 92       	push	r11
    1668:	cf 92       	push	r12
    166a:	df 92       	push	r13
    166c:	ef 92       	push	r14
    166e:	ff 92       	push	r15
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	ca 1b       	sub	r28, r26
    167e:	db 0b       	sbc	r29, r27
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    168a:	09 94       	ijmp

0000168c <__epilogue_restores__>:
    168c:	2a 88       	ldd	r2, Y+18	; 0x12
    168e:	39 88       	ldd	r3, Y+17	; 0x11
    1690:	48 88       	ldd	r4, Y+16	; 0x10
    1692:	5f 84       	ldd	r5, Y+15	; 0x0f
    1694:	6e 84       	ldd	r6, Y+14	; 0x0e
    1696:	7d 84       	ldd	r7, Y+13	; 0x0d
    1698:	8c 84       	ldd	r8, Y+12	; 0x0c
    169a:	9b 84       	ldd	r9, Y+11	; 0x0b
    169c:	aa 84       	ldd	r10, Y+10	; 0x0a
    169e:	b9 84       	ldd	r11, Y+9	; 0x09
    16a0:	c8 84       	ldd	r12, Y+8	; 0x08
    16a2:	df 80       	ldd	r13, Y+7	; 0x07
    16a4:	ee 80       	ldd	r14, Y+6	; 0x06
    16a6:	fd 80       	ldd	r15, Y+5	; 0x05
    16a8:	0c 81       	ldd	r16, Y+4	; 0x04
    16aa:	1b 81       	ldd	r17, Y+3	; 0x03
    16ac:	aa 81       	ldd	r26, Y+2	; 0x02
    16ae:	b9 81       	ldd	r27, Y+1	; 0x01
    16b0:	ce 0f       	add	r28, r30
    16b2:	d1 1d       	adc	r29, r1
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	f8 94       	cli
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	cd bf       	out	0x3d, r28	; 61
    16be:	ed 01       	movw	r28, r26
    16c0:	08 95       	ret

000016c2 <__ftoa_engine>:
    16c2:	28 30       	cpi	r18, 0x08	; 8
    16c4:	08 f0       	brcs	.+2      	; 0x16c8 <__ftoa_engine+0x6>
    16c6:	27 e0       	ldi	r18, 0x07	; 7
    16c8:	33 27       	eor	r19, r19
    16ca:	da 01       	movw	r26, r20
    16cc:	99 0f       	add	r25, r25
    16ce:	31 1d       	adc	r19, r1
    16d0:	87 fd       	sbrc	r24, 7
    16d2:	91 60       	ori	r25, 0x01	; 1
    16d4:	00 96       	adiw	r24, 0x00	; 0
    16d6:	61 05       	cpc	r22, r1
    16d8:	71 05       	cpc	r23, r1
    16da:	39 f4       	brne	.+14     	; 0x16ea <__ftoa_engine+0x28>
    16dc:	32 60       	ori	r19, 0x02	; 2
    16de:	2e 5f       	subi	r18, 0xFE	; 254
    16e0:	3d 93       	st	X+, r19
    16e2:	30 e3       	ldi	r19, 0x30	; 48
    16e4:	2a 95       	dec	r18
    16e6:	e1 f7       	brne	.-8      	; 0x16e0 <__ftoa_engine+0x1e>
    16e8:	08 95       	ret
    16ea:	9f 3f       	cpi	r25, 0xFF	; 255
    16ec:	30 f0       	brcs	.+12     	; 0x16fa <__ftoa_engine+0x38>
    16ee:	80 38       	cpi	r24, 0x80	; 128
    16f0:	71 05       	cpc	r23, r1
    16f2:	61 05       	cpc	r22, r1
    16f4:	09 f0       	breq	.+2      	; 0x16f8 <__ftoa_engine+0x36>
    16f6:	3c 5f       	subi	r19, 0xFC	; 252
    16f8:	3c 5f       	subi	r19, 0xFC	; 252
    16fa:	3d 93       	st	X+, r19
    16fc:	91 30       	cpi	r25, 0x01	; 1
    16fe:	08 f0       	brcs	.+2      	; 0x1702 <__ftoa_engine+0x40>
    1700:	80 68       	ori	r24, 0x80	; 128
    1702:	91 1d       	adc	r25, r1
    1704:	df 93       	push	r29
    1706:	cf 93       	push	r28
    1708:	1f 93       	push	r17
    170a:	0f 93       	push	r16
    170c:	ff 92       	push	r15
    170e:	ef 92       	push	r14
    1710:	19 2f       	mov	r17, r25
    1712:	98 7f       	andi	r25, 0xF8	; 248
    1714:	96 95       	lsr	r25
    1716:	e9 2f       	mov	r30, r25
    1718:	96 95       	lsr	r25
    171a:	96 95       	lsr	r25
    171c:	e9 0f       	add	r30, r25
    171e:	ff 27       	eor	r31, r31
    1720:	ea 54       	subi	r30, 0x4A	; 74
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	99 27       	eor	r25, r25
    1726:	33 27       	eor	r19, r19
    1728:	ee 24       	eor	r14, r14
    172a:	ff 24       	eor	r15, r15
    172c:	a7 01       	movw	r20, r14
    172e:	e7 01       	movw	r28, r14
    1730:	05 90       	lpm	r0, Z+
    1732:	08 94       	sec
    1734:	07 94       	ror	r0
    1736:	28 f4       	brcc	.+10     	; 0x1742 <__ftoa_engine+0x80>
    1738:	36 0f       	add	r19, r22
    173a:	e7 1e       	adc	r14, r23
    173c:	f8 1e       	adc	r15, r24
    173e:	49 1f       	adc	r20, r25
    1740:	51 1d       	adc	r21, r1
    1742:	66 0f       	add	r22, r22
    1744:	77 1f       	adc	r23, r23
    1746:	88 1f       	adc	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	06 94       	lsr	r0
    174c:	a1 f7       	brne	.-24     	; 0x1736 <__ftoa_engine+0x74>
    174e:	05 90       	lpm	r0, Z+
    1750:	07 94       	ror	r0
    1752:	28 f4       	brcc	.+10     	; 0x175e <__ftoa_engine+0x9c>
    1754:	e7 0e       	add	r14, r23
    1756:	f8 1e       	adc	r15, r24
    1758:	49 1f       	adc	r20, r25
    175a:	56 1f       	adc	r21, r22
    175c:	c1 1d       	adc	r28, r1
    175e:	77 0f       	add	r23, r23
    1760:	88 1f       	adc	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	66 1f       	adc	r22, r22
    1766:	06 94       	lsr	r0
    1768:	a1 f7       	brne	.-24     	; 0x1752 <__ftoa_engine+0x90>
    176a:	05 90       	lpm	r0, Z+
    176c:	07 94       	ror	r0
    176e:	28 f4       	brcc	.+10     	; 0x177a <__ftoa_engine+0xb8>
    1770:	f8 0e       	add	r15, r24
    1772:	49 1f       	adc	r20, r25
    1774:	56 1f       	adc	r21, r22
    1776:	c7 1f       	adc	r28, r23
    1778:	d1 1d       	adc	r29, r1
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	66 1f       	adc	r22, r22
    1780:	77 1f       	adc	r23, r23
    1782:	06 94       	lsr	r0
    1784:	a1 f7       	brne	.-24     	; 0x176e <__ftoa_engine+0xac>
    1786:	05 90       	lpm	r0, Z+
    1788:	07 94       	ror	r0
    178a:	20 f4       	brcc	.+8      	; 0x1794 <__ftoa_engine+0xd2>
    178c:	49 0f       	add	r20, r25
    178e:	56 1f       	adc	r21, r22
    1790:	c7 1f       	adc	r28, r23
    1792:	d8 1f       	adc	r29, r24
    1794:	99 0f       	add	r25, r25
    1796:	66 1f       	adc	r22, r22
    1798:	77 1f       	adc	r23, r23
    179a:	88 1f       	adc	r24, r24
    179c:	06 94       	lsr	r0
    179e:	a9 f7       	brne	.-22     	; 0x178a <__ftoa_engine+0xc8>
    17a0:	84 91       	lpm	r24, Z
    17a2:	10 95       	com	r17
    17a4:	17 70       	andi	r17, 0x07	; 7
    17a6:	41 f0       	breq	.+16     	; 0x17b8 <__ftoa_engine+0xf6>
    17a8:	d6 95       	lsr	r29
    17aa:	c7 95       	ror	r28
    17ac:	57 95       	ror	r21
    17ae:	47 95       	ror	r20
    17b0:	f7 94       	ror	r15
    17b2:	e7 94       	ror	r14
    17b4:	1a 95       	dec	r17
    17b6:	c1 f7       	brne	.-16     	; 0x17a8 <__ftoa_engine+0xe6>
    17b8:	ec e5       	ldi	r30, 0x5C	; 92
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	68 94       	set
    17be:	15 90       	lpm	r1, Z+
    17c0:	15 91       	lpm	r17, Z+
    17c2:	35 91       	lpm	r19, Z+
    17c4:	65 91       	lpm	r22, Z+
    17c6:	95 91       	lpm	r25, Z+
    17c8:	05 90       	lpm	r0, Z+
    17ca:	7f e2       	ldi	r23, 0x2F	; 47
    17cc:	73 95       	inc	r23
    17ce:	e1 18       	sub	r14, r1
    17d0:	f1 0a       	sbc	r15, r17
    17d2:	43 0b       	sbc	r20, r19
    17d4:	56 0b       	sbc	r21, r22
    17d6:	c9 0b       	sbc	r28, r25
    17d8:	d0 09       	sbc	r29, r0
    17da:	c0 f7       	brcc	.-16     	; 0x17cc <__ftoa_engine+0x10a>
    17dc:	e1 0c       	add	r14, r1
    17de:	f1 1e       	adc	r15, r17
    17e0:	43 1f       	adc	r20, r19
    17e2:	56 1f       	adc	r21, r22
    17e4:	c9 1f       	adc	r28, r25
    17e6:	d0 1d       	adc	r29, r0
    17e8:	7e f4       	brtc	.+30     	; 0x1808 <__ftoa_engine+0x146>
    17ea:	70 33       	cpi	r23, 0x30	; 48
    17ec:	11 f4       	brne	.+4      	; 0x17f2 <__ftoa_engine+0x130>
    17ee:	8a 95       	dec	r24
    17f0:	e6 cf       	rjmp	.-52     	; 0x17be <__ftoa_engine+0xfc>
    17f2:	e8 94       	clt
    17f4:	01 50       	subi	r16, 0x01	; 1
    17f6:	30 f0       	brcs	.+12     	; 0x1804 <__ftoa_engine+0x142>
    17f8:	08 0f       	add	r16, r24
    17fa:	0a f4       	brpl	.+2      	; 0x17fe <__ftoa_engine+0x13c>
    17fc:	00 27       	eor	r16, r16
    17fe:	02 17       	cp	r16, r18
    1800:	08 f4       	brcc	.+2      	; 0x1804 <__ftoa_engine+0x142>
    1802:	20 2f       	mov	r18, r16
    1804:	23 95       	inc	r18
    1806:	02 2f       	mov	r16, r18
    1808:	7a 33       	cpi	r23, 0x3A	; 58
    180a:	28 f0       	brcs	.+10     	; 0x1816 <__ftoa_engine+0x154>
    180c:	79 e3       	ldi	r23, 0x39	; 57
    180e:	7d 93       	st	X+, r23
    1810:	2a 95       	dec	r18
    1812:	e9 f7       	brne	.-6      	; 0x180e <__ftoa_engine+0x14c>
    1814:	10 c0       	rjmp	.+32     	; 0x1836 <__ftoa_engine+0x174>
    1816:	7d 93       	st	X+, r23
    1818:	2a 95       	dec	r18
    181a:	89 f6       	brne	.-94     	; 0x17be <__ftoa_engine+0xfc>
    181c:	06 94       	lsr	r0
    181e:	97 95       	ror	r25
    1820:	67 95       	ror	r22
    1822:	37 95       	ror	r19
    1824:	17 95       	ror	r17
    1826:	17 94       	ror	r1
    1828:	e1 18       	sub	r14, r1
    182a:	f1 0a       	sbc	r15, r17
    182c:	43 0b       	sbc	r20, r19
    182e:	56 0b       	sbc	r21, r22
    1830:	c9 0b       	sbc	r28, r25
    1832:	d0 09       	sbc	r29, r0
    1834:	98 f0       	brcs	.+38     	; 0x185c <__ftoa_engine+0x19a>
    1836:	23 95       	inc	r18
    1838:	7e 91       	ld	r23, -X
    183a:	73 95       	inc	r23
    183c:	7a 33       	cpi	r23, 0x3A	; 58
    183e:	08 f0       	brcs	.+2      	; 0x1842 <__ftoa_engine+0x180>
    1840:	70 e3       	ldi	r23, 0x30	; 48
    1842:	7c 93       	st	X, r23
    1844:	20 13       	cpse	r18, r16
    1846:	b8 f7       	brcc	.-18     	; 0x1836 <__ftoa_engine+0x174>
    1848:	7e 91       	ld	r23, -X
    184a:	70 61       	ori	r23, 0x10	; 16
    184c:	7d 93       	st	X+, r23
    184e:	30 f0       	brcs	.+12     	; 0x185c <__ftoa_engine+0x19a>
    1850:	83 95       	inc	r24
    1852:	71 e3       	ldi	r23, 0x31	; 49
    1854:	7d 93       	st	X+, r23
    1856:	70 e3       	ldi	r23, 0x30	; 48
    1858:	2a 95       	dec	r18
    185a:	e1 f7       	brne	.-8      	; 0x1854 <__ftoa_engine+0x192>
    185c:	11 24       	eor	r1, r1
    185e:	ef 90       	pop	r14
    1860:	ff 90       	pop	r15
    1862:	0f 91       	pop	r16
    1864:	1f 91       	pop	r17
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	99 27       	eor	r25, r25
    186c:	87 fd       	sbrc	r24, 7
    186e:	90 95       	com	r25
    1870:	08 95       	ret

00001872 <strnlen_P>:
    1872:	fc 01       	movw	r30, r24
    1874:	05 90       	lpm	r0, Z+
    1876:	61 50       	subi	r22, 0x01	; 1
    1878:	70 40       	sbci	r23, 0x00	; 0
    187a:	01 10       	cpse	r0, r1
    187c:	d8 f7       	brcc	.-10     	; 0x1874 <strnlen_P+0x2>
    187e:	80 95       	com	r24
    1880:	90 95       	com	r25
    1882:	8e 0f       	add	r24, r30
    1884:	9f 1f       	adc	r25, r31
    1886:	08 95       	ret

00001888 <strnlen>:
    1888:	fc 01       	movw	r30, r24
    188a:	61 50       	subi	r22, 0x01	; 1
    188c:	70 40       	sbci	r23, 0x00	; 0
    188e:	01 90       	ld	r0, Z+
    1890:	01 10       	cpse	r0, r1
    1892:	d8 f7       	brcc	.-10     	; 0x188a <strnlen+0x2>
    1894:	80 95       	com	r24
    1896:	90 95       	com	r25
    1898:	8e 0f       	add	r24, r30
    189a:	9f 1f       	adc	r25, r31
    189c:	08 95       	ret

0000189e <fputc>:
    189e:	0f 93       	push	r16
    18a0:	1f 93       	push	r17
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	fb 01       	movw	r30, r22
    18a8:	23 81       	ldd	r18, Z+3	; 0x03
    18aa:	21 fd       	sbrc	r18, 1
    18ac:	03 c0       	rjmp	.+6      	; 0x18b4 <fputc+0x16>
    18ae:	8f ef       	ldi	r24, 0xFF	; 255
    18b0:	9f ef       	ldi	r25, 0xFF	; 255
    18b2:	2c c0       	rjmp	.+88     	; 0x190c <fputc+0x6e>
    18b4:	22 ff       	sbrs	r18, 2
    18b6:	16 c0       	rjmp	.+44     	; 0x18e4 <fputc+0x46>
    18b8:	46 81       	ldd	r20, Z+6	; 0x06
    18ba:	57 81       	ldd	r21, Z+7	; 0x07
    18bc:	24 81       	ldd	r18, Z+4	; 0x04
    18be:	35 81       	ldd	r19, Z+5	; 0x05
    18c0:	42 17       	cp	r20, r18
    18c2:	53 07       	cpc	r21, r19
    18c4:	44 f4       	brge	.+16     	; 0x18d6 <fputc+0x38>
    18c6:	a0 81       	ld	r26, Z
    18c8:	b1 81       	ldd	r27, Z+1	; 0x01
    18ca:	9d 01       	movw	r18, r26
    18cc:	2f 5f       	subi	r18, 0xFF	; 255
    18ce:	3f 4f       	sbci	r19, 0xFF	; 255
    18d0:	31 83       	std	Z+1, r19	; 0x01
    18d2:	20 83       	st	Z, r18
    18d4:	8c 93       	st	X, r24
    18d6:	26 81       	ldd	r18, Z+6	; 0x06
    18d8:	37 81       	ldd	r19, Z+7	; 0x07
    18da:	2f 5f       	subi	r18, 0xFF	; 255
    18dc:	3f 4f       	sbci	r19, 0xFF	; 255
    18de:	37 83       	std	Z+7, r19	; 0x07
    18e0:	26 83       	std	Z+6, r18	; 0x06
    18e2:	14 c0       	rjmp	.+40     	; 0x190c <fputc+0x6e>
    18e4:	8b 01       	movw	r16, r22
    18e6:	ec 01       	movw	r28, r24
    18e8:	fb 01       	movw	r30, r22
    18ea:	00 84       	ldd	r0, Z+8	; 0x08
    18ec:	f1 85       	ldd	r31, Z+9	; 0x09
    18ee:	e0 2d       	mov	r30, r0
    18f0:	09 95       	icall
    18f2:	89 2b       	or	r24, r25
    18f4:	e1 f6       	brne	.-72     	; 0x18ae <fputc+0x10>
    18f6:	d8 01       	movw	r26, r16
    18f8:	16 96       	adiw	r26, 0x06	; 6
    18fa:	8d 91       	ld	r24, X+
    18fc:	9c 91       	ld	r25, X
    18fe:	17 97       	sbiw	r26, 0x07	; 7
    1900:	01 96       	adiw	r24, 0x01	; 1
    1902:	17 96       	adiw	r26, 0x07	; 7
    1904:	9c 93       	st	X, r25
    1906:	8e 93       	st	-X, r24
    1908:	16 97       	sbiw	r26, 0x06	; 6
    190a:	ce 01       	movw	r24, r28
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	08 95       	ret

00001916 <vsprintf>:
    1916:	ae e0       	ldi	r26, 0x0E	; 14
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e1 e9       	ldi	r30, 0x91	; 145
    191c:	fc e0       	ldi	r31, 0x0C	; 12
    191e:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <__prologue_saves__+0x1c>
    1922:	8c 01       	movw	r16, r24
    1924:	86 e0       	ldi	r24, 0x06	; 6
    1926:	8c 83       	std	Y+4, r24	; 0x04
    1928:	1a 83       	std	Y+2, r17	; 0x02
    192a:	09 83       	std	Y+1, r16	; 0x01
    192c:	8f ef       	ldi	r24, 0xFF	; 255
    192e:	9f e7       	ldi	r25, 0x7F	; 127
    1930:	9e 83       	std	Y+6, r25	; 0x06
    1932:	8d 83       	std	Y+5, r24	; 0x05
    1934:	ce 01       	movw	r24, r28
    1936:	01 96       	adiw	r24, 0x01	; 1
    1938:	0e 94 ad 07 	call	0xf5a	; 0xf5a <vfprintf>
    193c:	ef 81       	ldd	r30, Y+7	; 0x07
    193e:	f8 85       	ldd	r31, Y+8	; 0x08
    1940:	e0 0f       	add	r30, r16
    1942:	f1 1f       	adc	r31, r17
    1944:	10 82       	st	Z, r1
    1946:	2e 96       	adiw	r28, 0x0e	; 14
    1948:	e4 e0       	ldi	r30, 0x04	; 4
    194a:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <__epilogue_restores__+0x1c>

0000194e <__ultoa_invert>:
    194e:	fa 01       	movw	r30, r20
    1950:	aa 27       	eor	r26, r26
    1952:	28 30       	cpi	r18, 0x08	; 8
    1954:	51 f1       	breq	.+84     	; 0x19aa <__ultoa_invert+0x5c>
    1956:	20 31       	cpi	r18, 0x10	; 16
    1958:	81 f1       	breq	.+96     	; 0x19ba <__ultoa_invert+0x6c>
    195a:	e8 94       	clt
    195c:	6f 93       	push	r22
    195e:	6e 7f       	andi	r22, 0xFE	; 254
    1960:	6e 5f       	subi	r22, 0xFE	; 254
    1962:	7f 4f       	sbci	r23, 0xFF	; 255
    1964:	8f 4f       	sbci	r24, 0xFF	; 255
    1966:	9f 4f       	sbci	r25, 0xFF	; 255
    1968:	af 4f       	sbci	r26, 0xFF	; 255
    196a:	b1 e0       	ldi	r27, 0x01	; 1
    196c:	3e d0       	rcall	.+124    	; 0x19ea <__ultoa_invert+0x9c>
    196e:	b4 e0       	ldi	r27, 0x04	; 4
    1970:	3c d0       	rcall	.+120    	; 0x19ea <__ultoa_invert+0x9c>
    1972:	67 0f       	add	r22, r23
    1974:	78 1f       	adc	r23, r24
    1976:	89 1f       	adc	r24, r25
    1978:	9a 1f       	adc	r25, r26
    197a:	a1 1d       	adc	r26, r1
    197c:	68 0f       	add	r22, r24
    197e:	79 1f       	adc	r23, r25
    1980:	8a 1f       	adc	r24, r26
    1982:	91 1d       	adc	r25, r1
    1984:	a1 1d       	adc	r26, r1
    1986:	6a 0f       	add	r22, r26
    1988:	71 1d       	adc	r23, r1
    198a:	81 1d       	adc	r24, r1
    198c:	91 1d       	adc	r25, r1
    198e:	a1 1d       	adc	r26, r1
    1990:	20 d0       	rcall	.+64     	; 0x19d2 <__ultoa_invert+0x84>
    1992:	09 f4       	brne	.+2      	; 0x1996 <__ultoa_invert+0x48>
    1994:	68 94       	set
    1996:	3f 91       	pop	r19
    1998:	2a e0       	ldi	r18, 0x0A	; 10
    199a:	26 9f       	mul	r18, r22
    199c:	11 24       	eor	r1, r1
    199e:	30 19       	sub	r19, r0
    19a0:	30 5d       	subi	r19, 0xD0	; 208
    19a2:	31 93       	st	Z+, r19
    19a4:	de f6       	brtc	.-74     	; 0x195c <__ultoa_invert+0xe>
    19a6:	cf 01       	movw	r24, r30
    19a8:	08 95       	ret
    19aa:	46 2f       	mov	r20, r22
    19ac:	47 70       	andi	r20, 0x07	; 7
    19ae:	40 5d       	subi	r20, 0xD0	; 208
    19b0:	41 93       	st	Z+, r20
    19b2:	b3 e0       	ldi	r27, 0x03	; 3
    19b4:	0f d0       	rcall	.+30     	; 0x19d4 <__ultoa_invert+0x86>
    19b6:	c9 f7       	brne	.-14     	; 0x19aa <__ultoa_invert+0x5c>
    19b8:	f6 cf       	rjmp	.-20     	; 0x19a6 <__ultoa_invert+0x58>
    19ba:	46 2f       	mov	r20, r22
    19bc:	4f 70       	andi	r20, 0x0F	; 15
    19be:	40 5d       	subi	r20, 0xD0	; 208
    19c0:	4a 33       	cpi	r20, 0x3A	; 58
    19c2:	18 f0       	brcs	.+6      	; 0x19ca <__ultoa_invert+0x7c>
    19c4:	49 5d       	subi	r20, 0xD9	; 217
    19c6:	31 fd       	sbrc	r19, 1
    19c8:	40 52       	subi	r20, 0x20	; 32
    19ca:	41 93       	st	Z+, r20
    19cc:	02 d0       	rcall	.+4      	; 0x19d2 <__ultoa_invert+0x84>
    19ce:	a9 f7       	brne	.-22     	; 0x19ba <__ultoa_invert+0x6c>
    19d0:	ea cf       	rjmp	.-44     	; 0x19a6 <__ultoa_invert+0x58>
    19d2:	b4 e0       	ldi	r27, 0x04	; 4
    19d4:	a6 95       	lsr	r26
    19d6:	97 95       	ror	r25
    19d8:	87 95       	ror	r24
    19da:	77 95       	ror	r23
    19dc:	67 95       	ror	r22
    19de:	ba 95       	dec	r27
    19e0:	c9 f7       	brne	.-14     	; 0x19d4 <__ultoa_invert+0x86>
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	61 05       	cpc	r22, r1
    19e6:	71 05       	cpc	r23, r1
    19e8:	08 95       	ret
    19ea:	9b 01       	movw	r18, r22
    19ec:	ac 01       	movw	r20, r24
    19ee:	0a 2e       	mov	r0, r26
    19f0:	06 94       	lsr	r0
    19f2:	57 95       	ror	r21
    19f4:	47 95       	ror	r20
    19f6:	37 95       	ror	r19
    19f8:	27 95       	ror	r18
    19fa:	ba 95       	dec	r27
    19fc:	c9 f7       	brne	.-14     	; 0x19f0 <__ultoa_invert+0xa2>
    19fe:	62 0f       	add	r22, r18
    1a00:	73 1f       	adc	r23, r19
    1a02:	84 1f       	adc	r24, r20
    1a04:	95 1f       	adc	r25, r21
    1a06:	a0 1d       	adc	r26, r0
    1a08:	08 95       	ret

00001a0a <_exit>:
    1a0a:	f8 94       	cli

00001a0c <__stop_program>:
    1a0c:	ff cf       	rjmp	.-2      	; 0x1a0c <__stop_program>
