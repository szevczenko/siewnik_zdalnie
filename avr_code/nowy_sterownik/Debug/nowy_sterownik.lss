
nowy_sterownik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000082  00800060  00001a38  00001acc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000307  008000e2  008000e2  00001b4e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001bac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002861  00000000  00000000  00001eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013c9  00000000  00000000  00004711  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001673  00000000  00000000  00005ada  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000065c  00000000  00000000  00007150  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000df8  00000000  00000000  000077ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014a9  00000000  00000000  000085a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00009a4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      1c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      28:	0c 94 95 04 	jmp	0x92a	; 0x92a <__vector_10>
      2c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 77 05 	jmp	0xaee	; 0xaee <__vector_13>
      38:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__vector_14>
      3c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	6e 61       	ori	r22, 0x1E	; 30
      56:	6e 00       	.word	0x006e	; ????

00000058 <__c.2332>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf e5       	ldi	r28, 0x5F	; 95
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	10 e0       	ldi	r17, 0x00	; 0
     164:	a0 e6       	ldi	r26, 0x60	; 96
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	e8 e3       	ldi	r30, 0x38	; 56
     16a:	fa e1       	ldi	r31, 0x1A	; 26
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x10>
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	a2 3e       	cpi	r26, 0xE2	; 226
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0xc>

00000178 <__do_clear_bss>:
     178:	23 e0       	ldi	r18, 0x03	; 3
     17a:	a2 ee       	ldi	r26, 0xE2	; 226
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a9 3e       	cpi	r26, 0xE9	; 233
     184:	b2 07       	cpc	r27, r18
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 09 01 	call	0x212	; 0x212 <main>
     18c:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <_exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <debug_msg>:

#if L_DEBUG
#include <stdio.h>
char debug_buff[64];
void debug_msg( const char* format, ... )
{
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62
     19c:	ae 01       	movw	r20, r28
     19e:	4b 5f       	subi	r20, 0xFB	; 251
     1a0:	5f 4f       	sbci	r21, 0xFF	; 255
     1a2:	fa 01       	movw	r30, r20
     1a4:	61 91       	ld	r22, Z+
     1a6:	71 91       	ld	r23, Z+
     1a8:	af 01       	movw	r20, r30
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
     1aa:	8b e8       	ldi	r24, 0x8B	; 139
     1ac:	92 e0       	ldi	r25, 0x02	; 2
     1ae:	0e 94 a0 0c 	call	0x1940	; 0x1940 <vsprintf>
	va_end( arglist );
	for (int i = 0; i < strlen(debug_buff); i++) {
     1b2:	eb e8       	ldi	r30, 0x8B	; 139
     1b4:	f2 e0       	ldi	r31, 0x02	; 2
     1b6:	df 01       	movw	r26, r30
     1b8:	0d 90       	ld	r0, X+
     1ba:	00 20       	and	r0, r0
     1bc:	e9 f7       	brne	.-6      	; 0x1b8 <debug_msg+0x24>
     1be:	9d 01       	movw	r18, r26
     1c0:	21 50       	subi	r18, 0x01	; 1
     1c2:	31 09       	sbc	r19, r1
     1c4:	08 c0       	rjmp	.+16     	; 0x1d6 <debug_msg+0x42>
		if (debug_buff[i] == '\n') {
     1c6:	81 91       	ld	r24, Z+
     1c8:	8a 30       	cpi	r24, 0x0A	; 10
     1ca:	29 f4       	brne	.+10     	; 0x1d6 <debug_msg+0x42>
			uart_puts("AT: ");
     1cc:	80 e6       	ldi	r24, 0x60	; 96
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart0_puts>
			break;
     1d4:	03 c0       	rjmp	.+6      	; 0x1dc <debug_msg+0x48>
{
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
	va_end( arglist );
	for (int i = 0; i < strlen(debug_buff); i++) {
     1d6:	e2 17       	cp	r30, r18
     1d8:	f3 07       	cpc	r31, r19
     1da:	a9 f7       	brne	.-22     	; 0x1c6 <debug_msg+0x32>
			uart_puts("AT: ");
			break;
		}
	}
	#if USE_USART
	uart_puts(debug_buff);
     1dc:	8b e8       	ldi	r24, 0x8B	; 139
     1de:	92 e0       	ldi	r25, 0x02	; 2
     1e0:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart0_puts>
	#endif
}
     1e4:	df 91       	pop	r29
     1e6:	cf 91       	pop	r28
     1e8:	08 95       	ret

000001ea <init_pin>:
uint8_t servo_vibro_value;

void init_pin(void)
{
	//UART_TX_PIN
	DDRD |= (1<<1);
     1ea:	89 9a       	sbi	0x11, 1	; 17
     1ec:	08 95       	ret

000001ee <init_driver>:
}

void init_driver(void)
{
	#if USE_USART
	uart_init(UART_BAUD_SELECT(57600, F_CPU));
     1ee:	88 e0       	ldi	r24, 0x08	; 8
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 d1 05 	call	0xba2	; 0xba2 <uart0_init>
	#endif
	timer0_init(TIM0_PRESCALER, TIM0_ARR);
     1f6:	62 e3       	ldi	r22, 0x32	; 50
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	0e 94 ca 04 	call	0x994	; 0x994 <timer0_init>
	init_system();
     1fe:	0e 94 86 04 	call	0x90c	; 0x90c <init_system>
	init_measure();
     202:	0e 94 2f 03 	call	0x65e	; 0x65e <init_measure>
	at_communication_init();
     206:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <at_communication_init>
	CLEAR_PIN(SFIOR, PUD);
     20a:	80 b7       	in	r24, 0x30	; 48
     20c:	8b 7f       	andi	r24, 0xFB	; 251
     20e:	80 bf       	out	0x30, r24	; 48
     210:	08 95       	ret

00000212 <main>:

uint32_t tets_cnt;
int main(void)
{
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	0e 94 41 04 	call	0x882	; 0x882 <servo_init>
	#endif
	init_pin();
     218:	0e 94 f5 00 	call	0x1ea	; 0x1ea <init_pin>
	sei();
     21c:	78 94       	sei
	init_driver();
     21e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <init_driver>
	debug_msg("/-----------START SYSTEM------------/\n");
     222:	85 e6       	ldi	r24, 0x65	; 101
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	9f 93       	push	r25
     228:	8f 93       	push	r24
     22a:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
	on_system();
     22e:	0e 94 87 04 	call	0x90e	; 0x90e <on_system>
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
		atm_com_process();
		at_read_data_process();
		#if SERIAL_PLOT && USE_USART
		uart_process();
		#endif
		if (tets_cnt < mktime.ms) {
     236:	c3 ee       	ldi	r28, 0xE3	; 227
     238:	d3 e0       	ldi	r29, 0x03	; 3
			debug_msg("ATMEGA \n");
     23a:	0c e8       	ldi	r16, 0x8C	; 140
     23c:	10 e0       	ldi	r17, 0x00	; 0
	debug_msg("/-----------START SYSTEM------------/\n");
	on_system();
    /* Replace with your application code */
    while (1) 
    {
		dcmotor_process(motor_value);
     23e:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <motor_value>
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 03 03 	call	0x606	; 0x606 <dcmotor_process>
		#if CONFIG_DEVICE_SIEWNIK
		servo_process(servo_vibro_value);
     248:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <servo_vibro_value>
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <servo_process>
		#endif
		measure_process();
     252:	0e 94 4d 03 	call	0x69a	; 0x69a <measure_process>
		accumulator_process();
     256:	0e 94 59 01 	call	0x2b2	; 0x2b2 <accumulator_process>
		atm_com_process();
     25a:	0e 94 b0 02 	call	0x560	; 0x560 <atm_com_process>
		at_read_data_process();
     25e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <at_read_data_process>
		#if SERIAL_PLOT && USE_USART
		uart_process();
		#endif
		if (tets_cnt < mktime.ms) {
     262:	4a 81       	ldd	r20, Y+2	; 0x02
     264:	5b 81       	ldd	r21, Y+3	; 0x03
     266:	6c 81       	ldd	r22, Y+4	; 0x04
     268:	7d 81       	ldd	r23, Y+5	; 0x05
     26a:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <tets_cnt>
     26e:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <tets_cnt+0x1>
     272:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <tets_cnt+0x2>
     276:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <tets_cnt+0x3>
     27a:	84 17       	cp	r24, r20
     27c:	95 07       	cpc	r25, r21
     27e:	a6 07       	cpc	r26, r22
     280:	b7 07       	cpc	r27, r23
     282:	e8 f6       	brcc	.-70     	; 0x23e <main+0x2c>
			debug_msg("ATMEGA \n");
     284:	1f 93       	push	r17
     286:	0f 93       	push	r16
     288:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
			tets_cnt = mktime.ms + 1000;
     28c:	8a 81       	ldd	r24, Y+2	; 0x02
     28e:	9b 81       	ldd	r25, Y+3	; 0x03
     290:	ac 81       	ldd	r26, Y+4	; 0x04
     292:	bd 81       	ldd	r27, Y+5	; 0x05
     294:	88 51       	subi	r24, 0x18	; 24
     296:	9c 4f       	sbci	r25, 0xFC	; 252
     298:	af 4f       	sbci	r26, 0xFF	; 255
     29a:	bf 4f       	sbci	r27, 0xFF	; 255
     29c:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <tets_cnt>
     2a0:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <tets_cnt+0x1>
     2a4:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <tets_cnt+0x2>
     2a8:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <tets_cnt+0x3>
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	c6 cf       	rjmp	.-116    	; 0x23e <main+0x2c>

000002b2 <accumulator_process>:
void accumulator_process(void)
{
	
	static timer_t accumulator_timer;
	
	if(accumulator_timer < mktime.ms)
     2b2:	40 91 e5 03 	lds	r20, 0x03E5	; 0x8003e5 <mktime+0x2>
     2b6:	50 91 e6 03 	lds	r21, 0x03E6	; 0x8003e6 <mktime+0x3>
     2ba:	60 91 e7 03 	lds	r22, 0x03E7	; 0x8003e7 <mktime+0x4>
     2be:	70 91 e8 03 	lds	r23, 0x03E8	; 0x8003e8 <mktime+0x5>
     2c2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__data_end>
     2c6:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <__data_end+0x1>
     2ca:	a0 91 e4 00 	lds	r26, 0x00E4	; 0x8000e4 <__data_end+0x2>
     2ce:	b0 91 e5 00 	lds	r27, 0x00E5	; 0x8000e5 <__data_end+0x3>
     2d2:	84 17       	cp	r24, r20
     2d4:	95 07       	cpc	r25, r21
     2d6:	a6 07       	cpc	r26, r22
     2d8:	b7 07       	cpc	r27, r23
     2da:	b8 f4       	brcc	.+46     	; 0x30a <accumulator_process+0x58>
	{
		filtered_accum_adc_val = measure_get_filtered_value(MEAS_ACCUM);
     2dc:	83 e0       	ldi	r24, 0x03	; 3
     2de:	0e 94 28 04 	call	0x850	; 0x850 <measure_get_filtered_value>
		accumulator_timer = mktime.ms + 100;
     2e2:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <mktime+0x2>
     2e6:	90 91 e6 03 	lds	r25, 0x03E6	; 0x8003e6 <mktime+0x3>
     2ea:	a0 91 e7 03 	lds	r26, 0x03E7	; 0x8003e7 <mktime+0x4>
     2ee:	b0 91 e8 03 	lds	r27, 0x03E8	; 0x8003e8 <mktime+0x5>
     2f2:	8c 59       	subi	r24, 0x9C	; 156
     2f4:	9f 4f       	sbci	r25, 0xFF	; 255
     2f6:	af 4f       	sbci	r26, 0xFF	; 255
     2f8:	bf 4f       	sbci	r27, 0xFF	; 255
     2fa:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__data_end>
     2fe:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <__data_end+0x1>
     302:	a0 93 e4 00 	sts	0x00E4, r26	; 0x8000e4 <__data_end+0x2>
     306:	b0 93 e5 00 	sts	0x00E5, r27	; 0x8000e5 <__data_end+0x3>
     30a:	08 95       	ret

0000030c <adc_setchannel>:
/*
 * set an adc channel
 */
void adc_setchannel(uint8_t channel)
{
	ADCSRA &= ~(1 << ADEN);
     30c:	37 98       	cbi	0x06, 7	; 6
	ADMUX = (ADMUX & 0xf8) | (channel & 0x07); //set channel
     30e:	97 b1       	in	r25, 0x07	; 7
     310:	98 7f       	andi	r25, 0xF8	; 248
     312:	87 70       	andi	r24, 0x07	; 7
     314:	89 2b       	or	r24, r25
     316:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN);
     318:	37 9a       	sbi	0x06, 7	; 6
     31a:	08 95       	ret

0000031c <adc_readsel>:
/*
 * read from selected adc channel
 */
uint16_t adc_readsel(void)
{
	ADCSRA |= (1 << ADSC); // Start conversion
     31c:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & _BV(ADSC)); 
     31e:	36 99       	sbic	0x06, 6	; 6
     320:	fe cf       	rjmp	.-4      	; 0x31e <adc_readsel+0x2>
	//while( !(ADCSRA & (1<<ADIF)) ); // Wait for conversion to complete
	uint16_t adc = ADC;
     322:	84 b1       	in	r24, 0x04	; 4
     324:	95 b1       	in	r25, 0x05	; 5
	//ADCSRA |= (1 << ADIF); // Clear ADIF by writing one to it
	return(adc);
}
     326:	08 95       	ret

00000328 <adc_read>:
/*
 * read from adc channel
 */
uint16_t adc_read(uint8_t channel)
{
	adc_setchannel(channel);
     328:	0e 94 86 01 	call	0x30c	; 0x30c <adc_setchannel>
	return adc_readsel();
     32c:	0e 94 8e 01 	call	0x31c	; 0x31c <adc_readsel>
}
     330:	08 95       	ret

00000332 <clear_msg>:
uint16_t atmega_get_data(atmega_data_read_t data_type) {
	if (data_type < AT_R_LAST_POSITION) {
		return data_read[data_type];
	}
	return 0;
}
     332:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <byte_received>
     336:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <byte_received+0x1>
     33a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <byte_received+0x2>
     33e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <byte_received+0x3>
     342:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <cmd>
     346:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <data_len>
     34a:	8e ee       	ldi	r24, 0xEE	; 238
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 36 05 	call	0xa6c	; 0xa6c <evTime_off>
     352:	08 95       	ret

00000354 <at_send_data>:
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	16 16       	cp	r1, r22
     35e:	17 06       	cpc	r1, r23
     360:	54 f4       	brge	.+20     	; 0x376 <at_send_data+0x22>
     362:	8c 01       	movw	r16, r24
     364:	ec 01       	movw	r28, r24
     366:	06 0f       	add	r16, r22
     368:	17 1f       	adc	r17, r23
     36a:	89 91       	ld	r24, Y+
     36c:	0e 94 07 06 	call	0xc0e	; 0xc0e <uart0_putc>
     370:	c0 17       	cp	r28, r16
     372:	d1 07       	cpc	r29, r17
     374:	d1 f7       	brne	.-12     	; 0x36a <at_send_data+0x16>
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	1f 91       	pop	r17
     37c:	0f 91       	pop	r16
     37e:	08 95       	ret

00000380 <at_write_data>:
     380:	ef ec       	ldi	r30, 0xCF	; 207
     382:	f2 e0       	ldi	r31, 0x02	; 2
     384:	8e ed       	ldi	r24, 0xDE	; 222
     386:	80 83       	st	Z, r24
     388:	86 e0       	ldi	r24, 0x06	; 6
     38a:	81 83       	std	Z+1, r24	; 0x01
     38c:	ab ef       	ldi	r26, 0xFB	; 251
     38e:	b0 e0       	ldi	r27, 0x00	; 0
     390:	e1 ed       	ldi	r30, 0xD1	; 209
     392:	f2 e0       	ldi	r31, 0x02	; 2
     394:	27 ed       	ldi	r18, 0xD7	; 215
     396:	32 e0       	ldi	r19, 0x02	; 2
     398:	8d 91       	ld	r24, X+
     39a:	81 93       	st	Z+, r24
     39c:	e2 17       	cp	r30, r18
     39e:	f3 07       	cpc	r31, r19
     3a0:	d9 f7       	brne	.-10     	; 0x398 <at_write_data+0x18>
     3a2:	68 e0       	ldi	r22, 0x08	; 8
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	8f ec       	ldi	r24, 0xCF	; 207
     3a8:	92 e0       	ldi	r25, 0x02	; 2
     3aa:	0e 94 aa 01 	call	0x354	; 0x354 <at_send_data>
     3ae:	08 95       	ret

000003b0 <at_read_byte>:
		atm_timer = mktime.ms + 5;
		
	}
}

void at_read_byte(uint8_t byte) {
     3b0:	cf 92       	push	r12
     3b2:	df 92       	push	r13
     3b4:	ef 92       	push	r14
     3b6:	ff 92       	push	r15
     3b8:	0f 93       	push	r16
     3ba:	1f 93       	push	r17
	if (byte_received == 0) {
     3bc:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <byte_received>
     3c0:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <byte_received+0x1>
     3c4:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <byte_received+0x2>
     3c8:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <byte_received+0x3>
     3cc:	41 15       	cp	r20, r1
     3ce:	51 05       	cpc	r21, r1
     3d0:	61 05       	cpc	r22, r1
     3d2:	71 05       	cpc	r23, r1
     3d4:	b9 f4       	brne	.+46     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		cmd = byte;
     3d6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <cmd>
		byte_received++;
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	a0 e0       	ldi	r26, 0x00	; 0
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <byte_received>
     3e6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <byte_received+0x1>
     3ea:	a0 93 05 01 	sts	0x0105, r26	; 0x800105 <byte_received+0x2>
     3ee:	b0 93 06 01 	sts	0x0106, r27	; 0x800106 <byte_received+0x3>
		evTime_start(&xTimers, 200);
     3f2:	48 ec       	ldi	r20, 0xC8	; 200
     3f4:	50 e0       	ldi	r21, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	70 e0       	ldi	r23, 0x00	; 0
     3fa:	8e ee       	ldi	r24, 0xEE	; 238
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	0e 94 fe 04 	call	0x9fc	; 0x9fc <evTime_start>
		return;
     402:	6a c0       	rjmp	.+212    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
	}

	switch(cmd) {
     404:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <cmd>
     408:	9e 3e       	cpi	r25, 0xEE	; 238
     40a:	09 f4       	brne	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40c:	60 c0       	rjmp	.+192    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     40e:	9e 3f       	cpi	r25, 0xFE	; 254
     410:	09 f4       	brne	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     412:	58 c0       	rjmp	.+176    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     414:	9e 3d       	cpi	r25, 0xDE	; 222
     416:	09 f0       	breq	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     418:	5d c0       	rjmp	.+186    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
		case START_FRAME_WRITE:
		if (byte_received == 1) {
     41a:	41 30       	cpi	r20, 0x01	; 1
     41c:	51 05       	cpc	r21, r1
     41e:	61 05       	cpc	r22, r1
     420:	71 05       	cpc	r23, r1
     422:	19 f5       	brne	.+70     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
			data_len = byte;
     424:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <data_len>
			byte_received++;
     428:	42 e0       	ldi	r20, 0x02	; 2
     42a:	50 e0       	ldi	r21, 0x00	; 0
     42c:	60 e0       	ldi	r22, 0x00	; 0
     42e:	70 e0       	ldi	r23, 0x00	; 0
     430:	40 93 03 01 	sts	0x0103, r20	; 0x800103 <byte_received>
     434:	50 93 04 01 	sts	0x0104, r21	; 0x800104 <byte_received+0x1>
     438:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <byte_received+0x2>
     43c:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <byte_received+0x3>
			if (data_len != sizeof(data_read)) {
     440:	88 30       	cpi	r24, 0x08	; 8
     442:	51 f0       	breq	.+20     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
				clear_msg();
     444:	0e 94 99 01 	call	0x332	; 0x332 <clear_msg>
				debug_msg("FRAME BAD LEN\n\r");
     448:	85 e9       	ldi	r24, 0x95	; 149
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	9f 93       	push	r25
     44e:	8f 93       	push	r24
     450:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
			}
			evTime_start(&xTimers, 200);
     458:	48 ec       	ldi	r20, 0xC8	; 200
     45a:	50 e0       	ldi	r21, 0x00	; 0
     45c:	60 e0       	ldi	r22, 0x00	; 0
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	8e ee       	ldi	r24, 0xEE	; 238
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 fe 04 	call	0x9fc	; 0x9fc <evTime_start>
     468:	37 c0       	rjmp	.+110    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
		}
		else if (byte_received - 2 < data_len) {
     46a:	00 91 01 01 	lds	r16, 0x0101	; 0x800101 <data_len>
     46e:	10 e0       	ldi	r17, 0x00	; 0
     470:	20 e0       	ldi	r18, 0x00	; 0
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	6a 01       	movw	r12, r20
     476:	7b 01       	movw	r14, r22
     478:	92 e0       	ldi	r25, 0x02	; 2
     47a:	c9 1a       	sub	r12, r25
     47c:	d1 08       	sbc	r13, r1
     47e:	e1 08       	sbc	r14, r1
     480:	f1 08       	sbc	r15, r1
     482:	c0 16       	cp	r12, r16
     484:	d1 06       	cpc	r13, r17
     486:	e2 06       	cpc	r14, r18
     488:	f3 06       	cpc	r15, r19
     48a:	c8 f4       	brcc	.+50     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			uint8_t *pnt = (uint8_t *)data_read;
			pnt[byte_received - 2] = byte;
     48c:	fa 01       	movw	r30, r20
     48e:	ef 50       	subi	r30, 0x0F	; 15
     490:	ff 4f       	sbci	r31, 0xFF	; 255
     492:	80 83       	st	Z, r24
			byte_received++;
     494:	4f 5f       	subi	r20, 0xFF	; 255
     496:	5f 4f       	sbci	r21, 0xFF	; 255
     498:	6f 4f       	sbci	r22, 0xFF	; 255
     49a:	7f 4f       	sbci	r23, 0xFF	; 255
     49c:	40 93 03 01 	sts	0x0103, r20	; 0x800103 <byte_received>
     4a0:	50 93 04 01 	sts	0x0104, r21	; 0x800104 <byte_received+0x1>
     4a4:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <byte_received+0x2>
     4a8:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <byte_received+0x3>
			if (byte_received - 2 == data_len) {
				/* Verify data */
			}
			evTime_start(&xTimers, 200);
     4ac:	48 ec       	ldi	r20, 0xC8	; 200
     4ae:	50 e0       	ldi	r21, 0x00	; 0
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	8e ee       	ldi	r24, 0xEE	; 238
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 fe 04 	call	0x9fc	; 0x9fc <evTime_start>
     4bc:	0d c0       	rjmp	.+26     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
		}
		else {
			/* End receive data or unknown error */
			clear_msg();
     4be:	0e 94 99 01 	call	0x332	; 0x332 <clear_msg>
     4c2:	0a c0       	rjmp	.+20     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
		}
		break;

		case START_FRAME_READ:
		/* SEND BUFF data_write */
		at_write_data();
     4c4:	0e 94 c0 01 	call	0x380	; 0x380 <at_write_data>
		clear_msg();
     4c8:	0e 94 99 01 	call	0x332	; 0x332 <clear_msg>
		break;
     4cc:	05 c0       	rjmp	.+10     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>

		case START_FRAME_CMD:
		/* Nothing for host */
		clear_msg();
     4ce:	0e 94 99 01 	call	0x332	; 0x332 <clear_msg>
		break;
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>

		default:
		//debug_msg("FRAME BAD START\n\r");
		clear_msg();
     4d4:	0e 94 99 01 	call	0x332	; 0x332 <clear_msg>
	}
}
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	df 90       	pop	r13
     4e2:	cf 90       	pop	r12
     4e4:	08 95       	ret

000004e6 <at_read_data_process>:
	
}

void at_read_data_process(void) {
	static uint32_t atm_timer;
	if (atm_timer < mktime.ms) {
     4e6:	40 91 e5 03 	lds	r20, 0x03E5	; 0x8003e5 <mktime+0x2>
     4ea:	50 91 e6 03 	lds	r21, 0x03E6	; 0x8003e6 <mktime+0x3>
     4ee:	60 91 e7 03 	lds	r22, 0x03E7	; 0x8003e7 <mktime+0x4>
     4f2:	70 91 e8 03 	lds	r23, 0x03E8	; 0x8003e8 <mktime+0x5>
     4f6:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <atm_timer.1834>
     4fa:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <atm_timer.1834+0x1>
     4fe:	a0 91 ec 00 	lds	r26, 0x00EC	; 0x8000ec <atm_timer.1834+0x2>
     502:	b0 91 ed 00 	lds	r27, 0x00ED	; 0x8000ed <atm_timer.1834+0x3>
     506:	84 17       	cp	r24, r20
     508:	95 07       	cpc	r25, r21
     50a:	a6 07       	cpc	r26, r22
     50c:	b7 07       	cpc	r27, r23
     50e:	38 f5       	brcc	.+78     	; 0x55e <at_read_data_process+0x78>
		
		uint8_t byte, error_val;
		uint16_t data = uart_getc();
     510:	0e 94 e7 05 	call	0xbce	; 0xbce <uart0_getc>
		if (error_val == UART_NO_DATA) {
			atm_timer = mktime.ms + 50;
			return;
		}
		
		at_read_byte(byte);
     514:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <at_read_byte>
		
		if (evTime_check(&xTimers)) {
     518:	8e ee       	ldi	r24, 0xEE	; 238
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 16 05 	call	0xa2c	; 0xa2c <evTime_check>
     520:	89 2b       	or	r24, r25
     522:	51 f0       	breq	.+20     	; 0x538 <at_read_data_process+0x52>
}

static void vTimerCallback( evTime *xTimer )
{
	(void)xTimer;
	clear_msg();
     524:	0e 94 99 01 	call	0x332	; 0x332 <clear_msg>
	debug_msg("vTimerCallback/n/r");
     528:	85 ea       	ldi	r24, 0xA5	; 165
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	9f 93       	push	r25
     52e:	8f 93       	push	r24
     530:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
		at_read_byte(byte);
		
		if (evTime_check(&xTimers)) {
			vTimerCallback(&xTimers);
		}
		atm_timer = mktime.ms + 5;
     538:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <mktime+0x2>
     53c:	90 91 e6 03 	lds	r25, 0x03E6	; 0x8003e6 <mktime+0x3>
     540:	a0 91 e7 03 	lds	r26, 0x03E7	; 0x8003e7 <mktime+0x4>
     544:	b0 91 e8 03 	lds	r27, 0x03E8	; 0x8003e8 <mktime+0x5>
     548:	05 96       	adiw	r24, 0x05	; 5
     54a:	a1 1d       	adc	r26, r1
     54c:	b1 1d       	adc	r27, r1
     54e:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <atm_timer.1834>
     552:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <atm_timer.1834+0x1>
     556:	a0 93 ec 00 	sts	0x00EC, r26	; 0x8000ec <atm_timer.1834+0x2>
     55a:	b0 93 ed 00 	sts	0x00ED, r27	; 0x8000ed <atm_timer.1834+0x3>
     55e:	08 95       	ret

00000560 <atm_com_process>:
	}
}

void atm_com_process(void) {
	static uint32_t atm_timer;
	if (atm_timer < mktime.ms)
     560:	40 91 e5 03 	lds	r20, 0x03E5	; 0x8003e5 <mktime+0x2>
     564:	50 91 e6 03 	lds	r21, 0x03E6	; 0x8003e6 <mktime+0x3>
     568:	60 91 e7 03 	lds	r22, 0x03E7	; 0x8003e7 <mktime+0x4>
     56c:	70 91 e8 03 	lds	r23, 0x03E8	; 0x8003e8 <mktime+0x5>
     570:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <atm_timer.1850>
     574:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <atm_timer.1850+0x1>
     578:	a0 91 e8 00 	lds	r26, 0x00E8	; 0x8000e8 <atm_timer.1850+0x2>
     57c:	b0 91 e9 00 	lds	r27, 0x00E9	; 0x8000e9 <atm_timer.1850+0x3>
     580:	84 17       	cp	r24, r20
     582:	95 07       	cpc	r25, r21
     584:	a6 07       	cpc	r26, r22
     586:	b7 07       	cpc	r27, r23
     588:	20 f5       	brcc	.+72     	; 0x5d2 <atm_com_process+0x72>
	{
		/* Do poprawy */
		data_write[AT_W_MEAS_ACCUM] = 123;//(uint16_t)accum_get_voltage();
     58a:	eb ef       	ldi	r30, 0xFB	; 251
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	8b e7       	ldi	r24, 0x7B	; 123
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	91 83       	std	Z+1, r25	; 0x01
     594:	80 83       	st	Z, r24
		data_write[AT_W_MEAS_MOTOR] = 321;//(uint16_t)measure_get_current(MEAS_MOTOR, MOTOR_RESISTOR);
     596:	81 e4       	ldi	r24, 0x41	; 65
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	93 83       	std	Z+3, r25	; 0x03
     59c:	82 83       	std	Z+2, r24	; 0x02
		data_write[AT_W_MEAS_SERVO] = 4095;//(uint16_t)measure_get_filtered_value(MEAS_SERVO);
     59e:	8f ef       	ldi	r24, 0xFF	; 255
     5a0:	9f e0       	ldi	r25, 0x0F	; 15
     5a2:	95 83       	std	Z+5, r25	; 0x05
     5a4:	84 83       	std	Z+4, r24	; 0x04
		at_write_data();
     5a6:	0e 94 c0 01 	call	0x380	; 0x380 <at_write_data>
		atm_timer = mktime.ms + 200;
     5aa:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <mktime+0x2>
     5ae:	90 91 e6 03 	lds	r25, 0x03E6	; 0x8003e6 <mktime+0x3>
     5b2:	a0 91 e7 03 	lds	r26, 0x03E7	; 0x8003e7 <mktime+0x4>
     5b6:	b0 91 e8 03 	lds	r27, 0x03E8	; 0x8003e8 <mktime+0x5>
     5ba:	88 53       	subi	r24, 0x38	; 56
     5bc:	9f 4f       	sbci	r25, 0xFF	; 255
     5be:	af 4f       	sbci	r26, 0xFF	; 255
     5c0:	bf 4f       	sbci	r27, 0xFF	; 255
     5c2:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <atm_timer.1850>
     5c6:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <atm_timer.1850+0x1>
     5ca:	a0 93 e8 00 	sts	0x00E8, r26	; 0x8000e8 <atm_timer.1850+0x2>
     5ce:	b0 93 e9 00 	sts	0x00E9, r27	; 0x8000e9 <atm_timer.1850+0x3>
     5d2:	08 95       	ret

000005d4 <at_communication_init>:
	}
}


void at_communication_init(void) {
	evTime_init(&xTimers);
     5d4:	8e ee       	ldi	r24, 0xEE	; 238
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <evTime_init>
     5dc:	08 95       	ret

000005de <dcmotorpwm_init>:
	else 
	{
		//debug_msg("dcmotor canot start\n");
		return 0;
	}
}
     5de:	88 eb       	ldi	r24, 0xB8	; 184
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	9f 93       	push	r25
     5e4:	8f 93       	push	r24
     5e6:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
     5ea:	83 ed       	ldi	r24, 0xD3	; 211
     5ec:	93 e0       	ldi	r25, 0x03	; 3
     5ee:	0e 94 f6 04 	call	0x9ec	; 0x9ec <evTime_init>
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <motorD>
     5f8:	94 98       	cbi	0x12, 4	; 18
     5fa:	15 bc       	out	0x25, r1	; 37
     5fc:	8f 9a       	sbi	0x11, 7	; 17
     5fe:	97 9a       	sbi	0x12, 7	; 18
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	08 95       	ret

00000606 <dcmotor_process>:

void dcmotor_process(uint16_t value)
{
     606:	cf 93       	push	r28
     608:	c8 2f       	mov	r28, r24
	static evTime dcmotor_timer;
	if (evTime_process_period(&dcmotor_timer, 150))
     60a:	46 e9       	ldi	r20, 0x96	; 150
     60c:	50 e0       	ldi	r21, 0x00	; 0
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	87 e0       	ldi	r24, 0x07	; 7
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	0e 94 40 05 	call	0xa80	; 0xa80 <evTime_process_period>
     61a:	89 2b       	or	r24, r25
     61c:	61 f0       	breq	.+24     	; 0x636 <dcmotor_process+0x30>
	{
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
     61e:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <motorD>
     622:	82 30       	cpi	r24, 0x02	; 2
     624:	19 f0       	breq	.+6      	; 0x62c <dcmotor_process+0x26>
     626:	84 30       	cpi	r24, 0x04	; 4
     628:	19 f0       	breq	.+6      	; 0x630 <dcmotor_process+0x2a>
     62a:	05 c0       	rjmp	.+10     	; 0x636 <dcmotor_process+0x30>
		{
			case MOTOR_ON:
			OCR2 = value;
     62c:	c3 bd       	out	0x23, r28	; 35
			break;
     62e:	03 c0       	rjmp	.+6      	; 0x636 <dcmotor_process+0x30>

			case MOTOR_OFF:
			break;

			case MOTOR_AXELERATE:
			motorD.state = MOTOR_ON; //!!
     630:	82 e0       	ldi	r24, 0x02	; 2
     632:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <motorD>
		
	}
	#if !TEST_APP
	
	#endif
}
     636:	cf 91       	pop	r28
     638:	08 95       	ret

0000063a <filtered_value>:
static uint16_t s_o_t_adc;


static uint16_t filtered_value(uint16_t *tab, uint8_t size)
{
	uint16_t ret_val = *tab;
     63a:	fc 01       	movw	r30, r24
     63c:	20 81       	ld	r18, Z
     63e:	31 81       	ldd	r19, Z+1	; 0x01
	for (uint8_t i = 1; i<size; i++)
     640:	62 30       	cpi	r22, 0x02	; 2
     642:	58 f0       	brcs	.+22     	; 0x65a <filtered_value+0x20>
     644:	32 96       	adiw	r30, 0x02	; 2
     646:	91 e0       	ldi	r25, 0x01	; 1
	{
		ret_val = (ret_val + tab[i])/2;
     648:	41 91       	ld	r20, Z+
     64a:	51 91       	ld	r21, Z+
     64c:	24 0f       	add	r18, r20
     64e:	35 1f       	adc	r19, r21
     650:	36 95       	lsr	r19
     652:	27 95       	ror	r18


static uint16_t filtered_value(uint16_t *tab, uint8_t size)
{
	uint16_t ret_val = *tab;
	for (uint8_t i = 1; i<size; i++)
     654:	9f 5f       	subi	r25, 0xFF	; 255
     656:	69 13       	cpse	r22, r25
     658:	f7 cf       	rjmp	.-18     	; 0x648 <filtered_value+0xe>
	{
		ret_val = (ret_val + tab[i])/2;
	}
	return ret_val;
}
     65a:	c9 01       	movw	r24, r18
     65c:	08 95       	ret

0000065e <init_measure>:

void init_measure(void)
{
     65e:	e0 e5       	ldi	r30, 0x50	; 80
     660:	f1 e0       	ldi	r31, 0x01	; 1
     662:	28 e7       	ldi	r18, 0x78	; 120
     664:	31 e0       	ldi	r19, 0x01	; 1
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
     666:	81 ef       	ldi	r24, 0xF1	; 241
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	81 93       	st	Z+, r24
     66c:	91 93       	st	Z+, r25
	return ret_val;
}

void init_measure(void)
{
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
     66e:	2e 17       	cp	r18, r30
     670:	3f 07       	cpc	r19, r31
     672:	d9 f7       	brne	.-10     	; 0x66a <init_measure+0xc>
     674:	ef e2       	ldi	r30, 0x2F	; 47
     676:	f1 e0       	ldi	r31, 0x01	; 1
     678:	8d e4       	ldi	r24, 0x4D	; 77
     67a:	91 e0       	ldi	r25, 0x01	; 1
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
	{
		motor_f_table[i] = 0;
     67c:	11 92       	st	Z+, r1
     67e:	11 92       	st	Z+, r1
{
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
     680:	8e 17       	cp	r24, r30
     682:	9f 07       	cpc	r25, r31
     684:	d9 f7       	brne	.-10     	; 0x67c <init_measure+0x1e>
     686:	e7 e1       	ldi	r30, 0x17	; 23
     688:	f1 e0       	ldi	r31, 0x01	; 1
     68a:	8b e2       	ldi	r24, 0x2B	; 43
     68c:	91 e0       	ldi	r25, 0x01	; 1
	{
		motor_f_table[i] = 0;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_S_SIZE; i++)
	{
		s_o_t_f_table[i] = 0;
     68e:	11 92       	st	Z+, r1
     690:	11 92       	st	Z+, r1
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
	{
		motor_f_table[i] = 0;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_S_SIZE; i++)
     692:	8e 17       	cp	r24, r30
     694:	9f 07       	cpc	r25, r31
     696:	d9 f7       	brne	.-10     	; 0x68e <init_measure+0x30>
	{
		s_o_t_f_table[i] = 0;
	}
}
     698:	08 95       	ret

0000069a <measure_process>:
static timer_t measure_timer;
static uint32_t debug_msg_counter;
void measure_process(void)
{
     69a:	cf 92       	push	r12
     69c:	df 92       	push	r13
     69e:	ef 92       	push	r14
     6a0:	ff 92       	push	r15
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
	if (measure_timer < mktime.ms)
     6a6:	40 91 e5 03 	lds	r20, 0x03E5	; 0x8003e5 <mktime+0x2>
     6aa:	50 91 e6 03 	lds	r21, 0x03E6	; 0x8003e6 <mktime+0x3>
     6ae:	60 91 e7 03 	lds	r22, 0x03E7	; 0x8003e7 <mktime+0x4>
     6b2:	70 91 e8 03 	lds	r23, 0x03E8	; 0x8003e8 <mktime+0x5>
     6b6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <measure_timer>
     6ba:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <measure_timer+0x1>
     6be:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <measure_timer+0x2>
     6c2:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <measure_timer+0x3>
     6c6:	84 17       	cp	r24, r20
     6c8:	95 07       	cpc	r25, r21
     6ca:	a6 07       	cpc	r26, r22
     6cc:	b7 07       	cpc	r27, r23
     6ce:	08 f0       	brcs	.+2      	; 0x6d2 <measure_process+0x38>
     6d0:	b8 c0       	rjmp	.+368    	; 0x842 <measure_process+0x1a8>
	{
		measure_timer = mktime.ms + 20;
     6d2:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <mktime+0x2>
     6d6:	90 91 e6 03 	lds	r25, 0x03E6	; 0x8003e6 <mktime+0x3>
     6da:	a0 91 e7 03 	lds	r26, 0x03E7	; 0x8003e7 <mktime+0x4>
     6de:	b0 91 e8 03 	lds	r27, 0x03E8	; 0x8003e8 <mktime+0x5>
     6e2:	44 96       	adiw	r24, 0x14	; 20
     6e4:	a1 1d       	adc	r26, r1
     6e6:	b1 1d       	adc	r27, r1
     6e8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <measure_timer>
     6ec:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <measure_timer+0x1>
     6f0:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <measure_timer+0x2>
     6f4:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <measure_timer+0x3>
		accum_adc = adc_read(ACCUMULATOR_ADC_CH); 
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	0e 94 94 01 	call	0x328	; 0x328 <adc_read>
     6fe:	ec 01       	movw	r28, r24
		#if CONFIG_DEVICE_SOLARKA
		#endif
		#if CONFIG_DEVICE_SIEWNIK
		accum_adc += motor_filter_value*0.27; //motor_filter_value*0.0075*1025/5/5.7
     700:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <motor_filter_value>
     704:	70 91 4e 01 	lds	r23, 0x014E	; 0x80014e <motor_filter_value+0x1>
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__floatunsisf>
     710:	21 e7       	ldi	r18, 0x71	; 113
     712:	3d e3       	ldi	r19, 0x3D	; 61
     714:	4a e8       	ldi	r20, 0x8A	; 138
     716:	5e e3       	ldi	r21, 0x3E	; 62
     718:	0e 94 55 07 	call	0xeaa	; 0xeaa <__mulsf3>
     71c:	6b 01       	movw	r12, r22
     71e:	7c 01       	movw	r14, r24
     720:	be 01       	movw	r22, r28
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__floatunsisf>
     72a:	9b 01       	movw	r18, r22
     72c:	ac 01       	movw	r20, r24
     72e:	c7 01       	movw	r24, r14
     730:	b6 01       	movw	r22, r12
     732:	0e 94 2c 06 	call	0xc58	; 0xc58 <__addsf3>
     736:	0e 94 98 06 	call	0xd30	; 0xd30 <__fixunssfsi>
     73a:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <accum_adc+0x1>
     73e:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <accum_adc>
		#endif
		accumulator_tab[iteration_adc_accum_table] = accum_adc;
     742:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <iteration_adc_accum_table>
     746:	e2 2f       	mov	r30, r18
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	ee 0f       	add	r30, r30
     74c:	ff 1f       	adc	r31, r31
     74e:	e0 5b       	subi	r30, 0xB0	; 176
     750:	fe 4f       	sbci	r31, 0xFE	; 254
     752:	71 83       	std	Z+1, r23	; 0x01
     754:	60 83       	st	Z, r22
		
		iteration_adc_accum_table++;
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	82 0f       	add	r24, r18
     75a:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <iteration_adc_accum_table>
		motor_adc = adc_read(MOTOR_ADC_CH);
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	0e 94 94 01 	call	0x328	; 0x328 <adc_read>
		if (motor_adc > 31) motor_adc = motor_adc - 31;
     764:	80 32       	cpi	r24, 0x20	; 32
     766:	91 05       	cpc	r25, r1
     768:	30 f0       	brcs	.+12     	; 0x776 <measure_process+0xdc>
     76a:	4f 97       	sbiw	r24, 0x1f	; 31
     76c:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <motor_adc+0x1>
     770:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <motor_adc>
     774:	04 c0       	rjmp	.+8      	; 0x77e <measure_process+0xe4>
		else motor_adc = 0;
     776:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <motor_adc+0x1>
     77a:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <motor_adc>
		motor_f_table[iteration_adc_motor_table] = motor_adc;
     77e:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <iteration_adc_motor_table>
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	ee 0f       	add	r30, r30
     786:	ff 1f       	adc	r31, r31
     788:	e1 5d       	subi	r30, 0xD1	; 209
     78a:	fe 4f       	sbci	r31, 0xFE	; 254
     78c:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <motor_adc>
     790:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <motor_adc+0x1>
     794:	91 83       	std	Z+1, r25	; 0x01
     796:	80 83       	st	Z, r24
		///////////////////////////////////////////////////////////
		////////// TODO isset_timer
		s_o_t_adc = adc_read(SERVO_ADC_CH);
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	0e 94 94 01 	call	0x328	; 0x328 <adc_read>
     79e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <s_o_t_adc+0x1>
     7a2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <s_o_t_adc>

		s_o_t_f_table[s_o_t_iteration_adc_table] = s_o_t_adc;
     7a6:	c0 91 16 01 	lds	r28, 0x0116	; 0x800116 <s_o_t_iteration_adc_table>
     7aa:	ec 2f       	mov	r30, r28
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	ee 0f       	add	r30, r30
     7b0:	ff 1f       	adc	r31, r31
     7b2:	e9 5e       	subi	r30, 0xE9	; 233
     7b4:	fe 4f       	sbci	r31, 0xFE	; 254
     7b6:	91 83       	std	Z+1, r25	; 0x01
     7b8:	80 83       	st	Z, r24
		iteration_adc_motor_table++;
     7ba:	d0 91 4f 01 	lds	r29, 0x014F	; 0x80014f <iteration_adc_motor_table>
     7be:	df 5f       	subi	r29, 0xFF	; 255
     7c0:	d0 93 4f 01 	sts	0x014F, r29	; 0x80014f <iteration_adc_motor_table>
		s_o_t_iteration_adc_table++;
     7c4:	cf 5f       	subi	r28, 0xFF	; 255
     7c6:	c0 93 16 01 	sts	0x0116, r28	; 0x800116 <s_o_t_iteration_adc_table>
		filtered_accum_adc_val = filtered_value(accumulator_tab, ACCUMULATOR_SIZE_TAB);
     7ca:	64 e1       	ldi	r22, 0x14	; 20
     7cc:	80 e5       	ldi	r24, 0x50	; 80
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	0e 94 1d 03 	call	0x63a	; 0x63a <filtered_value>
     7d4:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <filtered_accum_adc_val+0x1>
     7d8:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <filtered_accum_adc_val>
		motor_filter_value = filtered_value(motor_f_table, FILTER_TABLE_SIZE);
     7dc:	6f e0       	ldi	r22, 0x0F	; 15
     7de:	8f e2       	ldi	r24, 0x2F	; 47
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	0e 94 1d 03 	call	0x63a	; 0x63a <filtered_value>
     7e6:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <motor_filter_value+0x1>
     7ea:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <motor_filter_value>
		s_o_t_filter_value = filtered_value(s_o_t_f_table, FILTER_TABLE_S_SIZE);
     7ee:	6a e0       	ldi	r22, 0x0A	; 10
     7f0:	87 e1       	ldi	r24, 0x17	; 23
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	0e 94 1d 03 	call	0x63a	; 0x63a <filtered_value>
     7f8:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <s_o_t_filter_value+0x1>
     7fc:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <s_o_t_filter_value>
		debug_msg_counter++;
     800:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <debug_msg_counter>
     804:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <debug_msg_counter+0x1>
     808:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <debug_msg_counter+0x2>
     80c:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <debug_msg_counter+0x3>
     810:	01 96       	adiw	r24, 0x01	; 1
     812:	a1 1d       	adc	r26, r1
     814:	b1 1d       	adc	r27, r1
     816:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <debug_msg_counter>
     81a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <debug_msg_counter+0x1>
     81e:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <debug_msg_counter+0x2>
     822:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <debug_msg_counter+0x3>
		
		if (iteration_adc_accum_table == ACCUMULATOR_SIZE_TAB) iteration_adc_accum_table = 0;
     826:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <iteration_adc_accum_table>
     82a:	84 31       	cpi	r24, 0x14	; 20
     82c:	11 f4       	brne	.+4      	; 0x832 <measure_process+0x198>
     82e:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <iteration_adc_accum_table>
		if (s_o_t_iteration_adc_table == FILTER_TABLE_S_SIZE) s_o_t_iteration_adc_table = 0;
     832:	ca 30       	cpi	r28, 0x0A	; 10
     834:	11 f4       	brne	.+4      	; 0x83a <measure_process+0x1a0>
     836:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <s_o_t_iteration_adc_table>
		if (iteration_adc_motor_table == FILTER_TABLE_SIZE) iteration_adc_motor_table = 0;
     83a:	df 30       	cpi	r29, 0x0F	; 15
     83c:	11 f4       	brne	.+4      	; 0x842 <measure_process+0x1a8>
     83e:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <iteration_adc_motor_table>
	}
}
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	ff 90       	pop	r15
     848:	ef 90       	pop	r14
     84a:	df 90       	pop	r13
     84c:	cf 90       	pop	r12
     84e:	08 95       	ret

00000850 <measure_get_filtered_value>:

uint16_t measure_get_filtered_value(_type_measure type)
{
    switch(type)
     850:	83 30       	cpi	r24, 0x03	; 3
     852:	18 f4       	brcc	.+6      	; 0x85a <measure_get_filtered_value+0xa>
     854:	81 30       	cpi	r24, 0x01	; 1
     856:	40 f0       	brcs	.+16     	; 0x868 <__stack+0x9>
     858:	0c c0       	rjmp	.+24     	; 0x872 <__stack+0x13>
     85a:	83 30       	cpi	r24, 0x03	; 3
     85c:	79 f4       	brne	.+30     	; 0x87c <__stack+0x1d>
    {
        case MEAS_ACCUM:
        return filtered_accum_adc_val;
     85e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <filtered_accum_adc_val>
     862:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <filtered_accum_adc_val+0x1>
     866:	08 95       	ret
        break;

        case MEAS_MOTOR:
        return motor_filter_value;
     868:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <motor_filter_value>
     86c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <motor_filter_value+0x1>
     870:	08 95       	ret
        break;

        case MEAS_SERVO:
		case MEAS_TEMPERATURE:
        return s_o_t_filter_value;
     872:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <s_o_t_filter_value>
     876:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <s_o_t_filter_value+0x1>
     87a:	08 95       	ret
        break;
    }
	return 0;
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	90 e0       	ldi	r25, 0x00	; 0
}
     880:	08 95       	ret

00000882 <servo_init>:
	//debug_msg("REG: close %d, open %d, pwm %d\n", min, max, pwm);
	set_pwm(value);
}

void servo_init(uint8_t prescaler)
{
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
	(void) prescaler;
	#if !TEST_APP
	ICR1 = 19999;
     886:	2f e1       	ldi	r18, 0x1F	; 31
     888:	3e e4       	ldi	r19, 0x4E	; 78
     88a:	37 bd       	out	0x27, r19	; 39
     88c:	26 bd       	out	0x26, r18	; 38
	DDRD |= (1 << 4) | (1<<5); //?????????? TO DO
     88e:	81 b3       	in	r24, 0x11	; 17
     890:	80 63       	ori	r24, 0x30	; 48
     892:	81 bb       	out	0x11, r24	; 17
	// set TOP to 16bit
	OCR1B = 0x0;
     894:	19 bc       	out	0x29, r1	; 41
     896:	18 bc       	out	0x28, r1	; 40
	OCR1A = 0x0;
     898:	1b bc       	out	0x2b, r1	; 43
     89a:	1a bc       	out	0x2a, r1	; 42
	TCCR1A |= (1 << WGM11);
     89c:	8f b5       	in	r24, 0x2f	; 47
     89e:	82 60       	ori	r24, 0x02	; 2
     8a0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
     8a2:	8e b5       	in	r24, 0x2e	; 46
     8a4:	88 61       	ori	r24, 0x18	; 24
     8a6:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |=  (1<<COM1A1); //(1 << COM1B1) |
     8a8:	8f b5       	in	r24, 0x2f	; 47
     8aa:	80 68       	ori	r24, 0x80	; 128
     8ac:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS11);
     8ae:	8e b5       	in	r24, 0x2e	; 46
     8b0:	82 60       	ori	r24, 0x02	; 2
     8b2:	8e bd       	out	0x2e, r24	; 46
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
     8b4:	3b bd       	out	0x2b, r19	; 43
     8b6:	2a bd       	out	0x2a, r18	; 42
	TCCR1A |= (1 << WGM11);
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
	TCCR1A |=  (1<<COM1A1); //(1 << COM1B1) |
	TCCR1B |= (1<<CS11);
	set_pwm(19999);
	LED_SERVO_OFF;
     8b8:	96 98       	cbi	0x12, 6	; 18
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
     8ba:	1b bc       	out	0x2b, r1	; 43
     8bc:	1a bc       	out	0x2a, r1	; 42
	TCCR1B |= (1<<CS11);
	set_pwm(19999);
	LED_SERVO_OFF;
	#endif
	servo_set_pwm_val((uint16_t)0);
	servoD.state = SERVO_CLOSE;
     8be:	c9 ed       	ldi	r28, 0xD9	; 217
     8c0:	d3 e0       	ldi	r29, 0x03	; 3
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	88 83       	st	Y, r24
	servoD.value = 0;
     8c6:	1b 82       	std	Y+3, r1	; 0x03
	evTime_init(&servoD.timeout);
     8c8:	8d ed       	ldi	r24, 0xDD	; 221
     8ca:	93 e0       	ldi	r25, 0x03	; 3
     8cc:	0e 94 f6 04 	call	0x9ec	; 0x9ec <evTime_init>
	servoD.try_cnt = 0;
     8d0:	19 86       	std	Y+9, r1	; 0x09
	try_count = 0;
	debug_msg("SERVO: init\n");
     8d2:	84 ed       	ldi	r24, 0xD4	; 212
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	9f 93       	push	r25
     8d8:	8f 93       	push	r24
     8da:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
}
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	08 95       	ret

000008e8 <servo_process>:

void servo_process(uint16_t value)
{
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	ec 01       	movw	r28, r24
	static evTime servo_timer;
	if (evTime_process_period(&servo_timer, 75))
     8ee:	4b e4       	ldi	r20, 0x4B	; 75
     8f0:	50 e0       	ldi	r21, 0x00	; 0
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	8d e7       	ldi	r24, 0x7D	; 125
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	0e 94 40 05 	call	0xa80	; 0xa80 <evTime_process_period>
     8fe:	89 2b       	or	r24, r25
     900:	11 f0       	breq	.+4      	; 0x906 <servo_process+0x1e>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
     902:	db bd       	out	0x2b, r29	; 43
     904:	ca bd       	out	0x2a, r28	; 42
	static evTime servo_timer;
	if (evTime_process_period(&servo_timer, 75))
	{
		servo_set_pwm_val((uint16_t)value);
	}
}
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	08 95       	ret

0000090c <init_system>:
extern uint8_t servo_vibro_value;

extern uint8_t motor_value;

void init_system(void)
{
     90c:	08 95       	ret

0000090e <on_system>:

}

void on_system(void)
{
	dcmotorpwm_init();	
     90e:	0e 94 ef 02 	call	0x5de	; 0x5de <dcmotorpwm_init>
	servo_init(0);
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	0e 94 41 04 	call	0x882	; 0x882 <servo_init>
	init_measure();
     918:	0e 94 2f 03 	call	0x65e	; 0x65e <init_measure>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <system_events+0x1>
     924:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <system_events>
     928:	08 95       	ret

0000092a <__vector_10>:
	int time_to_end;
	if (evt->timer > mktime.ms)
		time_to_end = evt->timer - mktime.ms;
	else time_to_end = 0;
	return time_to_end;
}
     92a:	1f 92       	push	r1
     92c:	0f 92       	push	r0
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	0f 92       	push	r0
     932:	11 24       	eor	r1, r1
     934:	2f 93       	push	r18
     936:	8f 93       	push	r24
     938:	9f 93       	push	r25
     93a:	af 93       	push	r26
     93c:	bf 93       	push	r27
     93e:	ef 93       	push	r30
     940:	ff 93       	push	r31
     942:	e3 ee       	ldi	r30, 0xE3	; 227
     944:	f3 e0       	ldi	r31, 0x03	; 3
     946:	80 81       	ld	r24, Z
     948:	91 81       	ldd	r25, Z+1	; 0x01
     94a:	c2 96       	adiw	r24, 0x32	; 50
     94c:	91 83       	std	Z+1, r25	; 0x01
     94e:	80 83       	st	Z, r24
     950:	80 81       	ld	r24, Z
     952:	91 81       	ldd	r25, Z+1	; 0x01
     954:	88 3e       	cpi	r24, 0xE8	; 232
     956:	93 40       	sbci	r25, 0x03	; 3
     958:	88 f0       	brcs	.+34     	; 0x97c <__vector_10+0x52>
     95a:	82 81       	ldd	r24, Z+2	; 0x02
     95c:	93 81       	ldd	r25, Z+3	; 0x03
     95e:	a4 81       	ldd	r26, Z+4	; 0x04
     960:	b5 81       	ldd	r27, Z+5	; 0x05
     962:	01 96       	adiw	r24, 0x01	; 1
     964:	a1 1d       	adc	r26, r1
     966:	b1 1d       	adc	r27, r1
     968:	82 83       	std	Z+2, r24	; 0x02
     96a:	93 83       	std	Z+3, r25	; 0x03
     96c:	a4 83       	std	Z+4, r26	; 0x04
     96e:	b5 83       	std	Z+5, r27	; 0x05
     970:	80 81       	ld	r24, Z
     972:	91 81       	ldd	r25, Z+1	; 0x01
     974:	88 5e       	subi	r24, 0xE8	; 232
     976:	93 40       	sbci	r25, 0x03	; 3
     978:	91 83       	std	Z+1, r25	; 0x01
     97a:	80 83       	st	Z, r24
     97c:	ff 91       	pop	r31
     97e:	ef 91       	pop	r30
     980:	bf 91       	pop	r27
     982:	af 91       	pop	r26
     984:	9f 91       	pop	r25
     986:	8f 91       	pop	r24
     988:	2f 91       	pop	r18
     98a:	0f 90       	pop	r0
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	0f 90       	pop	r0
     990:	1f 90       	pop	r1
     992:	18 95       	reti

00000994 <timer0_init>:
     994:	93 b7       	in	r25, 0x33	; 51
     996:	98 60       	ori	r25, 0x08	; 8
     998:	93 bf       	out	0x33, r25	; 51
     99a:	6c bf       	out	0x3c, r22	; 60
     99c:	82 30       	cpi	r24, 0x02	; 2
     99e:	99 f0       	breq	.+38     	; 0x9c6 <timer0_init+0x32>
     9a0:	28 f4       	brcc	.+10     	; 0x9ac <timer0_init+0x18>
     9a2:	88 23       	and	r24, r24
     9a4:	41 f0       	breq	.+16     	; 0x9b6 <timer0_init+0x22>
     9a6:	81 30       	cpi	r24, 0x01	; 1
     9a8:	51 f0       	breq	.+20     	; 0x9be <timer0_init+0x2a>
     9aa:	19 c0       	rjmp	.+50     	; 0x9de <timer0_init+0x4a>
     9ac:	83 30       	cpi	r24, 0x03	; 3
     9ae:	79 f0       	breq	.+30     	; 0x9ce <timer0_init+0x3a>
     9b0:	84 30       	cpi	r24, 0x04	; 4
     9b2:	89 f0       	breq	.+34     	; 0x9d6 <timer0_init+0x42>
     9b4:	14 c0       	rjmp	.+40     	; 0x9de <timer0_init+0x4a>
     9b6:	83 b7       	in	r24, 0x33	; 51
     9b8:	81 60       	ori	r24, 0x01	; 1
     9ba:	83 bf       	out	0x33, r24	; 51
     9bc:	13 c0       	rjmp	.+38     	; 0x9e4 <timer0_init+0x50>
     9be:	83 b7       	in	r24, 0x33	; 51
     9c0:	82 60       	ori	r24, 0x02	; 2
     9c2:	83 bf       	out	0x33, r24	; 51
     9c4:	0f c0       	rjmp	.+30     	; 0x9e4 <timer0_init+0x50>
     9c6:	83 b7       	in	r24, 0x33	; 51
     9c8:	83 60       	ori	r24, 0x03	; 3
     9ca:	83 bf       	out	0x33, r24	; 51
     9cc:	0b c0       	rjmp	.+22     	; 0x9e4 <timer0_init+0x50>
     9ce:	83 b7       	in	r24, 0x33	; 51
     9d0:	84 60       	ori	r24, 0x04	; 4
     9d2:	83 bf       	out	0x33, r24	; 51
     9d4:	07 c0       	rjmp	.+14     	; 0x9e4 <timer0_init+0x50>
     9d6:	83 b7       	in	r24, 0x33	; 51
     9d8:	85 60       	ori	r24, 0x05	; 5
     9da:	83 bf       	out	0x33, r24	; 51
     9dc:	03 c0       	rjmp	.+6      	; 0x9e4 <timer0_init+0x50>
     9de:	83 b7       	in	r24, 0x33	; 51
     9e0:	81 60       	ori	r24, 0x01	; 1
     9e2:	83 bf       	out	0x33, r24	; 51
     9e4:	89 b7       	in	r24, 0x39	; 57
     9e6:	82 60       	ori	r24, 0x02	; 2
     9e8:	89 bf       	out	0x39, r24	; 57
     9ea:	08 95       	ret

000009ec <evTime_init>:
     9ec:	23 e0       	ldi	r18, 0x03	; 3
     9ee:	fc 01       	movw	r30, r24
     9f0:	24 83       	std	Z+4, r18	; 0x04
     9f2:	10 82       	st	Z, r1
     9f4:	11 82       	std	Z+1, r1	; 0x01
     9f6:	12 82       	std	Z+2, r1	; 0x02
     9f8:	13 82       	std	Z+3, r1	; 0x03
     9fa:	08 95       	ret

000009fc <evTime_start>:
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	21 e0       	ldi	r18, 0x01	; 1
     a02:	fc 01       	movw	r30, r24
     a04:	24 83       	std	Z+4, r18	; 0x04
     a06:	00 91 e5 03 	lds	r16, 0x03E5	; 0x8003e5 <mktime+0x2>
     a0a:	10 91 e6 03 	lds	r17, 0x03E6	; 0x8003e6 <mktime+0x3>
     a0e:	20 91 e7 03 	lds	r18, 0x03E7	; 0x8003e7 <mktime+0x4>
     a12:	30 91 e8 03 	lds	r19, 0x03E8	; 0x8003e8 <mktime+0x5>
     a16:	40 0f       	add	r20, r16
     a18:	51 1f       	adc	r21, r17
     a1a:	62 1f       	adc	r22, r18
     a1c:	73 1f       	adc	r23, r19
     a1e:	40 83       	st	Z, r20
     a20:	51 83       	std	Z+1, r21	; 0x01
     a22:	62 83       	std	Z+2, r22	; 0x02
     a24:	73 83       	std	Z+3, r23	; 0x03
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
     a2a:	08 95       	ret

00000a2c <evTime_check>:

int evTime_check(evTime * evt)
{
     a2c:	fc 01       	movw	r30, r24
	if (evt->time_state == TIMER_START)
     a2e:	84 81       	ldd	r24, Z+4	; 0x04
     a30:	81 30       	cpi	r24, 0x01	; 1
     a32:	b1 f4       	brne	.+44     	; 0xa60 <evTime_check+0x34>
	{
		if (evt->timer < mktime.ms) 
     a34:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <mktime+0x2>
     a38:	90 91 e6 03 	lds	r25, 0x03E6	; 0x8003e6 <mktime+0x3>
     a3c:	a0 91 e7 03 	lds	r26, 0x03E7	; 0x8003e7 <mktime+0x4>
     a40:	b0 91 e8 03 	lds	r27, 0x03E8	; 0x8003e8 <mktime+0x5>
     a44:	40 81       	ld	r20, Z
     a46:	51 81       	ldd	r21, Z+1	; 0x01
     a48:	62 81       	ldd	r22, Z+2	; 0x02
     a4a:	73 81       	ldd	r23, Z+3	; 0x03
     a4c:	48 17       	cp	r20, r24
     a4e:	59 07       	cpc	r21, r25
     a50:	6a 07       	cpc	r22, r26
     a52:	7b 07       	cpc	r23, r27
     a54:	40 f4       	brcc	.+16     	; 0xa66 <evTime_check+0x3a>
		{
			evt->time_state = TIMER_END;
     a56:	82 e0       	ldi	r24, 0x02	; 2
     a58:	84 83       	std	Z+4, r24	; 0x04
			return 1;
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	08 95       	ret
		}
		else return 0;
	}
	else return -1;
     a60:	8f ef       	ldi	r24, 0xFF	; 255
     a62:	9f ef       	ldi	r25, 0xFF	; 255
     a64:	08 95       	ret
		if (evt->timer < mktime.ms) 
		{
			evt->time_state = TIMER_END;
			return 1;
		}
		else return 0;
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
	}
	else return -1;
}
     a6a:	08 95       	ret

00000a6c <evTime_off>:

int evTime_off(evTime * evt)
{
	return evt->time_state == TIMER_OFF;
     a6c:	21 e0       	ldi	r18, 0x01	; 1
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	fc 01       	movw	r30, r24
     a72:	84 81       	ldd	r24, Z+4	; 0x04
     a74:	83 30       	cpi	r24, 0x03	; 3
     a76:	11 f0       	breq	.+4      	; 0xa7c <evTime_off+0x10>
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
}
     a7c:	c9 01       	movw	r24, r18
     a7e:	08 95       	ret

00000a80 <evTime_process_period>:

int evTime_process_period(evTime * timer, uint32_t period)
{
     a80:	cf 92       	push	r12
     a82:	df 92       	push	r13
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	ec 01       	movw	r28, r24
     a92:	6a 01       	movw	r12, r20
     a94:	7b 01       	movw	r14, r22
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
     a96:	8c 81       	ldd	r24, Y+4	; 0x04
     a98:	81 11       	cpse	r24, r1
     a9a:	06 c0       	rjmp	.+12     	; 0xaa8 <evTime_process_period+0x28>
	#endif
}

void evTime_init(evTime * evt)
{
	evt->time_state = TIMER_OFF;
     a9c:	83 e0       	ldi	r24, 0x03	; 3
     a9e:	8c 83       	std	Y+4, r24	; 0x04
	evt->timer = 0;
     aa0:	18 82       	st	Y, r1
     aa2:	19 82       	std	Y+1, r1	; 0x01
     aa4:	1a 82       	std	Y+2, r1	; 0x02
     aa6:	1b 82       	std	Y+3, r1	; 0x03

int evTime_process_period(evTime * timer, uint32_t period)
{
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
	ret_val = evTime_check(timer);
     aa8:	ce 01       	movw	r24, r28
     aaa:	0e 94 16 05 	call	0xa2c	; 0xa2c <evTime_check>
     aae:	8c 01       	movw	r16, r24
	if (ret_val == 1)
     ab0:	01 97       	sbiw	r24, 0x01	; 1
     ab2:	31 f4       	brne	.+12     	; 0xac0 <evTime_process_period+0x40>
	{
		evTime_start(timer, period);
     ab4:	b7 01       	movw	r22, r14
     ab6:	a6 01       	movw	r20, r12
     ab8:	ce 01       	movw	r24, r28
     aba:	0e 94 fe 04 	call	0x9fc	; 0x9fc <evTime_start>
		return 1;
     abe:	0d c0       	rjmp	.+26     	; 0xada <evTime_process_period+0x5a>
	}
	else if (evTime_off(timer))
     ac0:	8c 81       	ldd	r24, Y+4	; 0x04
     ac2:	83 30       	cpi	r24, 0x03	; 3
     ac4:	41 f4       	brne	.+16     	; 0xad6 <evTime_process_period+0x56>
	{
		evTime_start(timer, period);
     ac6:	b7 01       	movw	r22, r14
     ac8:	a6 01       	movw	r20, r12
     aca:	ce 01       	movw	r24, r28
     acc:	0e 94 fe 04 	call	0x9fc	; 0x9fc <evTime_start>
	}
	return 0;
     ad0:	00 e0       	ldi	r16, 0x00	; 0
     ad2:	10 e0       	ldi	r17, 0x00	; 0
     ad4:	02 c0       	rjmp	.+4      	; 0xada <evTime_process_period+0x5a>
     ad6:	00 e0       	ldi	r16, 0x00	; 0
     ad8:	10 e0       	ldi	r17, 0x00	; 0
}
     ada:	c8 01       	movw	r24, r16
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	cf 90       	pop	r12
     aec:	08 95       	ret

00000aee <__vector_13>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
     aee:	1f 92       	push	r1
     af0:	0f 92       	push	r0
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	0f 92       	push	r0
     af6:	11 24       	eor	r1, r1
     af8:	2f 93       	push	r18
     afa:	3f 93       	push	r19
     afc:	4f 93       	push	r20
     afe:	5f 93       	push	r21
     b00:	8f 93       	push	r24
     b02:	9f 93       	push	r25
     b04:	ef 93       	push	r30
     b06:	ff 93       	push	r31
     b08:	2b b1       	in	r18, 0x0b	; 11
     b0a:	3c b1       	in	r19, 0x0c	; 12
     b0c:	28 71       	andi	r18, 0x18	; 24
     b0e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <UART_RxHead>
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	01 96       	adiw	r24, 0x01	; 1
     b16:	8f 77       	andi	r24, 0x7F	; 127
     b18:	99 27       	eor	r25, r25
     b1a:	40 91 83 01 	lds	r20, 0x0183	; 0x800183 <UART_RxTail>
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	84 17       	cp	r24, r20
     b22:	95 07       	cpc	r25, r21
     b24:	39 f0       	breq	.+14     	; 0xb34 <__vector_13+0x46>
     b26:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <UART_RxHead>
     b2a:	fc 01       	movw	r30, r24
     b2c:	e9 57       	subi	r30, 0x79	; 121
     b2e:	fe 4f       	sbci	r31, 0xFE	; 254
     b30:	30 83       	st	Z, r19
     b32:	01 c0       	rjmp	.+2      	; 0xb36 <__vector_13+0x48>
     b34:	22 e0       	ldi	r18, 0x02	; 2
     b36:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <UART_LastRxError>
     b3a:	ff 91       	pop	r31
     b3c:	ef 91       	pop	r30
     b3e:	9f 91       	pop	r25
     b40:	8f 91       	pop	r24
     b42:	5f 91       	pop	r21
     b44:	4f 91       	pop	r20
     b46:	3f 91       	pop	r19
     b48:	2f 91       	pop	r18
     b4a:	0f 90       	pop	r0
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	0f 90       	pop	r0
     b50:	1f 90       	pop	r1
     b52:	18 95       	reti

00000b54 <__vector_14>:
     b54:	1f 92       	push	r1
     b56:	0f 92       	push	r0
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	0f 92       	push	r0
     b5c:	11 24       	eor	r1, r1
     b5e:	8f 93       	push	r24
     b60:	9f 93       	push	r25
     b62:	ef 93       	push	r30
     b64:	ff 93       	push	r31
     b66:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <UART_TxHead>
     b6a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <UART_TxTail>
     b6e:	98 17       	cp	r25, r24
     b70:	71 f0       	breq	.+28     	; 0xb8e <__vector_14+0x3a>
     b72:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <UART_TxTail>
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	99 27       	eor	r25, r25
     b7e:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <UART_TxTail>
     b82:	fc 01       	movw	r30, r24
     b84:	e9 5f       	subi	r30, 0xF9	; 249
     b86:	fd 4f       	sbci	r31, 0xFD	; 253
     b88:	80 81       	ld	r24, Z
     b8a:	8c b9       	out	0x0c, r24	; 12
     b8c:	01 c0       	rjmp	.+2      	; 0xb90 <__vector_14+0x3c>
     b8e:	55 98       	cbi	0x0a, 5	; 10
     b90:	ff 91       	pop	r31
     b92:	ef 91       	pop	r30
     b94:	9f 91       	pop	r25
     b96:	8f 91       	pop	r24
     b98:	0f 90       	pop	r0
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	0f 90       	pop	r0
     b9e:	1f 90       	pop	r1
     ba0:	18 95       	reti

00000ba2 <uart0_init>:
     ba2:	f8 94       	cli
     ba4:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <UART_TxHead>
     ba8:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <UART_TxTail>
     bac:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <UART_RxHead>
     bb0:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <UART_RxTail>
     bb4:	78 94       	sei
     bb6:	99 23       	and	r25, r25
     bb8:	1c f4       	brge	.+6      	; 0xbc0 <uart0_init+0x1e>
     bba:	22 e0       	ldi	r18, 0x02	; 2
     bbc:	2b b9       	out	0x0b, r18	; 11
     bbe:	9f 77       	andi	r25, 0x7F	; 127
     bc0:	90 bd       	out	0x20, r25	; 32
     bc2:	89 b9       	out	0x09, r24	; 9
     bc4:	88 e9       	ldi	r24, 0x98	; 152
     bc6:	8a b9       	out	0x0a, r24	; 10
     bc8:	86 e8       	ldi	r24, 0x86	; 134
     bca:	80 bd       	out	0x20, r24	; 32
     bcc:	08 95       	ret

00000bce <uart0_getc>:
     bce:	f8 94       	cli
     bd0:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <UART_RxHead>
     bd4:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <UART_RxTail>
     bd8:	98 13       	cpse	r25, r24
     bda:	04 c0       	rjmp	.+8      	; 0xbe4 <uart0_getc+0x16>
     bdc:	78 94       	sei
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	08 95       	ret
     be4:	78 94       	sei
     be6:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <UART_RxTail>
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	8f 77       	andi	r24, 0x7F	; 127
     bf0:	99 27       	eor	r25, r25
     bf2:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <UART_RxTail>
     bf6:	fc 01       	movw	r30, r24
     bf8:	e9 57       	subi	r30, 0x79	; 121
     bfa:	fe 4f       	sbci	r31, 0xFE	; 254
     bfc:	20 81       	ld	r18, Z
     bfe:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <UART_LastRxError>
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	98 2f       	mov	r25, r24
     c06:	88 27       	eor	r24, r24
     c08:	82 0f       	add	r24, r18
     c0a:	91 1d       	adc	r25, r1
     c0c:	08 95       	ret

00000c0e <uart0_putc>:
		}
	} while (tmphead == txtail_tmp); /* wait for free space in buffer */
#else
	uint16_t tmphead;
	
	tmphead = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
     c0e:	40 91 86 01 	lds	r20, 0x0186	; 0x800186 <UART_TxHead>
     c12:	50 e0       	ldi	r21, 0x00	; 0
     c14:	4f 5f       	subi	r20, 0xFF	; 255
     c16:	5f 4f       	sbci	r21, 0xFF	; 255
     c18:	4f 77       	andi	r20, 0x7F	; 127
     c1a:	55 27       	eor	r21, r21
	
	while (tmphead == UART_TxTail); /* wait for free space in buffer */
     c1c:	20 91 85 01 	lds	r18, 0x0185	; 0x800185 <UART_TxTail>
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	42 17       	cp	r20, r18
     c24:	53 07       	cpc	r21, r19
     c26:	d1 f3       	breq	.-12     	; 0xc1c <uart0_putc+0xe>
#endif

	UART_TxBuf[tmphead] = data;
     c28:	fa 01       	movw	r30, r20
     c2a:	e9 5f       	subi	r30, 0xF9	; 249
     c2c:	fd 4f       	sbci	r31, 0xFD	; 253
     c2e:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
     c30:	40 93 86 01 	sts	0x0186, r20	; 0x800186 <UART_TxHead>

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
     c34:	55 9a       	sbi	0x0a, 5	; 10
     c36:	08 95       	ret

00000c38 <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	ec 01       	movw	r28, r24
	while (*s) {
     c3e:	88 81       	ld	r24, Y
     c40:	88 23       	and	r24, r24
     c42:	31 f0       	breq	.+12     	; 0xc50 <uart0_puts+0x18>
     c44:	21 96       	adiw	r28, 0x01	; 1
		uart0_putc(*s++);
     c46:	0e 94 07 06 	call	0xc0e	; 0xc0e <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
	while (*s) {
     c4a:	89 91       	ld	r24, Y+
     c4c:	81 11       	cpse	r24, r1
     c4e:	fb cf       	rjmp	.-10     	; 0xc46 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	08 95       	ret

00000c56 <__subsf3>:
     c56:	50 58       	subi	r21, 0x80	; 128

00000c58 <__addsf3>:
     c58:	bb 27       	eor	r27, r27
     c5a:	aa 27       	eor	r26, r26
     c5c:	0e 94 43 06 	call	0xc86	; 0xc86 <__addsf3x>
     c60:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <__fp_round>
     c64:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__fp_pscA>
     c68:	38 f0       	brcs	.+14     	; 0xc78 <__addsf3+0x20>
     c6a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fp_pscB>
     c6e:	20 f0       	brcs	.+8      	; 0xc78 <__addsf3+0x20>
     c70:	39 f4       	brne	.+14     	; 0xc80 <__addsf3+0x28>
     c72:	9f 3f       	cpi	r25, 0xFF	; 255
     c74:	19 f4       	brne	.+6      	; 0xc7c <__addsf3+0x24>
     c76:	26 f4       	brtc	.+8      	; 0xc80 <__addsf3+0x28>
     c78:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__fp_nan>
     c7c:	0e f4       	brtc	.+2      	; 0xc80 <__addsf3+0x28>
     c7e:	e0 95       	com	r30
     c80:	e7 fb       	bst	r30, 7
     c82:	0c 94 04 07 	jmp	0xe08	; 0xe08 <__fp_inf>

00000c86 <__addsf3x>:
     c86:	e9 2f       	mov	r30, r25
     c88:	0e 94 2c 07 	call	0xe58	; 0xe58 <__fp_split3>
     c8c:	58 f3       	brcs	.-42     	; 0xc64 <__addsf3+0xc>
     c8e:	ba 17       	cp	r27, r26
     c90:	62 07       	cpc	r22, r18
     c92:	73 07       	cpc	r23, r19
     c94:	84 07       	cpc	r24, r20
     c96:	95 07       	cpc	r25, r21
     c98:	20 f0       	brcs	.+8      	; 0xca2 <__addsf3x+0x1c>
     c9a:	79 f4       	brne	.+30     	; 0xcba <__addsf3x+0x34>
     c9c:	a6 f5       	brtc	.+104    	; 0xd06 <__addsf3x+0x80>
     c9e:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__fp_zero>
     ca2:	0e f4       	brtc	.+2      	; 0xca6 <__addsf3x+0x20>
     ca4:	e0 95       	com	r30
     ca6:	0b 2e       	mov	r0, r27
     ca8:	ba 2f       	mov	r27, r26
     caa:	a0 2d       	mov	r26, r0
     cac:	0b 01       	movw	r0, r22
     cae:	b9 01       	movw	r22, r18
     cb0:	90 01       	movw	r18, r0
     cb2:	0c 01       	movw	r0, r24
     cb4:	ca 01       	movw	r24, r20
     cb6:	a0 01       	movw	r20, r0
     cb8:	11 24       	eor	r1, r1
     cba:	ff 27       	eor	r31, r31
     cbc:	59 1b       	sub	r21, r25
     cbe:	99 f0       	breq	.+38     	; 0xce6 <__addsf3x+0x60>
     cc0:	59 3f       	cpi	r21, 0xF9	; 249
     cc2:	50 f4       	brcc	.+20     	; 0xcd8 <__addsf3x+0x52>
     cc4:	50 3e       	cpi	r21, 0xE0	; 224
     cc6:	68 f1       	brcs	.+90     	; 0xd22 <__addsf3x+0x9c>
     cc8:	1a 16       	cp	r1, r26
     cca:	f0 40       	sbci	r31, 0x00	; 0
     ccc:	a2 2f       	mov	r26, r18
     cce:	23 2f       	mov	r18, r19
     cd0:	34 2f       	mov	r19, r20
     cd2:	44 27       	eor	r20, r20
     cd4:	58 5f       	subi	r21, 0xF8	; 248
     cd6:	f3 cf       	rjmp	.-26     	; 0xcbe <__addsf3x+0x38>
     cd8:	46 95       	lsr	r20
     cda:	37 95       	ror	r19
     cdc:	27 95       	ror	r18
     cde:	a7 95       	ror	r26
     ce0:	f0 40       	sbci	r31, 0x00	; 0
     ce2:	53 95       	inc	r21
     ce4:	c9 f7       	brne	.-14     	; 0xcd8 <__addsf3x+0x52>
     ce6:	7e f4       	brtc	.+30     	; 0xd06 <__addsf3x+0x80>
     ce8:	1f 16       	cp	r1, r31
     cea:	ba 0b       	sbc	r27, r26
     cec:	62 0b       	sbc	r22, r18
     cee:	73 0b       	sbc	r23, r19
     cf0:	84 0b       	sbc	r24, r20
     cf2:	ba f0       	brmi	.+46     	; 0xd22 <__addsf3x+0x9c>
     cf4:	91 50       	subi	r25, 0x01	; 1
     cf6:	a1 f0       	breq	.+40     	; 0xd20 <__addsf3x+0x9a>
     cf8:	ff 0f       	add	r31, r31
     cfa:	bb 1f       	adc	r27, r27
     cfc:	66 1f       	adc	r22, r22
     cfe:	77 1f       	adc	r23, r23
     d00:	88 1f       	adc	r24, r24
     d02:	c2 f7       	brpl	.-16     	; 0xcf4 <__addsf3x+0x6e>
     d04:	0e c0       	rjmp	.+28     	; 0xd22 <__addsf3x+0x9c>
     d06:	ba 0f       	add	r27, r26
     d08:	62 1f       	adc	r22, r18
     d0a:	73 1f       	adc	r23, r19
     d0c:	84 1f       	adc	r24, r20
     d0e:	48 f4       	brcc	.+18     	; 0xd22 <__addsf3x+0x9c>
     d10:	87 95       	ror	r24
     d12:	77 95       	ror	r23
     d14:	67 95       	ror	r22
     d16:	b7 95       	ror	r27
     d18:	f7 95       	ror	r31
     d1a:	9e 3f       	cpi	r25, 0xFE	; 254
     d1c:	08 f0       	brcs	.+2      	; 0xd20 <__addsf3x+0x9a>
     d1e:	b0 cf       	rjmp	.-160    	; 0xc80 <__addsf3+0x28>
     d20:	93 95       	inc	r25
     d22:	88 0f       	add	r24, r24
     d24:	08 f0       	brcs	.+2      	; 0xd28 <__addsf3x+0xa2>
     d26:	99 27       	eor	r25, r25
     d28:	ee 0f       	add	r30, r30
     d2a:	97 95       	ror	r25
     d2c:	87 95       	ror	r24
     d2e:	08 95       	ret

00000d30 <__fixunssfsi>:
     d30:	0e 94 34 07 	call	0xe68	; 0xe68 <__fp_splitA>
     d34:	88 f0       	brcs	.+34     	; 0xd58 <__fixunssfsi+0x28>
     d36:	9f 57       	subi	r25, 0x7F	; 127
     d38:	98 f0       	brcs	.+38     	; 0xd60 <__fixunssfsi+0x30>
     d3a:	b9 2f       	mov	r27, r25
     d3c:	99 27       	eor	r25, r25
     d3e:	b7 51       	subi	r27, 0x17	; 23
     d40:	b0 f0       	brcs	.+44     	; 0xd6e <__fixunssfsi+0x3e>
     d42:	e1 f0       	breq	.+56     	; 0xd7c <__fixunssfsi+0x4c>
     d44:	66 0f       	add	r22, r22
     d46:	77 1f       	adc	r23, r23
     d48:	88 1f       	adc	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	1a f0       	brmi	.+6      	; 0xd54 <__fixunssfsi+0x24>
     d4e:	ba 95       	dec	r27
     d50:	c9 f7       	brne	.-14     	; 0xd44 <__fixunssfsi+0x14>
     d52:	14 c0       	rjmp	.+40     	; 0xd7c <__fixunssfsi+0x4c>
     d54:	b1 30       	cpi	r27, 0x01	; 1
     d56:	91 f0       	breq	.+36     	; 0xd7c <__fixunssfsi+0x4c>
     d58:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__fp_zero>
     d5c:	b1 e0       	ldi	r27, 0x01	; 1
     d5e:	08 95       	ret
     d60:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__fp_zero>
     d64:	67 2f       	mov	r22, r23
     d66:	78 2f       	mov	r23, r24
     d68:	88 27       	eor	r24, r24
     d6a:	b8 5f       	subi	r27, 0xF8	; 248
     d6c:	39 f0       	breq	.+14     	; 0xd7c <__fixunssfsi+0x4c>
     d6e:	b9 3f       	cpi	r27, 0xF9	; 249
     d70:	cc f3       	brlt	.-14     	; 0xd64 <__fixunssfsi+0x34>
     d72:	86 95       	lsr	r24
     d74:	77 95       	ror	r23
     d76:	67 95       	ror	r22
     d78:	b3 95       	inc	r27
     d7a:	d9 f7       	brne	.-10     	; 0xd72 <__fixunssfsi+0x42>
     d7c:	3e f4       	brtc	.+14     	; 0xd8c <__fixunssfsi+0x5c>
     d7e:	90 95       	com	r25
     d80:	80 95       	com	r24
     d82:	70 95       	com	r23
     d84:	61 95       	neg	r22
     d86:	7f 4f       	sbci	r23, 0xFF	; 255
     d88:	8f 4f       	sbci	r24, 0xFF	; 255
     d8a:	9f 4f       	sbci	r25, 0xFF	; 255
     d8c:	08 95       	ret

00000d8e <__floatunsisf>:
     d8e:	e8 94       	clt
     d90:	09 c0       	rjmp	.+18     	; 0xda4 <__floatsisf+0x12>

00000d92 <__floatsisf>:
     d92:	97 fb       	bst	r25, 7
     d94:	3e f4       	brtc	.+14     	; 0xda4 <__floatsisf+0x12>
     d96:	90 95       	com	r25
     d98:	80 95       	com	r24
     d9a:	70 95       	com	r23
     d9c:	61 95       	neg	r22
     d9e:	7f 4f       	sbci	r23, 0xFF	; 255
     da0:	8f 4f       	sbci	r24, 0xFF	; 255
     da2:	9f 4f       	sbci	r25, 0xFF	; 255
     da4:	99 23       	and	r25, r25
     da6:	a9 f0       	breq	.+42     	; 0xdd2 <__floatsisf+0x40>
     da8:	f9 2f       	mov	r31, r25
     daa:	96 e9       	ldi	r25, 0x96	; 150
     dac:	bb 27       	eor	r27, r27
     dae:	93 95       	inc	r25
     db0:	f6 95       	lsr	r31
     db2:	87 95       	ror	r24
     db4:	77 95       	ror	r23
     db6:	67 95       	ror	r22
     db8:	b7 95       	ror	r27
     dba:	f1 11       	cpse	r31, r1
     dbc:	f8 cf       	rjmp	.-16     	; 0xdae <__floatsisf+0x1c>
     dbe:	fa f4       	brpl	.+62     	; 0xdfe <__floatsisf+0x6c>
     dc0:	bb 0f       	add	r27, r27
     dc2:	11 f4       	brne	.+4      	; 0xdc8 <__floatsisf+0x36>
     dc4:	60 ff       	sbrs	r22, 0
     dc6:	1b c0       	rjmp	.+54     	; 0xdfe <__floatsisf+0x6c>
     dc8:	6f 5f       	subi	r22, 0xFF	; 255
     dca:	7f 4f       	sbci	r23, 0xFF	; 255
     dcc:	8f 4f       	sbci	r24, 0xFF	; 255
     dce:	9f 4f       	sbci	r25, 0xFF	; 255
     dd0:	16 c0       	rjmp	.+44     	; 0xdfe <__floatsisf+0x6c>
     dd2:	88 23       	and	r24, r24
     dd4:	11 f0       	breq	.+4      	; 0xdda <__floatsisf+0x48>
     dd6:	96 e9       	ldi	r25, 0x96	; 150
     dd8:	11 c0       	rjmp	.+34     	; 0xdfc <__floatsisf+0x6a>
     dda:	77 23       	and	r23, r23
     ddc:	21 f0       	breq	.+8      	; 0xde6 <__floatsisf+0x54>
     dde:	9e e8       	ldi	r25, 0x8E	; 142
     de0:	87 2f       	mov	r24, r23
     de2:	76 2f       	mov	r23, r22
     de4:	05 c0       	rjmp	.+10     	; 0xdf0 <__floatsisf+0x5e>
     de6:	66 23       	and	r22, r22
     de8:	71 f0       	breq	.+28     	; 0xe06 <__floatsisf+0x74>
     dea:	96 e8       	ldi	r25, 0x86	; 134
     dec:	86 2f       	mov	r24, r22
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	2a f0       	brmi	.+10     	; 0xdfe <__floatsisf+0x6c>
     df4:	9a 95       	dec	r25
     df6:	66 0f       	add	r22, r22
     df8:	77 1f       	adc	r23, r23
     dfa:	88 1f       	adc	r24, r24
     dfc:	da f7       	brpl	.-10     	; 0xdf4 <__floatsisf+0x62>
     dfe:	88 0f       	add	r24, r24
     e00:	96 95       	lsr	r25
     e02:	87 95       	ror	r24
     e04:	97 f9       	bld	r25, 7
     e06:	08 95       	ret

00000e08 <__fp_inf>:
     e08:	97 f9       	bld	r25, 7
     e0a:	9f 67       	ori	r25, 0x7F	; 127
     e0c:	80 e8       	ldi	r24, 0x80	; 128
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	08 95       	ret

00000e14 <__fp_nan>:
     e14:	9f ef       	ldi	r25, 0xFF	; 255
     e16:	80 ec       	ldi	r24, 0xC0	; 192
     e18:	08 95       	ret

00000e1a <__fp_pscA>:
     e1a:	00 24       	eor	r0, r0
     e1c:	0a 94       	dec	r0
     e1e:	16 16       	cp	r1, r22
     e20:	17 06       	cpc	r1, r23
     e22:	18 06       	cpc	r1, r24
     e24:	09 06       	cpc	r0, r25
     e26:	08 95       	ret

00000e28 <__fp_pscB>:
     e28:	00 24       	eor	r0, r0
     e2a:	0a 94       	dec	r0
     e2c:	12 16       	cp	r1, r18
     e2e:	13 06       	cpc	r1, r19
     e30:	14 06       	cpc	r1, r20
     e32:	05 06       	cpc	r0, r21
     e34:	08 95       	ret

00000e36 <__fp_round>:
     e36:	09 2e       	mov	r0, r25
     e38:	03 94       	inc	r0
     e3a:	00 0c       	add	r0, r0
     e3c:	11 f4       	brne	.+4      	; 0xe42 <__fp_round+0xc>
     e3e:	88 23       	and	r24, r24
     e40:	52 f0       	brmi	.+20     	; 0xe56 <__fp_round+0x20>
     e42:	bb 0f       	add	r27, r27
     e44:	40 f4       	brcc	.+16     	; 0xe56 <__fp_round+0x20>
     e46:	bf 2b       	or	r27, r31
     e48:	11 f4       	brne	.+4      	; 0xe4e <__fp_round+0x18>
     e4a:	60 ff       	sbrs	r22, 0
     e4c:	04 c0       	rjmp	.+8      	; 0xe56 <__fp_round+0x20>
     e4e:	6f 5f       	subi	r22, 0xFF	; 255
     e50:	7f 4f       	sbci	r23, 0xFF	; 255
     e52:	8f 4f       	sbci	r24, 0xFF	; 255
     e54:	9f 4f       	sbci	r25, 0xFF	; 255
     e56:	08 95       	ret

00000e58 <__fp_split3>:
     e58:	57 fd       	sbrc	r21, 7
     e5a:	90 58       	subi	r25, 0x80	; 128
     e5c:	44 0f       	add	r20, r20
     e5e:	55 1f       	adc	r21, r21
     e60:	59 f0       	breq	.+22     	; 0xe78 <__fp_splitA+0x10>
     e62:	5f 3f       	cpi	r21, 0xFF	; 255
     e64:	71 f0       	breq	.+28     	; 0xe82 <__fp_splitA+0x1a>
     e66:	47 95       	ror	r20

00000e68 <__fp_splitA>:
     e68:	88 0f       	add	r24, r24
     e6a:	97 fb       	bst	r25, 7
     e6c:	99 1f       	adc	r25, r25
     e6e:	61 f0       	breq	.+24     	; 0xe88 <__fp_splitA+0x20>
     e70:	9f 3f       	cpi	r25, 0xFF	; 255
     e72:	79 f0       	breq	.+30     	; 0xe92 <__fp_splitA+0x2a>
     e74:	87 95       	ror	r24
     e76:	08 95       	ret
     e78:	12 16       	cp	r1, r18
     e7a:	13 06       	cpc	r1, r19
     e7c:	14 06       	cpc	r1, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	f2 cf       	rjmp	.-28     	; 0xe66 <__fp_split3+0xe>
     e82:	46 95       	lsr	r20
     e84:	f1 df       	rcall	.-30     	; 0xe68 <__fp_splitA>
     e86:	08 c0       	rjmp	.+16     	; 0xe98 <__fp_splitA+0x30>
     e88:	16 16       	cp	r1, r22
     e8a:	17 06       	cpc	r1, r23
     e8c:	18 06       	cpc	r1, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	f1 cf       	rjmp	.-30     	; 0xe74 <__fp_splitA+0xc>
     e92:	86 95       	lsr	r24
     e94:	71 05       	cpc	r23, r1
     e96:	61 05       	cpc	r22, r1
     e98:	08 94       	sec
     e9a:	08 95       	ret

00000e9c <__fp_zero>:
     e9c:	e8 94       	clt

00000e9e <__fp_szero>:
     e9e:	bb 27       	eor	r27, r27
     ea0:	66 27       	eor	r22, r22
     ea2:	77 27       	eor	r23, r23
     ea4:	cb 01       	movw	r24, r22
     ea6:	97 f9       	bld	r25, 7
     ea8:	08 95       	ret

00000eaa <__mulsf3>:
     eaa:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3x>
     eae:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <__fp_round>
     eb2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__fp_pscA>
     eb6:	38 f0       	brcs	.+14     	; 0xec6 <__mulsf3+0x1c>
     eb8:	0e 94 14 07 	call	0xe28	; 0xe28 <__fp_pscB>
     ebc:	20 f0       	brcs	.+8      	; 0xec6 <__mulsf3+0x1c>
     ebe:	95 23       	and	r25, r21
     ec0:	11 f0       	breq	.+4      	; 0xec6 <__mulsf3+0x1c>
     ec2:	0c 94 04 07 	jmp	0xe08	; 0xe08 <__fp_inf>
     ec6:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__fp_nan>
     eca:	11 24       	eor	r1, r1
     ecc:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <__fp_szero>

00000ed0 <__mulsf3x>:
     ed0:	0e 94 2c 07 	call	0xe58	; 0xe58 <__fp_split3>
     ed4:	70 f3       	brcs	.-36     	; 0xeb2 <__mulsf3+0x8>

00000ed6 <__mulsf3_pse>:
     ed6:	95 9f       	mul	r25, r21
     ed8:	c1 f3       	breq	.-16     	; 0xeca <__mulsf3+0x20>
     eda:	95 0f       	add	r25, r21
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	55 1f       	adc	r21, r21
     ee0:	62 9f       	mul	r22, r18
     ee2:	f0 01       	movw	r30, r0
     ee4:	72 9f       	mul	r23, r18
     ee6:	bb 27       	eor	r27, r27
     ee8:	f0 0d       	add	r31, r0
     eea:	b1 1d       	adc	r27, r1
     eec:	63 9f       	mul	r22, r19
     eee:	aa 27       	eor	r26, r26
     ef0:	f0 0d       	add	r31, r0
     ef2:	b1 1d       	adc	r27, r1
     ef4:	aa 1f       	adc	r26, r26
     ef6:	64 9f       	mul	r22, r20
     ef8:	66 27       	eor	r22, r22
     efa:	b0 0d       	add	r27, r0
     efc:	a1 1d       	adc	r26, r1
     efe:	66 1f       	adc	r22, r22
     f00:	82 9f       	mul	r24, r18
     f02:	22 27       	eor	r18, r18
     f04:	b0 0d       	add	r27, r0
     f06:	a1 1d       	adc	r26, r1
     f08:	62 1f       	adc	r22, r18
     f0a:	73 9f       	mul	r23, r19
     f0c:	b0 0d       	add	r27, r0
     f0e:	a1 1d       	adc	r26, r1
     f10:	62 1f       	adc	r22, r18
     f12:	83 9f       	mul	r24, r19
     f14:	a0 0d       	add	r26, r0
     f16:	61 1d       	adc	r22, r1
     f18:	22 1f       	adc	r18, r18
     f1a:	74 9f       	mul	r23, r20
     f1c:	33 27       	eor	r19, r19
     f1e:	a0 0d       	add	r26, r0
     f20:	61 1d       	adc	r22, r1
     f22:	23 1f       	adc	r18, r19
     f24:	84 9f       	mul	r24, r20
     f26:	60 0d       	add	r22, r0
     f28:	21 1d       	adc	r18, r1
     f2a:	82 2f       	mov	r24, r18
     f2c:	76 2f       	mov	r23, r22
     f2e:	6a 2f       	mov	r22, r26
     f30:	11 24       	eor	r1, r1
     f32:	9f 57       	subi	r25, 0x7F	; 127
     f34:	50 40       	sbci	r21, 0x00	; 0
     f36:	9a f0       	brmi	.+38     	; 0xf5e <__mulsf3_pse+0x88>
     f38:	f1 f0       	breq	.+60     	; 0xf76 <__mulsf3_pse+0xa0>
     f3a:	88 23       	and	r24, r24
     f3c:	4a f0       	brmi	.+18     	; 0xf50 <__mulsf3_pse+0x7a>
     f3e:	ee 0f       	add	r30, r30
     f40:	ff 1f       	adc	r31, r31
     f42:	bb 1f       	adc	r27, r27
     f44:	66 1f       	adc	r22, r22
     f46:	77 1f       	adc	r23, r23
     f48:	88 1f       	adc	r24, r24
     f4a:	91 50       	subi	r25, 0x01	; 1
     f4c:	50 40       	sbci	r21, 0x00	; 0
     f4e:	a9 f7       	brne	.-22     	; 0xf3a <__mulsf3_pse+0x64>
     f50:	9e 3f       	cpi	r25, 0xFE	; 254
     f52:	51 05       	cpc	r21, r1
     f54:	80 f0       	brcs	.+32     	; 0xf76 <__mulsf3_pse+0xa0>
     f56:	0c 94 04 07 	jmp	0xe08	; 0xe08 <__fp_inf>
     f5a:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <__fp_szero>
     f5e:	5f 3f       	cpi	r21, 0xFF	; 255
     f60:	e4 f3       	brlt	.-8      	; 0xf5a <__mulsf3_pse+0x84>
     f62:	98 3e       	cpi	r25, 0xE8	; 232
     f64:	d4 f3       	brlt	.-12     	; 0xf5a <__mulsf3_pse+0x84>
     f66:	86 95       	lsr	r24
     f68:	77 95       	ror	r23
     f6a:	67 95       	ror	r22
     f6c:	b7 95       	ror	r27
     f6e:	f7 95       	ror	r31
     f70:	e7 95       	ror	r30
     f72:	9f 5f       	subi	r25, 0xFF	; 255
     f74:	c1 f7       	brne	.-16     	; 0xf66 <__mulsf3_pse+0x90>
     f76:	fe 2b       	or	r31, r30
     f78:	88 0f       	add	r24, r24
     f7a:	91 1d       	adc	r25, r1
     f7c:	96 95       	lsr	r25
     f7e:	87 95       	ror	r24
     f80:	97 f9       	bld	r25, 7
     f82:	08 95       	ret

00000f84 <vfprintf>:
     f84:	a0 e1       	ldi	r26, 0x10	; 16
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e8 ec       	ldi	r30, 0xC8	; 200
     f8a:	f7 e0       	ldi	r31, 0x07	; 7
     f8c:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <__prologue_saves__>
     f90:	7c 01       	movw	r14, r24
     f92:	1b 01       	movw	r2, r22
     f94:	6a 01       	movw	r12, r20
     f96:	fc 01       	movw	r30, r24
     f98:	17 82       	std	Z+7, r1	; 0x07
     f9a:	16 82       	std	Z+6, r1	; 0x06
     f9c:	83 81       	ldd	r24, Z+3	; 0x03
     f9e:	81 ff       	sbrs	r24, 1
     fa0:	44 c3       	rjmp	.+1672   	; 0x162a <vfprintf+0x6a6>
     fa2:	9e 01       	movw	r18, r28
     fa4:	2f 5f       	subi	r18, 0xFF	; 255
     fa6:	3f 4f       	sbci	r19, 0xFF	; 255
     fa8:	39 01       	movw	r6, r18
     faa:	f7 01       	movw	r30, r14
     fac:	93 81       	ldd	r25, Z+3	; 0x03
     fae:	f1 01       	movw	r30, r2
     fb0:	93 fd       	sbrc	r25, 3
     fb2:	85 91       	lpm	r24, Z+
     fb4:	93 ff       	sbrs	r25, 3
     fb6:	81 91       	ld	r24, Z+
     fb8:	1f 01       	movw	r2, r30
     fba:	88 23       	and	r24, r24
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <vfprintf+0x3c>
     fbe:	31 c3       	rjmp	.+1634   	; 0x1622 <vfprintf+0x69e>
     fc0:	85 32       	cpi	r24, 0x25	; 37
     fc2:	39 f4       	brne	.+14     	; 0xfd2 <vfprintf+0x4e>
     fc4:	93 fd       	sbrc	r25, 3
     fc6:	85 91       	lpm	r24, Z+
     fc8:	93 ff       	sbrs	r25, 3
     fca:	81 91       	ld	r24, Z+
     fcc:	1f 01       	movw	r2, r30
     fce:	85 32       	cpi	r24, 0x25	; 37
     fd0:	39 f4       	brne	.+14     	; 0xfe0 <vfprintf+0x5c>
     fd2:	b7 01       	movw	r22, r14
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
     fda:	56 01       	movw	r10, r12
     fdc:	65 01       	movw	r12, r10
     fde:	e5 cf       	rjmp	.-54     	; 0xfaa <vfprintf+0x26>
     fe0:	10 e0       	ldi	r17, 0x00	; 0
     fe2:	51 2c       	mov	r5, r1
     fe4:	91 2c       	mov	r9, r1
     fe6:	ff e1       	ldi	r31, 0x1F	; 31
     fe8:	f9 15       	cp	r31, r9
     fea:	d8 f0       	brcs	.+54     	; 0x1022 <vfprintf+0x9e>
     fec:	8b 32       	cpi	r24, 0x2B	; 43
     fee:	79 f0       	breq	.+30     	; 0x100e <vfprintf+0x8a>
     ff0:	38 f4       	brcc	.+14     	; 0x1000 <vfprintf+0x7c>
     ff2:	80 32       	cpi	r24, 0x20	; 32
     ff4:	79 f0       	breq	.+30     	; 0x1014 <vfprintf+0x90>
     ff6:	83 32       	cpi	r24, 0x23	; 35
     ff8:	a1 f4       	brne	.+40     	; 0x1022 <vfprintf+0x9e>
     ffa:	f9 2d       	mov	r31, r9
     ffc:	f0 61       	ori	r31, 0x10	; 16
     ffe:	2e c0       	rjmp	.+92     	; 0x105c <vfprintf+0xd8>
    1000:	8d 32       	cpi	r24, 0x2D	; 45
    1002:	61 f0       	breq	.+24     	; 0x101c <vfprintf+0x98>
    1004:	80 33       	cpi	r24, 0x30	; 48
    1006:	69 f4       	brne	.+26     	; 0x1022 <vfprintf+0x9e>
    1008:	29 2d       	mov	r18, r9
    100a:	21 60       	ori	r18, 0x01	; 1
    100c:	2d c0       	rjmp	.+90     	; 0x1068 <vfprintf+0xe4>
    100e:	39 2d       	mov	r19, r9
    1010:	32 60       	ori	r19, 0x02	; 2
    1012:	93 2e       	mov	r9, r19
    1014:	89 2d       	mov	r24, r9
    1016:	84 60       	ori	r24, 0x04	; 4
    1018:	98 2e       	mov	r9, r24
    101a:	2a c0       	rjmp	.+84     	; 0x1070 <vfprintf+0xec>
    101c:	e9 2d       	mov	r30, r9
    101e:	e8 60       	ori	r30, 0x08	; 8
    1020:	15 c0       	rjmp	.+42     	; 0x104c <vfprintf+0xc8>
    1022:	97 fc       	sbrc	r9, 7
    1024:	2d c0       	rjmp	.+90     	; 0x1080 <vfprintf+0xfc>
    1026:	20 ed       	ldi	r18, 0xD0	; 208
    1028:	28 0f       	add	r18, r24
    102a:	2a 30       	cpi	r18, 0x0A	; 10
    102c:	88 f4       	brcc	.+34     	; 0x1050 <vfprintf+0xcc>
    102e:	96 fe       	sbrs	r9, 6
    1030:	06 c0       	rjmp	.+12     	; 0x103e <vfprintf+0xba>
    1032:	3a e0       	ldi	r19, 0x0A	; 10
    1034:	13 9f       	mul	r17, r19
    1036:	20 0d       	add	r18, r0
    1038:	11 24       	eor	r1, r1
    103a:	12 2f       	mov	r17, r18
    103c:	19 c0       	rjmp	.+50     	; 0x1070 <vfprintf+0xec>
    103e:	8a e0       	ldi	r24, 0x0A	; 10
    1040:	58 9e       	mul	r5, r24
    1042:	20 0d       	add	r18, r0
    1044:	11 24       	eor	r1, r1
    1046:	52 2e       	mov	r5, r18
    1048:	e9 2d       	mov	r30, r9
    104a:	e0 62       	ori	r30, 0x20	; 32
    104c:	9e 2e       	mov	r9, r30
    104e:	10 c0       	rjmp	.+32     	; 0x1070 <vfprintf+0xec>
    1050:	8e 32       	cpi	r24, 0x2E	; 46
    1052:	31 f4       	brne	.+12     	; 0x1060 <vfprintf+0xdc>
    1054:	96 fc       	sbrc	r9, 6
    1056:	e5 c2       	rjmp	.+1482   	; 0x1622 <vfprintf+0x69e>
    1058:	f9 2d       	mov	r31, r9
    105a:	f0 64       	ori	r31, 0x40	; 64
    105c:	9f 2e       	mov	r9, r31
    105e:	08 c0       	rjmp	.+16     	; 0x1070 <vfprintf+0xec>
    1060:	8c 36       	cpi	r24, 0x6C	; 108
    1062:	21 f4       	brne	.+8      	; 0x106c <vfprintf+0xe8>
    1064:	29 2d       	mov	r18, r9
    1066:	20 68       	ori	r18, 0x80	; 128
    1068:	92 2e       	mov	r9, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <vfprintf+0xec>
    106c:	88 36       	cpi	r24, 0x68	; 104
    106e:	41 f4       	brne	.+16     	; 0x1080 <vfprintf+0xfc>
    1070:	f1 01       	movw	r30, r2
    1072:	93 fd       	sbrc	r25, 3
    1074:	85 91       	lpm	r24, Z+
    1076:	93 ff       	sbrs	r25, 3
    1078:	81 91       	ld	r24, Z+
    107a:	1f 01       	movw	r2, r30
    107c:	81 11       	cpse	r24, r1
    107e:	b3 cf       	rjmp	.-154    	; 0xfe6 <vfprintf+0x62>
    1080:	9b eb       	ldi	r25, 0xBB	; 187
    1082:	98 0f       	add	r25, r24
    1084:	93 30       	cpi	r25, 0x03	; 3
    1086:	20 f4       	brcc	.+8      	; 0x1090 <vfprintf+0x10c>
    1088:	99 2d       	mov	r25, r9
    108a:	90 61       	ori	r25, 0x10	; 16
    108c:	80 5e       	subi	r24, 0xE0	; 224
    108e:	07 c0       	rjmp	.+14     	; 0x109e <vfprintf+0x11a>
    1090:	9b e9       	ldi	r25, 0x9B	; 155
    1092:	98 0f       	add	r25, r24
    1094:	93 30       	cpi	r25, 0x03	; 3
    1096:	08 f0       	brcs	.+2      	; 0x109a <vfprintf+0x116>
    1098:	66 c1       	rjmp	.+716    	; 0x1366 <vfprintf+0x3e2>
    109a:	99 2d       	mov	r25, r9
    109c:	9f 7e       	andi	r25, 0xEF	; 239
    109e:	96 ff       	sbrs	r25, 6
    10a0:	16 e0       	ldi	r17, 0x06	; 6
    10a2:	9f 73       	andi	r25, 0x3F	; 63
    10a4:	99 2e       	mov	r9, r25
    10a6:	85 36       	cpi	r24, 0x65	; 101
    10a8:	19 f4       	brne	.+6      	; 0x10b0 <vfprintf+0x12c>
    10aa:	90 64       	ori	r25, 0x40	; 64
    10ac:	99 2e       	mov	r9, r25
    10ae:	08 c0       	rjmp	.+16     	; 0x10c0 <vfprintf+0x13c>
    10b0:	86 36       	cpi	r24, 0x66	; 102
    10b2:	21 f4       	brne	.+8      	; 0x10bc <vfprintf+0x138>
    10b4:	39 2f       	mov	r19, r25
    10b6:	30 68       	ori	r19, 0x80	; 128
    10b8:	93 2e       	mov	r9, r19
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <vfprintf+0x13c>
    10bc:	11 11       	cpse	r17, r1
    10be:	11 50       	subi	r17, 0x01	; 1
    10c0:	97 fe       	sbrs	r9, 7
    10c2:	07 c0       	rjmp	.+14     	; 0x10d2 <vfprintf+0x14e>
    10c4:	1c 33       	cpi	r17, 0x3C	; 60
    10c6:	50 f4       	brcc	.+20     	; 0x10dc <vfprintf+0x158>
    10c8:	44 24       	eor	r4, r4
    10ca:	43 94       	inc	r4
    10cc:	41 0e       	add	r4, r17
    10ce:	27 e0       	ldi	r18, 0x07	; 7
    10d0:	0b c0       	rjmp	.+22     	; 0x10e8 <vfprintf+0x164>
    10d2:	18 30       	cpi	r17, 0x08	; 8
    10d4:	38 f0       	brcs	.+14     	; 0x10e4 <vfprintf+0x160>
    10d6:	27 e0       	ldi	r18, 0x07	; 7
    10d8:	17 e0       	ldi	r17, 0x07	; 7
    10da:	05 c0       	rjmp	.+10     	; 0x10e6 <vfprintf+0x162>
    10dc:	27 e0       	ldi	r18, 0x07	; 7
    10de:	9c e3       	ldi	r25, 0x3C	; 60
    10e0:	49 2e       	mov	r4, r25
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <vfprintf+0x164>
    10e4:	21 2f       	mov	r18, r17
    10e6:	41 2c       	mov	r4, r1
    10e8:	56 01       	movw	r10, r12
    10ea:	84 e0       	ldi	r24, 0x04	; 4
    10ec:	a8 0e       	add	r10, r24
    10ee:	b1 1c       	adc	r11, r1
    10f0:	f6 01       	movw	r30, r12
    10f2:	60 81       	ld	r22, Z
    10f4:	71 81       	ldd	r23, Z+1	; 0x01
    10f6:	82 81       	ldd	r24, Z+2	; 0x02
    10f8:	93 81       	ldd	r25, Z+3	; 0x03
    10fa:	04 2d       	mov	r16, r4
    10fc:	a3 01       	movw	r20, r6
    10fe:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__ftoa_engine>
    1102:	6c 01       	movw	r12, r24
    1104:	f9 81       	ldd	r31, Y+1	; 0x01
    1106:	fc 87       	std	Y+12, r31	; 0x0c
    1108:	f0 ff       	sbrs	r31, 0
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <vfprintf+0x18c>
    110c:	f3 ff       	sbrs	r31, 3
    110e:	06 c0       	rjmp	.+12     	; 0x111c <vfprintf+0x198>
    1110:	91 fc       	sbrc	r9, 1
    1112:	06 c0       	rjmp	.+12     	; 0x1120 <vfprintf+0x19c>
    1114:	92 fe       	sbrs	r9, 2
    1116:	06 c0       	rjmp	.+12     	; 0x1124 <vfprintf+0x1a0>
    1118:	00 e2       	ldi	r16, 0x20	; 32
    111a:	05 c0       	rjmp	.+10     	; 0x1126 <vfprintf+0x1a2>
    111c:	0d e2       	ldi	r16, 0x2D	; 45
    111e:	03 c0       	rjmp	.+6      	; 0x1126 <vfprintf+0x1a2>
    1120:	0b e2       	ldi	r16, 0x2B	; 43
    1122:	01 c0       	rjmp	.+2      	; 0x1126 <vfprintf+0x1a2>
    1124:	00 e0       	ldi	r16, 0x00	; 0
    1126:	8c 85       	ldd	r24, Y+12	; 0x0c
    1128:	8c 70       	andi	r24, 0x0C	; 12
    112a:	19 f0       	breq	.+6      	; 0x1132 <vfprintf+0x1ae>
    112c:	01 11       	cpse	r16, r1
    112e:	5a c2       	rjmp	.+1204   	; 0x15e4 <vfprintf+0x660>
    1130:	9b c2       	rjmp	.+1334   	; 0x1668 <vfprintf+0x6e4>
    1132:	97 fe       	sbrs	r9, 7
    1134:	10 c0       	rjmp	.+32     	; 0x1156 <vfprintf+0x1d2>
    1136:	4c 0c       	add	r4, r12
    1138:	fc 85       	ldd	r31, Y+12	; 0x0c
    113a:	f4 ff       	sbrs	r31, 4
    113c:	04 c0       	rjmp	.+8      	; 0x1146 <vfprintf+0x1c2>
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	81 33       	cpi	r24, 0x31	; 49
    1142:	09 f4       	brne	.+2      	; 0x1146 <vfprintf+0x1c2>
    1144:	4a 94       	dec	r4
    1146:	14 14       	cp	r1, r4
    1148:	74 f5       	brge	.+92     	; 0x11a6 <vfprintf+0x222>
    114a:	28 e0       	ldi	r18, 0x08	; 8
    114c:	24 15       	cp	r18, r4
    114e:	78 f5       	brcc	.+94     	; 0x11ae <vfprintf+0x22a>
    1150:	88 e0       	ldi	r24, 0x08	; 8
    1152:	48 2e       	mov	r4, r24
    1154:	2c c0       	rjmp	.+88     	; 0x11ae <vfprintf+0x22a>
    1156:	96 fc       	sbrc	r9, 6
    1158:	2a c0       	rjmp	.+84     	; 0x11ae <vfprintf+0x22a>
    115a:	81 2f       	mov	r24, r17
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	8c 15       	cp	r24, r12
    1160:	9d 05       	cpc	r25, r13
    1162:	9c f0       	brlt	.+38     	; 0x118a <vfprintf+0x206>
    1164:	3c ef       	ldi	r19, 0xFC	; 252
    1166:	c3 16       	cp	r12, r19
    1168:	3f ef       	ldi	r19, 0xFF	; 255
    116a:	d3 06       	cpc	r13, r19
    116c:	74 f0       	brlt	.+28     	; 0x118a <vfprintf+0x206>
    116e:	89 2d       	mov	r24, r9
    1170:	80 68       	ori	r24, 0x80	; 128
    1172:	98 2e       	mov	r9, r24
    1174:	0a c0       	rjmp	.+20     	; 0x118a <vfprintf+0x206>
    1176:	e2 e0       	ldi	r30, 0x02	; 2
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	ec 0f       	add	r30, r28
    117c:	fd 1f       	adc	r31, r29
    117e:	e1 0f       	add	r30, r17
    1180:	f1 1d       	adc	r31, r1
    1182:	80 81       	ld	r24, Z
    1184:	80 33       	cpi	r24, 0x30	; 48
    1186:	19 f4       	brne	.+6      	; 0x118e <vfprintf+0x20a>
    1188:	11 50       	subi	r17, 0x01	; 1
    118a:	11 11       	cpse	r17, r1
    118c:	f4 cf       	rjmp	.-24     	; 0x1176 <vfprintf+0x1f2>
    118e:	97 fe       	sbrs	r9, 7
    1190:	0e c0       	rjmp	.+28     	; 0x11ae <vfprintf+0x22a>
    1192:	44 24       	eor	r4, r4
    1194:	43 94       	inc	r4
    1196:	41 0e       	add	r4, r17
    1198:	81 2f       	mov	r24, r17
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	c8 16       	cp	r12, r24
    119e:	d9 06       	cpc	r13, r25
    11a0:	2c f4       	brge	.+10     	; 0x11ac <vfprintf+0x228>
    11a2:	1c 19       	sub	r17, r12
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <vfprintf+0x22a>
    11a6:	44 24       	eor	r4, r4
    11a8:	43 94       	inc	r4
    11aa:	01 c0       	rjmp	.+2      	; 0x11ae <vfprintf+0x22a>
    11ac:	10 e0       	ldi	r17, 0x00	; 0
    11ae:	97 fe       	sbrs	r9, 7
    11b0:	06 c0       	rjmp	.+12     	; 0x11be <vfprintf+0x23a>
    11b2:	1c 14       	cp	r1, r12
    11b4:	1d 04       	cpc	r1, r13
    11b6:	34 f4       	brge	.+12     	; 0x11c4 <vfprintf+0x240>
    11b8:	c6 01       	movw	r24, r12
    11ba:	01 96       	adiw	r24, 0x01	; 1
    11bc:	05 c0       	rjmp	.+10     	; 0x11c8 <vfprintf+0x244>
    11be:	85 e0       	ldi	r24, 0x05	; 5
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <vfprintf+0x244>
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	01 11       	cpse	r16, r1
    11ca:	01 96       	adiw	r24, 0x01	; 1
    11cc:	11 23       	and	r17, r17
    11ce:	31 f0       	breq	.+12     	; 0x11dc <vfprintf+0x258>
    11d0:	21 2f       	mov	r18, r17
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	2f 5f       	subi	r18, 0xFF	; 255
    11d6:	3f 4f       	sbci	r19, 0xFF	; 255
    11d8:	82 0f       	add	r24, r18
    11da:	93 1f       	adc	r25, r19
    11dc:	25 2d       	mov	r18, r5
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	82 17       	cp	r24, r18
    11e2:	93 07       	cpc	r25, r19
    11e4:	14 f4       	brge	.+4      	; 0x11ea <vfprintf+0x266>
    11e6:	58 1a       	sub	r5, r24
    11e8:	01 c0       	rjmp	.+2      	; 0x11ec <vfprintf+0x268>
    11ea:	51 2c       	mov	r5, r1
    11ec:	89 2d       	mov	r24, r9
    11ee:	89 70       	andi	r24, 0x09	; 9
    11f0:	49 f4       	brne	.+18     	; 0x1204 <vfprintf+0x280>
    11f2:	55 20       	and	r5, r5
    11f4:	39 f0       	breq	.+14     	; 0x1204 <vfprintf+0x280>
    11f6:	b7 01       	movw	r22, r14
    11f8:	80 e2       	ldi	r24, 0x20	; 32
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
    1200:	5a 94       	dec	r5
    1202:	f7 cf       	rjmp	.-18     	; 0x11f2 <vfprintf+0x26e>
    1204:	00 23       	and	r16, r16
    1206:	29 f0       	breq	.+10     	; 0x1212 <vfprintf+0x28e>
    1208:	b7 01       	movw	r22, r14
    120a:	80 2f       	mov	r24, r16
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
    1212:	93 fc       	sbrc	r9, 3
    1214:	09 c0       	rjmp	.+18     	; 0x1228 <vfprintf+0x2a4>
    1216:	55 20       	and	r5, r5
    1218:	39 f0       	breq	.+14     	; 0x1228 <vfprintf+0x2a4>
    121a:	b7 01       	movw	r22, r14
    121c:	80 e3       	ldi	r24, 0x30	; 48
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
    1224:	5a 94       	dec	r5
    1226:	f7 cf       	rjmp	.-18     	; 0x1216 <vfprintf+0x292>
    1228:	97 fe       	sbrs	r9, 7
    122a:	4c c0       	rjmp	.+152    	; 0x12c4 <vfprintf+0x340>
    122c:	46 01       	movw	r8, r12
    122e:	d7 fe       	sbrs	r13, 7
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <vfprintf+0x2b2>
    1232:	81 2c       	mov	r8, r1
    1234:	91 2c       	mov	r9, r1
    1236:	c6 01       	movw	r24, r12
    1238:	88 19       	sub	r24, r8
    123a:	99 09       	sbc	r25, r9
    123c:	f3 01       	movw	r30, r6
    123e:	e8 0f       	add	r30, r24
    1240:	f9 1f       	adc	r31, r25
    1242:	fe 87       	std	Y+14, r31	; 0x0e
    1244:	ed 87       	std	Y+13, r30	; 0x0d
    1246:	96 01       	movw	r18, r12
    1248:	24 19       	sub	r18, r4
    124a:	31 09       	sbc	r19, r1
    124c:	38 8b       	std	Y+16, r19	; 0x10
    124e:	2f 87       	std	Y+15, r18	; 0x0f
    1250:	01 2f       	mov	r16, r17
    1252:	10 e0       	ldi	r17, 0x00	; 0
    1254:	11 95       	neg	r17
    1256:	01 95       	neg	r16
    1258:	11 09       	sbc	r17, r1
    125a:	3f ef       	ldi	r19, 0xFF	; 255
    125c:	83 16       	cp	r8, r19
    125e:	93 06       	cpc	r9, r19
    1260:	29 f4       	brne	.+10     	; 0x126c <vfprintf+0x2e8>
    1262:	b7 01       	movw	r22, r14
    1264:	8e e2       	ldi	r24, 0x2E	; 46
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
    126c:	c8 14       	cp	r12, r8
    126e:	d9 04       	cpc	r13, r9
    1270:	4c f0       	brlt	.+18     	; 0x1284 <vfprintf+0x300>
    1272:	8f 85       	ldd	r24, Y+15	; 0x0f
    1274:	98 89       	ldd	r25, Y+16	; 0x10
    1276:	88 15       	cp	r24, r8
    1278:	99 05       	cpc	r25, r9
    127a:	24 f4       	brge	.+8      	; 0x1284 <vfprintf+0x300>
    127c:	ed 85       	ldd	r30, Y+13	; 0x0d
    127e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1280:	81 81       	ldd	r24, Z+1	; 0x01
    1282:	01 c0       	rjmp	.+2      	; 0x1286 <vfprintf+0x302>
    1284:	80 e3       	ldi	r24, 0x30	; 48
    1286:	f1 e0       	ldi	r31, 0x01	; 1
    1288:	8f 1a       	sub	r8, r31
    128a:	91 08       	sbc	r9, r1
    128c:	2d 85       	ldd	r18, Y+13	; 0x0d
    128e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1290:	2f 5f       	subi	r18, 0xFF	; 255
    1292:	3f 4f       	sbci	r19, 0xFF	; 255
    1294:	3e 87       	std	Y+14, r19	; 0x0e
    1296:	2d 87       	std	Y+13, r18	; 0x0d
    1298:	80 16       	cp	r8, r16
    129a:	91 06       	cpc	r9, r17
    129c:	2c f0       	brlt	.+10     	; 0x12a8 <vfprintf+0x324>
    129e:	b7 01       	movw	r22, r14
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
    12a6:	d9 cf       	rjmp	.-78     	; 0x125a <vfprintf+0x2d6>
    12a8:	c8 14       	cp	r12, r8
    12aa:	d9 04       	cpc	r13, r9
    12ac:	41 f4       	brne	.+16     	; 0x12be <vfprintf+0x33a>
    12ae:	9a 81       	ldd	r25, Y+2	; 0x02
    12b0:	96 33       	cpi	r25, 0x36	; 54
    12b2:	20 f4       	brcc	.+8      	; 0x12bc <vfprintf+0x338>
    12b4:	95 33       	cpi	r25, 0x35	; 53
    12b6:	19 f4       	brne	.+6      	; 0x12be <vfprintf+0x33a>
    12b8:	3c 85       	ldd	r19, Y+12	; 0x0c
    12ba:	34 ff       	sbrs	r19, 4
    12bc:	81 e3       	ldi	r24, 0x31	; 49
    12be:	b7 01       	movw	r22, r14
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	4e c0       	rjmp	.+156    	; 0x1360 <vfprintf+0x3dc>
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	81 33       	cpi	r24, 0x31	; 49
    12c8:	19 f0       	breq	.+6      	; 0x12d0 <vfprintf+0x34c>
    12ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    12cc:	9f 7e       	andi	r25, 0xEF	; 239
    12ce:	9c 87       	std	Y+12, r25	; 0x0c
    12d0:	b7 01       	movw	r22, r14
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
    12d8:	11 11       	cpse	r17, r1
    12da:	05 c0       	rjmp	.+10     	; 0x12e6 <vfprintf+0x362>
    12dc:	94 fc       	sbrc	r9, 4
    12de:	18 c0       	rjmp	.+48     	; 0x1310 <vfprintf+0x38c>
    12e0:	85 e6       	ldi	r24, 0x65	; 101
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	17 c0       	rjmp	.+46     	; 0x1314 <vfprintf+0x390>
    12e6:	b7 01       	movw	r22, r14
    12e8:	8e e2       	ldi	r24, 0x2E	; 46
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
    12f0:	1e 5f       	subi	r17, 0xFE	; 254
    12f2:	82 e0       	ldi	r24, 0x02	; 2
    12f4:	01 e0       	ldi	r16, 0x01	; 1
    12f6:	08 0f       	add	r16, r24
    12f8:	f3 01       	movw	r30, r6
    12fa:	e8 0f       	add	r30, r24
    12fc:	f1 1d       	adc	r31, r1
    12fe:	80 81       	ld	r24, Z
    1300:	b7 01       	movw	r22, r14
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
    1308:	80 2f       	mov	r24, r16
    130a:	01 13       	cpse	r16, r17
    130c:	f3 cf       	rjmp	.-26     	; 0x12f4 <vfprintf+0x370>
    130e:	e6 cf       	rjmp	.-52     	; 0x12dc <vfprintf+0x358>
    1310:	85 e4       	ldi	r24, 0x45	; 69
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	b7 01       	movw	r22, r14
    1316:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
    131a:	d7 fc       	sbrc	r13, 7
    131c:	06 c0       	rjmp	.+12     	; 0x132a <vfprintf+0x3a6>
    131e:	c1 14       	cp	r12, r1
    1320:	d1 04       	cpc	r13, r1
    1322:	41 f4       	brne	.+16     	; 0x1334 <vfprintf+0x3b0>
    1324:	ec 85       	ldd	r30, Y+12	; 0x0c
    1326:	e4 ff       	sbrs	r30, 4
    1328:	05 c0       	rjmp	.+10     	; 0x1334 <vfprintf+0x3b0>
    132a:	d1 94       	neg	r13
    132c:	c1 94       	neg	r12
    132e:	d1 08       	sbc	r13, r1
    1330:	8d e2       	ldi	r24, 0x2D	; 45
    1332:	01 c0       	rjmp	.+2      	; 0x1336 <vfprintf+0x3b2>
    1334:	8b e2       	ldi	r24, 0x2B	; 43
    1336:	b7 01       	movw	r22, r14
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
    133e:	80 e3       	ldi	r24, 0x30	; 48
    1340:	2a e0       	ldi	r18, 0x0A	; 10
    1342:	c2 16       	cp	r12, r18
    1344:	d1 04       	cpc	r13, r1
    1346:	2c f0       	brlt	.+10     	; 0x1352 <vfprintf+0x3ce>
    1348:	8f 5f       	subi	r24, 0xFF	; 255
    134a:	fa e0       	ldi	r31, 0x0A	; 10
    134c:	cf 1a       	sub	r12, r31
    134e:	d1 08       	sbc	r13, r1
    1350:	f7 cf       	rjmp	.-18     	; 0x1340 <vfprintf+0x3bc>
    1352:	b7 01       	movw	r22, r14
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
    135a:	b7 01       	movw	r22, r14
    135c:	c6 01       	movw	r24, r12
    135e:	c0 96       	adiw	r24, 0x30	; 48
    1360:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
    1364:	54 c1       	rjmp	.+680    	; 0x160e <vfprintf+0x68a>
    1366:	83 36       	cpi	r24, 0x63	; 99
    1368:	31 f0       	breq	.+12     	; 0x1376 <vfprintf+0x3f2>
    136a:	83 37       	cpi	r24, 0x73	; 115
    136c:	79 f0       	breq	.+30     	; 0x138c <vfprintf+0x408>
    136e:	83 35       	cpi	r24, 0x53	; 83
    1370:	09 f0       	breq	.+2      	; 0x1374 <vfprintf+0x3f0>
    1372:	56 c0       	rjmp	.+172    	; 0x1420 <vfprintf+0x49c>
    1374:	20 c0       	rjmp	.+64     	; 0x13b6 <vfprintf+0x432>
    1376:	56 01       	movw	r10, r12
    1378:	32 e0       	ldi	r19, 0x02	; 2
    137a:	a3 0e       	add	r10, r19
    137c:	b1 1c       	adc	r11, r1
    137e:	f6 01       	movw	r30, r12
    1380:	80 81       	ld	r24, Z
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	01 e0       	ldi	r16, 0x01	; 1
    1386:	10 e0       	ldi	r17, 0x00	; 0
    1388:	63 01       	movw	r12, r6
    138a:	12 c0       	rjmp	.+36     	; 0x13b0 <vfprintf+0x42c>
    138c:	56 01       	movw	r10, r12
    138e:	f2 e0       	ldi	r31, 0x02	; 2
    1390:	af 0e       	add	r10, r31
    1392:	b1 1c       	adc	r11, r1
    1394:	f6 01       	movw	r30, r12
    1396:	c0 80       	ld	r12, Z
    1398:	d1 80       	ldd	r13, Z+1	; 0x01
    139a:	96 fe       	sbrs	r9, 6
    139c:	03 c0       	rjmp	.+6      	; 0x13a4 <vfprintf+0x420>
    139e:	61 2f       	mov	r22, r17
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <vfprintf+0x424>
    13a4:	6f ef       	ldi	r22, 0xFF	; 255
    13a6:	7f ef       	ldi	r23, 0xFF	; 255
    13a8:	c6 01       	movw	r24, r12
    13aa:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <strnlen>
    13ae:	8c 01       	movw	r16, r24
    13b0:	f9 2d       	mov	r31, r9
    13b2:	ff 77       	andi	r31, 0x7F	; 127
    13b4:	14 c0       	rjmp	.+40     	; 0x13de <vfprintf+0x45a>
    13b6:	56 01       	movw	r10, r12
    13b8:	22 e0       	ldi	r18, 0x02	; 2
    13ba:	a2 0e       	add	r10, r18
    13bc:	b1 1c       	adc	r11, r1
    13be:	f6 01       	movw	r30, r12
    13c0:	c0 80       	ld	r12, Z
    13c2:	d1 80       	ldd	r13, Z+1	; 0x01
    13c4:	96 fe       	sbrs	r9, 6
    13c6:	03 c0       	rjmp	.+6      	; 0x13ce <vfprintf+0x44a>
    13c8:	61 2f       	mov	r22, r17
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <vfprintf+0x44e>
    13ce:	6f ef       	ldi	r22, 0xFF	; 255
    13d0:	7f ef       	ldi	r23, 0xFF	; 255
    13d2:	c6 01       	movw	r24, r12
    13d4:	0e 94 4e 0c 	call	0x189c	; 0x189c <strnlen_P>
    13d8:	8c 01       	movw	r16, r24
    13da:	f9 2d       	mov	r31, r9
    13dc:	f0 68       	ori	r31, 0x80	; 128
    13de:	9f 2e       	mov	r9, r31
    13e0:	f3 fd       	sbrc	r31, 3
    13e2:	1a c0       	rjmp	.+52     	; 0x1418 <vfprintf+0x494>
    13e4:	85 2d       	mov	r24, r5
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	08 17       	cp	r16, r24
    13ea:	19 07       	cpc	r17, r25
    13ec:	a8 f4       	brcc	.+42     	; 0x1418 <vfprintf+0x494>
    13ee:	b7 01       	movw	r22, r14
    13f0:	80 e2       	ldi	r24, 0x20	; 32
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
    13f8:	5a 94       	dec	r5
    13fa:	f4 cf       	rjmp	.-24     	; 0x13e4 <vfprintf+0x460>
    13fc:	f6 01       	movw	r30, r12
    13fe:	97 fc       	sbrc	r9, 7
    1400:	85 91       	lpm	r24, Z+
    1402:	97 fe       	sbrs	r9, 7
    1404:	81 91       	ld	r24, Z+
    1406:	6f 01       	movw	r12, r30
    1408:	b7 01       	movw	r22, r14
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
    1410:	51 10       	cpse	r5, r1
    1412:	5a 94       	dec	r5
    1414:	01 50       	subi	r16, 0x01	; 1
    1416:	11 09       	sbc	r17, r1
    1418:	01 15       	cp	r16, r1
    141a:	11 05       	cpc	r17, r1
    141c:	79 f7       	brne	.-34     	; 0x13fc <vfprintf+0x478>
    141e:	f7 c0       	rjmp	.+494    	; 0x160e <vfprintf+0x68a>
    1420:	84 36       	cpi	r24, 0x64	; 100
    1422:	11 f0       	breq	.+4      	; 0x1428 <vfprintf+0x4a4>
    1424:	89 36       	cpi	r24, 0x69	; 105
    1426:	61 f5       	brne	.+88     	; 0x1480 <vfprintf+0x4fc>
    1428:	56 01       	movw	r10, r12
    142a:	97 fe       	sbrs	r9, 7
    142c:	09 c0       	rjmp	.+18     	; 0x1440 <vfprintf+0x4bc>
    142e:	24 e0       	ldi	r18, 0x04	; 4
    1430:	a2 0e       	add	r10, r18
    1432:	b1 1c       	adc	r11, r1
    1434:	f6 01       	movw	r30, r12
    1436:	60 81       	ld	r22, Z
    1438:	71 81       	ldd	r23, Z+1	; 0x01
    143a:	82 81       	ldd	r24, Z+2	; 0x02
    143c:	93 81       	ldd	r25, Z+3	; 0x03
    143e:	0a c0       	rjmp	.+20     	; 0x1454 <vfprintf+0x4d0>
    1440:	f2 e0       	ldi	r31, 0x02	; 2
    1442:	af 0e       	add	r10, r31
    1444:	b1 1c       	adc	r11, r1
    1446:	f6 01       	movw	r30, r12
    1448:	60 81       	ld	r22, Z
    144a:	71 81       	ldd	r23, Z+1	; 0x01
    144c:	07 2e       	mov	r0, r23
    144e:	00 0c       	add	r0, r0
    1450:	88 0b       	sbc	r24, r24
    1452:	99 0b       	sbc	r25, r25
    1454:	f9 2d       	mov	r31, r9
    1456:	ff 76       	andi	r31, 0x6F	; 111
    1458:	9f 2e       	mov	r9, r31
    145a:	97 ff       	sbrs	r25, 7
    145c:	09 c0       	rjmp	.+18     	; 0x1470 <vfprintf+0x4ec>
    145e:	90 95       	com	r25
    1460:	80 95       	com	r24
    1462:	70 95       	com	r23
    1464:	61 95       	neg	r22
    1466:	7f 4f       	sbci	r23, 0xFF	; 255
    1468:	8f 4f       	sbci	r24, 0xFF	; 255
    146a:	9f 4f       	sbci	r25, 0xFF	; 255
    146c:	f0 68       	ori	r31, 0x80	; 128
    146e:	9f 2e       	mov	r9, r31
    1470:	2a e0       	ldi	r18, 0x0A	; 10
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	a3 01       	movw	r20, r6
    1476:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__ultoa_invert>
    147a:	c8 2e       	mov	r12, r24
    147c:	c6 18       	sub	r12, r6
    147e:	3f c0       	rjmp	.+126    	; 0x14fe <vfprintf+0x57a>
    1480:	09 2d       	mov	r16, r9
    1482:	85 37       	cpi	r24, 0x75	; 117
    1484:	21 f4       	brne	.+8      	; 0x148e <vfprintf+0x50a>
    1486:	0f 7e       	andi	r16, 0xEF	; 239
    1488:	2a e0       	ldi	r18, 0x0A	; 10
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	1d c0       	rjmp	.+58     	; 0x14c8 <vfprintf+0x544>
    148e:	09 7f       	andi	r16, 0xF9	; 249
    1490:	8f 36       	cpi	r24, 0x6F	; 111
    1492:	91 f0       	breq	.+36     	; 0x14b8 <vfprintf+0x534>
    1494:	18 f4       	brcc	.+6      	; 0x149c <vfprintf+0x518>
    1496:	88 35       	cpi	r24, 0x58	; 88
    1498:	59 f0       	breq	.+22     	; 0x14b0 <vfprintf+0x52c>
    149a:	c3 c0       	rjmp	.+390    	; 0x1622 <vfprintf+0x69e>
    149c:	80 37       	cpi	r24, 0x70	; 112
    149e:	19 f0       	breq	.+6      	; 0x14a6 <vfprintf+0x522>
    14a0:	88 37       	cpi	r24, 0x78	; 120
    14a2:	11 f0       	breq	.+4      	; 0x14a8 <vfprintf+0x524>
    14a4:	be c0       	rjmp	.+380    	; 0x1622 <vfprintf+0x69e>
    14a6:	00 61       	ori	r16, 0x10	; 16
    14a8:	04 ff       	sbrs	r16, 4
    14aa:	09 c0       	rjmp	.+18     	; 0x14be <vfprintf+0x53a>
    14ac:	04 60       	ori	r16, 0x04	; 4
    14ae:	07 c0       	rjmp	.+14     	; 0x14be <vfprintf+0x53a>
    14b0:	94 fe       	sbrs	r9, 4
    14b2:	08 c0       	rjmp	.+16     	; 0x14c4 <vfprintf+0x540>
    14b4:	06 60       	ori	r16, 0x06	; 6
    14b6:	06 c0       	rjmp	.+12     	; 0x14c4 <vfprintf+0x540>
    14b8:	28 e0       	ldi	r18, 0x08	; 8
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	05 c0       	rjmp	.+10     	; 0x14c8 <vfprintf+0x544>
    14be:	20 e1       	ldi	r18, 0x10	; 16
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <vfprintf+0x544>
    14c4:	20 e1       	ldi	r18, 0x10	; 16
    14c6:	32 e0       	ldi	r19, 0x02	; 2
    14c8:	56 01       	movw	r10, r12
    14ca:	07 ff       	sbrs	r16, 7
    14cc:	09 c0       	rjmp	.+18     	; 0x14e0 <vfprintf+0x55c>
    14ce:	84 e0       	ldi	r24, 0x04	; 4
    14d0:	a8 0e       	add	r10, r24
    14d2:	b1 1c       	adc	r11, r1
    14d4:	f6 01       	movw	r30, r12
    14d6:	60 81       	ld	r22, Z
    14d8:	71 81       	ldd	r23, Z+1	; 0x01
    14da:	82 81       	ldd	r24, Z+2	; 0x02
    14dc:	93 81       	ldd	r25, Z+3	; 0x03
    14de:	08 c0       	rjmp	.+16     	; 0x14f0 <vfprintf+0x56c>
    14e0:	f2 e0       	ldi	r31, 0x02	; 2
    14e2:	af 0e       	add	r10, r31
    14e4:	b1 1c       	adc	r11, r1
    14e6:	f6 01       	movw	r30, r12
    14e8:	60 81       	ld	r22, Z
    14ea:	71 81       	ldd	r23, Z+1	; 0x01
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	a3 01       	movw	r20, r6
    14f2:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__ultoa_invert>
    14f6:	c8 2e       	mov	r12, r24
    14f8:	c6 18       	sub	r12, r6
    14fa:	0f 77       	andi	r16, 0x7F	; 127
    14fc:	90 2e       	mov	r9, r16
    14fe:	96 fe       	sbrs	r9, 6
    1500:	0b c0       	rjmp	.+22     	; 0x1518 <vfprintf+0x594>
    1502:	09 2d       	mov	r16, r9
    1504:	0e 7f       	andi	r16, 0xFE	; 254
    1506:	c1 16       	cp	r12, r17
    1508:	50 f4       	brcc	.+20     	; 0x151e <vfprintf+0x59a>
    150a:	94 fe       	sbrs	r9, 4
    150c:	0a c0       	rjmp	.+20     	; 0x1522 <vfprintf+0x59e>
    150e:	92 fc       	sbrc	r9, 2
    1510:	08 c0       	rjmp	.+16     	; 0x1522 <vfprintf+0x59e>
    1512:	09 2d       	mov	r16, r9
    1514:	0e 7e       	andi	r16, 0xEE	; 238
    1516:	05 c0       	rjmp	.+10     	; 0x1522 <vfprintf+0x59e>
    1518:	dc 2c       	mov	r13, r12
    151a:	09 2d       	mov	r16, r9
    151c:	03 c0       	rjmp	.+6      	; 0x1524 <vfprintf+0x5a0>
    151e:	dc 2c       	mov	r13, r12
    1520:	01 c0       	rjmp	.+2      	; 0x1524 <vfprintf+0x5a0>
    1522:	d1 2e       	mov	r13, r17
    1524:	04 ff       	sbrs	r16, 4
    1526:	0d c0       	rjmp	.+26     	; 0x1542 <vfprintf+0x5be>
    1528:	fe 01       	movw	r30, r28
    152a:	ec 0d       	add	r30, r12
    152c:	f1 1d       	adc	r31, r1
    152e:	80 81       	ld	r24, Z
    1530:	80 33       	cpi	r24, 0x30	; 48
    1532:	11 f4       	brne	.+4      	; 0x1538 <vfprintf+0x5b4>
    1534:	09 7e       	andi	r16, 0xE9	; 233
    1536:	09 c0       	rjmp	.+18     	; 0x154a <vfprintf+0x5c6>
    1538:	02 ff       	sbrs	r16, 2
    153a:	06 c0       	rjmp	.+12     	; 0x1548 <vfprintf+0x5c4>
    153c:	d3 94       	inc	r13
    153e:	d3 94       	inc	r13
    1540:	04 c0       	rjmp	.+8      	; 0x154a <vfprintf+0x5c6>
    1542:	80 2f       	mov	r24, r16
    1544:	86 78       	andi	r24, 0x86	; 134
    1546:	09 f0       	breq	.+2      	; 0x154a <vfprintf+0x5c6>
    1548:	d3 94       	inc	r13
    154a:	03 fd       	sbrc	r16, 3
    154c:	11 c0       	rjmp	.+34     	; 0x1570 <vfprintf+0x5ec>
    154e:	00 ff       	sbrs	r16, 0
    1550:	06 c0       	rjmp	.+12     	; 0x155e <vfprintf+0x5da>
    1552:	1c 2d       	mov	r17, r12
    1554:	d5 14       	cp	r13, r5
    1556:	80 f4       	brcc	.+32     	; 0x1578 <vfprintf+0x5f4>
    1558:	15 0d       	add	r17, r5
    155a:	1d 19       	sub	r17, r13
    155c:	0d c0       	rjmp	.+26     	; 0x1578 <vfprintf+0x5f4>
    155e:	d5 14       	cp	r13, r5
    1560:	58 f4       	brcc	.+22     	; 0x1578 <vfprintf+0x5f4>
    1562:	b7 01       	movw	r22, r14
    1564:	80 e2       	ldi	r24, 0x20	; 32
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
    156c:	d3 94       	inc	r13
    156e:	f7 cf       	rjmp	.-18     	; 0x155e <vfprintf+0x5da>
    1570:	d5 14       	cp	r13, r5
    1572:	10 f4       	brcc	.+4      	; 0x1578 <vfprintf+0x5f4>
    1574:	5d 18       	sub	r5, r13
    1576:	01 c0       	rjmp	.+2      	; 0x157a <vfprintf+0x5f6>
    1578:	51 2c       	mov	r5, r1
    157a:	04 ff       	sbrs	r16, 4
    157c:	10 c0       	rjmp	.+32     	; 0x159e <vfprintf+0x61a>
    157e:	b7 01       	movw	r22, r14
    1580:	80 e3       	ldi	r24, 0x30	; 48
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
    1588:	02 ff       	sbrs	r16, 2
    158a:	17 c0       	rjmp	.+46     	; 0x15ba <vfprintf+0x636>
    158c:	01 fd       	sbrc	r16, 1
    158e:	03 c0       	rjmp	.+6      	; 0x1596 <vfprintf+0x612>
    1590:	88 e7       	ldi	r24, 0x78	; 120
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	02 c0       	rjmp	.+4      	; 0x159a <vfprintf+0x616>
    1596:	88 e5       	ldi	r24, 0x58	; 88
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	b7 01       	movw	r22, r14
    159c:	0c c0       	rjmp	.+24     	; 0x15b6 <vfprintf+0x632>
    159e:	80 2f       	mov	r24, r16
    15a0:	86 78       	andi	r24, 0x86	; 134
    15a2:	59 f0       	breq	.+22     	; 0x15ba <vfprintf+0x636>
    15a4:	01 ff       	sbrs	r16, 1
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <vfprintf+0x628>
    15a8:	8b e2       	ldi	r24, 0x2B	; 43
    15aa:	01 c0       	rjmp	.+2      	; 0x15ae <vfprintf+0x62a>
    15ac:	80 e2       	ldi	r24, 0x20	; 32
    15ae:	07 fd       	sbrc	r16, 7
    15b0:	8d e2       	ldi	r24, 0x2D	; 45
    15b2:	b7 01       	movw	r22, r14
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
    15ba:	c1 16       	cp	r12, r17
    15bc:	38 f4       	brcc	.+14     	; 0x15cc <vfprintf+0x648>
    15be:	b7 01       	movw	r22, r14
    15c0:	80 e3       	ldi	r24, 0x30	; 48
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
    15c8:	11 50       	subi	r17, 0x01	; 1
    15ca:	f7 cf       	rjmp	.-18     	; 0x15ba <vfprintf+0x636>
    15cc:	ca 94       	dec	r12
    15ce:	f3 01       	movw	r30, r6
    15d0:	ec 0d       	add	r30, r12
    15d2:	f1 1d       	adc	r31, r1
    15d4:	80 81       	ld	r24, Z
    15d6:	b7 01       	movw	r22, r14
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
    15de:	c1 10       	cpse	r12, r1
    15e0:	f5 cf       	rjmp	.-22     	; 0x15cc <vfprintf+0x648>
    15e2:	15 c0       	rjmp	.+42     	; 0x160e <vfprintf+0x68a>
    15e4:	f4 e0       	ldi	r31, 0x04	; 4
    15e6:	f5 15       	cp	r31, r5
    15e8:	60 f5       	brcc	.+88     	; 0x1642 <vfprintf+0x6be>
    15ea:	84 e0       	ldi	r24, 0x04	; 4
    15ec:	58 1a       	sub	r5, r24
    15ee:	93 fe       	sbrs	r9, 3
    15f0:	1f c0       	rjmp	.+62     	; 0x1630 <vfprintf+0x6ac>
    15f2:	01 11       	cpse	r16, r1
    15f4:	27 c0       	rjmp	.+78     	; 0x1644 <vfprintf+0x6c0>
    15f6:	2c 85       	ldd	r18, Y+12	; 0x0c
    15f8:	23 ff       	sbrs	r18, 3
    15fa:	2a c0       	rjmp	.+84     	; 0x1650 <vfprintf+0x6cc>
    15fc:	04 e5       	ldi	r16, 0x54	; 84
    15fe:	10 e0       	ldi	r17, 0x00	; 0
    1600:	39 2d       	mov	r19, r9
    1602:	30 71       	andi	r19, 0x10	; 16
    1604:	93 2e       	mov	r9, r19
    1606:	f8 01       	movw	r30, r16
    1608:	84 91       	lpm	r24, Z
    160a:	81 11       	cpse	r24, r1
    160c:	24 c0       	rjmp	.+72     	; 0x1656 <vfprintf+0x6d2>
    160e:	55 20       	and	r5, r5
    1610:	09 f4       	brne	.+2      	; 0x1614 <vfprintf+0x690>
    1612:	e4 cc       	rjmp	.-1592   	; 0xfdc <vfprintf+0x58>
    1614:	b7 01       	movw	r22, r14
    1616:	80 e2       	ldi	r24, 0x20	; 32
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
    161e:	5a 94       	dec	r5
    1620:	f6 cf       	rjmp	.-20     	; 0x160e <vfprintf+0x68a>
    1622:	f7 01       	movw	r30, r14
    1624:	86 81       	ldd	r24, Z+6	; 0x06
    1626:	97 81       	ldd	r25, Z+7	; 0x07
    1628:	26 c0       	rjmp	.+76     	; 0x1676 <vfprintf+0x6f2>
    162a:	8f ef       	ldi	r24, 0xFF	; 255
    162c:	9f ef       	ldi	r25, 0xFF	; 255
    162e:	23 c0       	rjmp	.+70     	; 0x1676 <vfprintf+0x6f2>
    1630:	b7 01       	movw	r22, r14
    1632:	80 e2       	ldi	r24, 0x20	; 32
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
    163a:	5a 94       	dec	r5
    163c:	51 10       	cpse	r5, r1
    163e:	f8 cf       	rjmp	.-16     	; 0x1630 <vfprintf+0x6ac>
    1640:	d8 cf       	rjmp	.-80     	; 0x15f2 <vfprintf+0x66e>
    1642:	51 2c       	mov	r5, r1
    1644:	b7 01       	movw	r22, r14
    1646:	80 2f       	mov	r24, r16
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
    164e:	d3 cf       	rjmp	.-90     	; 0x15f6 <vfprintf+0x672>
    1650:	08 e5       	ldi	r16, 0x58	; 88
    1652:	10 e0       	ldi	r17, 0x00	; 0
    1654:	d5 cf       	rjmp	.-86     	; 0x1600 <vfprintf+0x67c>
    1656:	91 10       	cpse	r9, r1
    1658:	80 52       	subi	r24, 0x20	; 32
    165a:	b7 01       	movw	r22, r14
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <fputc>
    1662:	0f 5f       	subi	r16, 0xFF	; 255
    1664:	1f 4f       	sbci	r17, 0xFF	; 255
    1666:	cf cf       	rjmp	.-98     	; 0x1606 <vfprintf+0x682>
    1668:	23 e0       	ldi	r18, 0x03	; 3
    166a:	25 15       	cp	r18, r5
    166c:	10 f4       	brcc	.+4      	; 0x1672 <vfprintf+0x6ee>
    166e:	83 e0       	ldi	r24, 0x03	; 3
    1670:	bd cf       	rjmp	.-134    	; 0x15ec <vfprintf+0x668>
    1672:	51 2c       	mov	r5, r1
    1674:	c0 cf       	rjmp	.-128    	; 0x15f6 <vfprintf+0x672>
    1676:	60 96       	adiw	r28, 0x10	; 16
    1678:	e2 e1       	ldi	r30, 0x12	; 18
    167a:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <__epilogue_restores__>

0000167e <__prologue_saves__>:
    167e:	2f 92       	push	r2
    1680:	3f 92       	push	r3
    1682:	4f 92       	push	r4
    1684:	5f 92       	push	r5
    1686:	6f 92       	push	r6
    1688:	7f 92       	push	r7
    168a:	8f 92       	push	r8
    168c:	9f 92       	push	r9
    168e:	af 92       	push	r10
    1690:	bf 92       	push	r11
    1692:	cf 92       	push	r12
    1694:	df 92       	push	r13
    1696:	ef 92       	push	r14
    1698:	ff 92       	push	r15
    169a:	0f 93       	push	r16
    169c:	1f 93       	push	r17
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	ca 1b       	sub	r28, r26
    16a8:	db 0b       	sbc	r29, r27
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	09 94       	ijmp

000016b6 <__epilogue_restores__>:
    16b6:	2a 88       	ldd	r2, Y+18	; 0x12
    16b8:	39 88       	ldd	r3, Y+17	; 0x11
    16ba:	48 88       	ldd	r4, Y+16	; 0x10
    16bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    16be:	6e 84       	ldd	r6, Y+14	; 0x0e
    16c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    16c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    16c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    16c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    16c8:	b9 84       	ldd	r11, Y+9	; 0x09
    16ca:	c8 84       	ldd	r12, Y+8	; 0x08
    16cc:	df 80       	ldd	r13, Y+7	; 0x07
    16ce:	ee 80       	ldd	r14, Y+6	; 0x06
    16d0:	fd 80       	ldd	r15, Y+5	; 0x05
    16d2:	0c 81       	ldd	r16, Y+4	; 0x04
    16d4:	1b 81       	ldd	r17, Y+3	; 0x03
    16d6:	aa 81       	ldd	r26, Y+2	; 0x02
    16d8:	b9 81       	ldd	r27, Y+1	; 0x01
    16da:	ce 0f       	add	r28, r30
    16dc:	d1 1d       	adc	r29, r1
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	ed 01       	movw	r28, r26
    16ea:	08 95       	ret

000016ec <__ftoa_engine>:
    16ec:	28 30       	cpi	r18, 0x08	; 8
    16ee:	08 f0       	brcs	.+2      	; 0x16f2 <__ftoa_engine+0x6>
    16f0:	27 e0       	ldi	r18, 0x07	; 7
    16f2:	33 27       	eor	r19, r19
    16f4:	da 01       	movw	r26, r20
    16f6:	99 0f       	add	r25, r25
    16f8:	31 1d       	adc	r19, r1
    16fa:	87 fd       	sbrc	r24, 7
    16fc:	91 60       	ori	r25, 0x01	; 1
    16fe:	00 96       	adiw	r24, 0x00	; 0
    1700:	61 05       	cpc	r22, r1
    1702:	71 05       	cpc	r23, r1
    1704:	39 f4       	brne	.+14     	; 0x1714 <__ftoa_engine+0x28>
    1706:	32 60       	ori	r19, 0x02	; 2
    1708:	2e 5f       	subi	r18, 0xFE	; 254
    170a:	3d 93       	st	X+, r19
    170c:	30 e3       	ldi	r19, 0x30	; 48
    170e:	2a 95       	dec	r18
    1710:	e1 f7       	brne	.-8      	; 0x170a <__ftoa_engine+0x1e>
    1712:	08 95       	ret
    1714:	9f 3f       	cpi	r25, 0xFF	; 255
    1716:	30 f0       	brcs	.+12     	; 0x1724 <__ftoa_engine+0x38>
    1718:	80 38       	cpi	r24, 0x80	; 128
    171a:	71 05       	cpc	r23, r1
    171c:	61 05       	cpc	r22, r1
    171e:	09 f0       	breq	.+2      	; 0x1722 <__ftoa_engine+0x36>
    1720:	3c 5f       	subi	r19, 0xFC	; 252
    1722:	3c 5f       	subi	r19, 0xFC	; 252
    1724:	3d 93       	st	X+, r19
    1726:	91 30       	cpi	r25, 0x01	; 1
    1728:	08 f0       	brcs	.+2      	; 0x172c <__ftoa_engine+0x40>
    172a:	80 68       	ori	r24, 0x80	; 128
    172c:	91 1d       	adc	r25, r1
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	1f 93       	push	r17
    1734:	0f 93       	push	r16
    1736:	ff 92       	push	r15
    1738:	ef 92       	push	r14
    173a:	19 2f       	mov	r17, r25
    173c:	98 7f       	andi	r25, 0xF8	; 248
    173e:	96 95       	lsr	r25
    1740:	e9 2f       	mov	r30, r25
    1742:	96 95       	lsr	r25
    1744:	96 95       	lsr	r25
    1746:	e9 0f       	add	r30, r25
    1748:	ff 27       	eor	r31, r31
    174a:	ea 54       	subi	r30, 0x4A	; 74
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	99 27       	eor	r25, r25
    1750:	33 27       	eor	r19, r19
    1752:	ee 24       	eor	r14, r14
    1754:	ff 24       	eor	r15, r15
    1756:	a7 01       	movw	r20, r14
    1758:	e7 01       	movw	r28, r14
    175a:	05 90       	lpm	r0, Z+
    175c:	08 94       	sec
    175e:	07 94       	ror	r0
    1760:	28 f4       	brcc	.+10     	; 0x176c <__ftoa_engine+0x80>
    1762:	36 0f       	add	r19, r22
    1764:	e7 1e       	adc	r14, r23
    1766:	f8 1e       	adc	r15, r24
    1768:	49 1f       	adc	r20, r25
    176a:	51 1d       	adc	r21, r1
    176c:	66 0f       	add	r22, r22
    176e:	77 1f       	adc	r23, r23
    1770:	88 1f       	adc	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	06 94       	lsr	r0
    1776:	a1 f7       	brne	.-24     	; 0x1760 <__ftoa_engine+0x74>
    1778:	05 90       	lpm	r0, Z+
    177a:	07 94       	ror	r0
    177c:	28 f4       	brcc	.+10     	; 0x1788 <__ftoa_engine+0x9c>
    177e:	e7 0e       	add	r14, r23
    1780:	f8 1e       	adc	r15, r24
    1782:	49 1f       	adc	r20, r25
    1784:	56 1f       	adc	r21, r22
    1786:	c1 1d       	adc	r28, r1
    1788:	77 0f       	add	r23, r23
    178a:	88 1f       	adc	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	66 1f       	adc	r22, r22
    1790:	06 94       	lsr	r0
    1792:	a1 f7       	brne	.-24     	; 0x177c <__ftoa_engine+0x90>
    1794:	05 90       	lpm	r0, Z+
    1796:	07 94       	ror	r0
    1798:	28 f4       	brcc	.+10     	; 0x17a4 <__ftoa_engine+0xb8>
    179a:	f8 0e       	add	r15, r24
    179c:	49 1f       	adc	r20, r25
    179e:	56 1f       	adc	r21, r22
    17a0:	c7 1f       	adc	r28, r23
    17a2:	d1 1d       	adc	r29, r1
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	66 1f       	adc	r22, r22
    17aa:	77 1f       	adc	r23, r23
    17ac:	06 94       	lsr	r0
    17ae:	a1 f7       	brne	.-24     	; 0x1798 <__ftoa_engine+0xac>
    17b0:	05 90       	lpm	r0, Z+
    17b2:	07 94       	ror	r0
    17b4:	20 f4       	brcc	.+8      	; 0x17be <__ftoa_engine+0xd2>
    17b6:	49 0f       	add	r20, r25
    17b8:	56 1f       	adc	r21, r22
    17ba:	c7 1f       	adc	r28, r23
    17bc:	d8 1f       	adc	r29, r24
    17be:	99 0f       	add	r25, r25
    17c0:	66 1f       	adc	r22, r22
    17c2:	77 1f       	adc	r23, r23
    17c4:	88 1f       	adc	r24, r24
    17c6:	06 94       	lsr	r0
    17c8:	a9 f7       	brne	.-22     	; 0x17b4 <__ftoa_engine+0xc8>
    17ca:	84 91       	lpm	r24, Z
    17cc:	10 95       	com	r17
    17ce:	17 70       	andi	r17, 0x07	; 7
    17d0:	41 f0       	breq	.+16     	; 0x17e2 <__ftoa_engine+0xf6>
    17d2:	d6 95       	lsr	r29
    17d4:	c7 95       	ror	r28
    17d6:	57 95       	ror	r21
    17d8:	47 95       	ror	r20
    17da:	f7 94       	ror	r15
    17dc:	e7 94       	ror	r14
    17de:	1a 95       	dec	r17
    17e0:	c1 f7       	brne	.-16     	; 0x17d2 <__ftoa_engine+0xe6>
    17e2:	ec e5       	ldi	r30, 0x5C	; 92
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	68 94       	set
    17e8:	15 90       	lpm	r1, Z+
    17ea:	15 91       	lpm	r17, Z+
    17ec:	35 91       	lpm	r19, Z+
    17ee:	65 91       	lpm	r22, Z+
    17f0:	95 91       	lpm	r25, Z+
    17f2:	05 90       	lpm	r0, Z+
    17f4:	7f e2       	ldi	r23, 0x2F	; 47
    17f6:	73 95       	inc	r23
    17f8:	e1 18       	sub	r14, r1
    17fa:	f1 0a       	sbc	r15, r17
    17fc:	43 0b       	sbc	r20, r19
    17fe:	56 0b       	sbc	r21, r22
    1800:	c9 0b       	sbc	r28, r25
    1802:	d0 09       	sbc	r29, r0
    1804:	c0 f7       	brcc	.-16     	; 0x17f6 <__ftoa_engine+0x10a>
    1806:	e1 0c       	add	r14, r1
    1808:	f1 1e       	adc	r15, r17
    180a:	43 1f       	adc	r20, r19
    180c:	56 1f       	adc	r21, r22
    180e:	c9 1f       	adc	r28, r25
    1810:	d0 1d       	adc	r29, r0
    1812:	7e f4       	brtc	.+30     	; 0x1832 <__ftoa_engine+0x146>
    1814:	70 33       	cpi	r23, 0x30	; 48
    1816:	11 f4       	brne	.+4      	; 0x181c <__ftoa_engine+0x130>
    1818:	8a 95       	dec	r24
    181a:	e6 cf       	rjmp	.-52     	; 0x17e8 <__ftoa_engine+0xfc>
    181c:	e8 94       	clt
    181e:	01 50       	subi	r16, 0x01	; 1
    1820:	30 f0       	brcs	.+12     	; 0x182e <__ftoa_engine+0x142>
    1822:	08 0f       	add	r16, r24
    1824:	0a f4       	brpl	.+2      	; 0x1828 <__ftoa_engine+0x13c>
    1826:	00 27       	eor	r16, r16
    1828:	02 17       	cp	r16, r18
    182a:	08 f4       	brcc	.+2      	; 0x182e <__ftoa_engine+0x142>
    182c:	20 2f       	mov	r18, r16
    182e:	23 95       	inc	r18
    1830:	02 2f       	mov	r16, r18
    1832:	7a 33       	cpi	r23, 0x3A	; 58
    1834:	28 f0       	brcs	.+10     	; 0x1840 <__ftoa_engine+0x154>
    1836:	79 e3       	ldi	r23, 0x39	; 57
    1838:	7d 93       	st	X+, r23
    183a:	2a 95       	dec	r18
    183c:	e9 f7       	brne	.-6      	; 0x1838 <__ftoa_engine+0x14c>
    183e:	10 c0       	rjmp	.+32     	; 0x1860 <__ftoa_engine+0x174>
    1840:	7d 93       	st	X+, r23
    1842:	2a 95       	dec	r18
    1844:	89 f6       	brne	.-94     	; 0x17e8 <__ftoa_engine+0xfc>
    1846:	06 94       	lsr	r0
    1848:	97 95       	ror	r25
    184a:	67 95       	ror	r22
    184c:	37 95       	ror	r19
    184e:	17 95       	ror	r17
    1850:	17 94       	ror	r1
    1852:	e1 18       	sub	r14, r1
    1854:	f1 0a       	sbc	r15, r17
    1856:	43 0b       	sbc	r20, r19
    1858:	56 0b       	sbc	r21, r22
    185a:	c9 0b       	sbc	r28, r25
    185c:	d0 09       	sbc	r29, r0
    185e:	98 f0       	brcs	.+38     	; 0x1886 <__ftoa_engine+0x19a>
    1860:	23 95       	inc	r18
    1862:	7e 91       	ld	r23, -X
    1864:	73 95       	inc	r23
    1866:	7a 33       	cpi	r23, 0x3A	; 58
    1868:	08 f0       	brcs	.+2      	; 0x186c <__ftoa_engine+0x180>
    186a:	70 e3       	ldi	r23, 0x30	; 48
    186c:	7c 93       	st	X, r23
    186e:	20 13       	cpse	r18, r16
    1870:	b8 f7       	brcc	.-18     	; 0x1860 <__ftoa_engine+0x174>
    1872:	7e 91       	ld	r23, -X
    1874:	70 61       	ori	r23, 0x10	; 16
    1876:	7d 93       	st	X+, r23
    1878:	30 f0       	brcs	.+12     	; 0x1886 <__ftoa_engine+0x19a>
    187a:	83 95       	inc	r24
    187c:	71 e3       	ldi	r23, 0x31	; 49
    187e:	7d 93       	st	X+, r23
    1880:	70 e3       	ldi	r23, 0x30	; 48
    1882:	2a 95       	dec	r18
    1884:	e1 f7       	brne	.-8      	; 0x187e <__ftoa_engine+0x192>
    1886:	11 24       	eor	r1, r1
    1888:	ef 90       	pop	r14
    188a:	ff 90       	pop	r15
    188c:	0f 91       	pop	r16
    188e:	1f 91       	pop	r17
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	99 27       	eor	r25, r25
    1896:	87 fd       	sbrc	r24, 7
    1898:	90 95       	com	r25
    189a:	08 95       	ret

0000189c <strnlen_P>:
    189c:	fc 01       	movw	r30, r24
    189e:	05 90       	lpm	r0, Z+
    18a0:	61 50       	subi	r22, 0x01	; 1
    18a2:	70 40       	sbci	r23, 0x00	; 0
    18a4:	01 10       	cpse	r0, r1
    18a6:	d8 f7       	brcc	.-10     	; 0x189e <strnlen_P+0x2>
    18a8:	80 95       	com	r24
    18aa:	90 95       	com	r25
    18ac:	8e 0f       	add	r24, r30
    18ae:	9f 1f       	adc	r25, r31
    18b0:	08 95       	ret

000018b2 <strnlen>:
    18b2:	fc 01       	movw	r30, r24
    18b4:	61 50       	subi	r22, 0x01	; 1
    18b6:	70 40       	sbci	r23, 0x00	; 0
    18b8:	01 90       	ld	r0, Z+
    18ba:	01 10       	cpse	r0, r1
    18bc:	d8 f7       	brcc	.-10     	; 0x18b4 <strnlen+0x2>
    18be:	80 95       	com	r24
    18c0:	90 95       	com	r25
    18c2:	8e 0f       	add	r24, r30
    18c4:	9f 1f       	adc	r25, r31
    18c6:	08 95       	ret

000018c8 <fputc>:
    18c8:	0f 93       	push	r16
    18ca:	1f 93       	push	r17
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
    18d0:	fb 01       	movw	r30, r22
    18d2:	23 81       	ldd	r18, Z+3	; 0x03
    18d4:	21 fd       	sbrc	r18, 1
    18d6:	03 c0       	rjmp	.+6      	; 0x18de <fputc+0x16>
    18d8:	8f ef       	ldi	r24, 0xFF	; 255
    18da:	9f ef       	ldi	r25, 0xFF	; 255
    18dc:	2c c0       	rjmp	.+88     	; 0x1936 <fputc+0x6e>
    18de:	22 ff       	sbrs	r18, 2
    18e0:	16 c0       	rjmp	.+44     	; 0x190e <fputc+0x46>
    18e2:	46 81       	ldd	r20, Z+6	; 0x06
    18e4:	57 81       	ldd	r21, Z+7	; 0x07
    18e6:	24 81       	ldd	r18, Z+4	; 0x04
    18e8:	35 81       	ldd	r19, Z+5	; 0x05
    18ea:	42 17       	cp	r20, r18
    18ec:	53 07       	cpc	r21, r19
    18ee:	44 f4       	brge	.+16     	; 0x1900 <fputc+0x38>
    18f0:	a0 81       	ld	r26, Z
    18f2:	b1 81       	ldd	r27, Z+1	; 0x01
    18f4:	9d 01       	movw	r18, r26
    18f6:	2f 5f       	subi	r18, 0xFF	; 255
    18f8:	3f 4f       	sbci	r19, 0xFF	; 255
    18fa:	31 83       	std	Z+1, r19	; 0x01
    18fc:	20 83       	st	Z, r18
    18fe:	8c 93       	st	X, r24
    1900:	26 81       	ldd	r18, Z+6	; 0x06
    1902:	37 81       	ldd	r19, Z+7	; 0x07
    1904:	2f 5f       	subi	r18, 0xFF	; 255
    1906:	3f 4f       	sbci	r19, 0xFF	; 255
    1908:	37 83       	std	Z+7, r19	; 0x07
    190a:	26 83       	std	Z+6, r18	; 0x06
    190c:	14 c0       	rjmp	.+40     	; 0x1936 <fputc+0x6e>
    190e:	8b 01       	movw	r16, r22
    1910:	ec 01       	movw	r28, r24
    1912:	fb 01       	movw	r30, r22
    1914:	00 84       	ldd	r0, Z+8	; 0x08
    1916:	f1 85       	ldd	r31, Z+9	; 0x09
    1918:	e0 2d       	mov	r30, r0
    191a:	09 95       	icall
    191c:	89 2b       	or	r24, r25
    191e:	e1 f6       	brne	.-72     	; 0x18d8 <fputc+0x10>
    1920:	d8 01       	movw	r26, r16
    1922:	16 96       	adiw	r26, 0x06	; 6
    1924:	8d 91       	ld	r24, X+
    1926:	9c 91       	ld	r25, X
    1928:	17 97       	sbiw	r26, 0x07	; 7
    192a:	01 96       	adiw	r24, 0x01	; 1
    192c:	17 96       	adiw	r26, 0x07	; 7
    192e:	9c 93       	st	X, r25
    1930:	8e 93       	st	-X, r24
    1932:	16 97       	sbiw	r26, 0x06	; 6
    1934:	ce 01       	movw	r24, r28
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	1f 91       	pop	r17
    193c:	0f 91       	pop	r16
    193e:	08 95       	ret

00001940 <vsprintf>:
    1940:	ae e0       	ldi	r26, 0x0E	; 14
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e6 ea       	ldi	r30, 0xA6	; 166
    1946:	fc e0       	ldi	r31, 0x0C	; 12
    1948:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <__prologue_saves__+0x1c>
    194c:	8c 01       	movw	r16, r24
    194e:	86 e0       	ldi	r24, 0x06	; 6
    1950:	8c 83       	std	Y+4, r24	; 0x04
    1952:	1a 83       	std	Y+2, r17	; 0x02
    1954:	09 83       	std	Y+1, r16	; 0x01
    1956:	8f ef       	ldi	r24, 0xFF	; 255
    1958:	9f e7       	ldi	r25, 0x7F	; 127
    195a:	9e 83       	std	Y+6, r25	; 0x06
    195c:	8d 83       	std	Y+5, r24	; 0x05
    195e:	ce 01       	movw	r24, r28
    1960:	01 96       	adiw	r24, 0x01	; 1
    1962:	0e 94 c2 07 	call	0xf84	; 0xf84 <vfprintf>
    1966:	ef 81       	ldd	r30, Y+7	; 0x07
    1968:	f8 85       	ldd	r31, Y+8	; 0x08
    196a:	e0 0f       	add	r30, r16
    196c:	f1 1f       	adc	r31, r17
    196e:	10 82       	st	Z, r1
    1970:	2e 96       	adiw	r28, 0x0e	; 14
    1972:	e4 e0       	ldi	r30, 0x04	; 4
    1974:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__epilogue_restores__+0x1c>

00001978 <__ultoa_invert>:
    1978:	fa 01       	movw	r30, r20
    197a:	aa 27       	eor	r26, r26
    197c:	28 30       	cpi	r18, 0x08	; 8
    197e:	51 f1       	breq	.+84     	; 0x19d4 <__ultoa_invert+0x5c>
    1980:	20 31       	cpi	r18, 0x10	; 16
    1982:	81 f1       	breq	.+96     	; 0x19e4 <__ultoa_invert+0x6c>
    1984:	e8 94       	clt
    1986:	6f 93       	push	r22
    1988:	6e 7f       	andi	r22, 0xFE	; 254
    198a:	6e 5f       	subi	r22, 0xFE	; 254
    198c:	7f 4f       	sbci	r23, 0xFF	; 255
    198e:	8f 4f       	sbci	r24, 0xFF	; 255
    1990:	9f 4f       	sbci	r25, 0xFF	; 255
    1992:	af 4f       	sbci	r26, 0xFF	; 255
    1994:	b1 e0       	ldi	r27, 0x01	; 1
    1996:	3e d0       	rcall	.+124    	; 0x1a14 <__ultoa_invert+0x9c>
    1998:	b4 e0       	ldi	r27, 0x04	; 4
    199a:	3c d0       	rcall	.+120    	; 0x1a14 <__ultoa_invert+0x9c>
    199c:	67 0f       	add	r22, r23
    199e:	78 1f       	adc	r23, r24
    19a0:	89 1f       	adc	r24, r25
    19a2:	9a 1f       	adc	r25, r26
    19a4:	a1 1d       	adc	r26, r1
    19a6:	68 0f       	add	r22, r24
    19a8:	79 1f       	adc	r23, r25
    19aa:	8a 1f       	adc	r24, r26
    19ac:	91 1d       	adc	r25, r1
    19ae:	a1 1d       	adc	r26, r1
    19b0:	6a 0f       	add	r22, r26
    19b2:	71 1d       	adc	r23, r1
    19b4:	81 1d       	adc	r24, r1
    19b6:	91 1d       	adc	r25, r1
    19b8:	a1 1d       	adc	r26, r1
    19ba:	20 d0       	rcall	.+64     	; 0x19fc <__ultoa_invert+0x84>
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <__ultoa_invert+0x48>
    19be:	68 94       	set
    19c0:	3f 91       	pop	r19
    19c2:	2a e0       	ldi	r18, 0x0A	; 10
    19c4:	26 9f       	mul	r18, r22
    19c6:	11 24       	eor	r1, r1
    19c8:	30 19       	sub	r19, r0
    19ca:	30 5d       	subi	r19, 0xD0	; 208
    19cc:	31 93       	st	Z+, r19
    19ce:	de f6       	brtc	.-74     	; 0x1986 <__ultoa_invert+0xe>
    19d0:	cf 01       	movw	r24, r30
    19d2:	08 95       	ret
    19d4:	46 2f       	mov	r20, r22
    19d6:	47 70       	andi	r20, 0x07	; 7
    19d8:	40 5d       	subi	r20, 0xD0	; 208
    19da:	41 93       	st	Z+, r20
    19dc:	b3 e0       	ldi	r27, 0x03	; 3
    19de:	0f d0       	rcall	.+30     	; 0x19fe <__ultoa_invert+0x86>
    19e0:	c9 f7       	brne	.-14     	; 0x19d4 <__ultoa_invert+0x5c>
    19e2:	f6 cf       	rjmp	.-20     	; 0x19d0 <__ultoa_invert+0x58>
    19e4:	46 2f       	mov	r20, r22
    19e6:	4f 70       	andi	r20, 0x0F	; 15
    19e8:	40 5d       	subi	r20, 0xD0	; 208
    19ea:	4a 33       	cpi	r20, 0x3A	; 58
    19ec:	18 f0       	brcs	.+6      	; 0x19f4 <__ultoa_invert+0x7c>
    19ee:	49 5d       	subi	r20, 0xD9	; 217
    19f0:	31 fd       	sbrc	r19, 1
    19f2:	40 52       	subi	r20, 0x20	; 32
    19f4:	41 93       	st	Z+, r20
    19f6:	02 d0       	rcall	.+4      	; 0x19fc <__ultoa_invert+0x84>
    19f8:	a9 f7       	brne	.-22     	; 0x19e4 <__ultoa_invert+0x6c>
    19fa:	ea cf       	rjmp	.-44     	; 0x19d0 <__ultoa_invert+0x58>
    19fc:	b4 e0       	ldi	r27, 0x04	; 4
    19fe:	a6 95       	lsr	r26
    1a00:	97 95       	ror	r25
    1a02:	87 95       	ror	r24
    1a04:	77 95       	ror	r23
    1a06:	67 95       	ror	r22
    1a08:	ba 95       	dec	r27
    1a0a:	c9 f7       	brne	.-14     	; 0x19fe <__ultoa_invert+0x86>
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	61 05       	cpc	r22, r1
    1a10:	71 05       	cpc	r23, r1
    1a12:	08 95       	ret
    1a14:	9b 01       	movw	r18, r22
    1a16:	ac 01       	movw	r20, r24
    1a18:	0a 2e       	mov	r0, r26
    1a1a:	06 94       	lsr	r0
    1a1c:	57 95       	ror	r21
    1a1e:	47 95       	ror	r20
    1a20:	37 95       	ror	r19
    1a22:	27 95       	ror	r18
    1a24:	ba 95       	dec	r27
    1a26:	c9 f7       	brne	.-14     	; 0x1a1a <__ultoa_invert+0xa2>
    1a28:	62 0f       	add	r22, r18
    1a2a:	73 1f       	adc	r23, r19
    1a2c:	84 1f       	adc	r24, r20
    1a2e:	95 1f       	adc	r25, r21
    1a30:	a0 1d       	adc	r26, r0
    1a32:	08 95       	ret

00001a34 <_exit>:
    1a34:	f8 94       	cli

00001a36 <__stop_program>:
    1a36:	ff cf       	rjmp	.-2      	; 0x1a36 <__stop_program>
