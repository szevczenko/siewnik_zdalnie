
nowy_sterownik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  000016dc  00001770  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000300  008000ea  008000ea  000017fa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001858  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000259e  00000000  00000000  00001b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000120c  00000000  00000000  000040da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001573  00000000  00000000  000052e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000060c  00000000  00000000  0000685c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d4d  00000000  00000000  00006e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001385  00000000  00000000  00007bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  00008f3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      1c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      28:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <__vector_10>
      2c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__vector_13>
      38:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__vector_14>
      3c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	6e 61       	ori	r22, 0x1E	; 30
      56:	6e 00       	.word	0x006e	; ????

00000058 <__c.2332>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf e5       	ldi	r28, 0x5F	; 95
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	10 e0       	ldi	r17, 0x00	; 0
     164:	a0 e6       	ldi	r26, 0x60	; 96
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	ec ed       	ldi	r30, 0xDC	; 220
     16a:	f6 e1       	ldi	r31, 0x16	; 22
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x10>
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	aa 3e       	cpi	r26, 0xEA	; 234
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0xc>

00000178 <__do_clear_bss>:
     178:	23 e0       	ldi	r18, 0x03	; 3
     17a:	aa ee       	ldi	r26, 0xEA	; 234
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	aa 3e       	cpi	r26, 0xEA	; 234
     184:	b2 07       	cpc	r27, r18
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 09 01 	call	0x212	; 0x212 <main>
     18c:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <_exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <debug_msg>:

#if L_DEBUG
#include <stdio.h>
char debug_buff[64];
void debug_msg( const char* format, ... )
{
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62
     19c:	ae 01       	movw	r20, r28
     19e:	4b 5f       	subi	r20, 0xFB	; 251
     1a0:	5f 4f       	sbci	r21, 0xFF	; 255
     1a2:	fa 01       	movw	r30, r20
     1a4:	61 91       	ld	r22, Z+
     1a6:	71 91       	ld	r23, Z+
     1a8:	af 01       	movw	r20, r30
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
     1aa:	8e e8       	ldi	r24, 0x8E	; 142
     1ac:	92 e0       	ldi	r25, 0x02	; 2
     1ae:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <vsprintf>
	va_end( arglist );
	for (int i = 0; i < strlen(debug_buff); i++) {
     1b2:	ee e8       	ldi	r30, 0x8E	; 142
     1b4:	f2 e0       	ldi	r31, 0x02	; 2
     1b6:	df 01       	movw	r26, r30
     1b8:	0d 90       	ld	r0, X+
     1ba:	00 20       	and	r0, r0
     1bc:	e9 f7       	brne	.-6      	; 0x1b8 <debug_msg+0x24>
     1be:	9d 01       	movw	r18, r26
     1c0:	21 50       	subi	r18, 0x01	; 1
     1c2:	31 09       	sbc	r19, r1
     1c4:	08 c0       	rjmp	.+16     	; 0x1d6 <debug_msg+0x42>
		if (debug_buff[i] == '\n') {
     1c6:	81 91       	ld	r24, Z+
     1c8:	8a 30       	cpi	r24, 0x0A	; 10
     1ca:	29 f4       	brne	.+10     	; 0x1d6 <debug_msg+0x42>
			uart_puts("\n\rAT: ");
     1cc:	80 e6       	ldi	r24, 0x60	; 96
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	0e 94 05 06 	call	0xc0a	; 0xc0a <uart0_puts>
			break;
     1d4:	03 c0       	rjmp	.+6      	; 0x1dc <debug_msg+0x48>
{
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
	va_end( arglist );
	for (int i = 0; i < strlen(debug_buff); i++) {
     1d6:	e2 17       	cp	r30, r18
     1d8:	f3 07       	cpc	r31, r19
     1da:	a9 f7       	brne	.-22     	; 0x1c6 <debug_msg+0x32>
			uart_puts("\n\rAT: ");
			break;
		}
	}
	#if USE_USART
	uart_puts(debug_buff);
     1dc:	8e e8       	ldi	r24, 0x8E	; 142
     1de:	92 e0       	ldi	r25, 0x02	; 2
     1e0:	0e 94 05 06 	call	0xc0a	; 0xc0a <uart0_puts>
	#endif
}
     1e4:	df 91       	pop	r29
     1e6:	cf 91       	pop	r28
     1e8:	08 95       	ret

000001ea <init_pin>:
uint8_t servo_vibro_value;

void init_pin(void)
{
	//UART_TX_PIN
	DDRD |= (1<<1);
     1ea:	89 9a       	sbi	0x11, 1	; 17
     1ec:	08 95       	ret

000001ee <init_driver>:
}

void init_driver(void)
{
	#if USE_USART
	uart_init(UART_BAUD_SELECT(57600, F_CPU));
     1ee:	88 e0       	ldi	r24, 0x08	; 8
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 ba 05 	call	0xb74	; 0xb74 <uart0_init>
	#endif
	timer0_init(TIM0_PRESCALER, TIM0_ARR);
     1f6:	62 e3       	ldi	r22, 0x32	; 50
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	0e 94 b3 04 	call	0x966	; 0x966 <timer0_init>
	init_system();
     1fe:	0e 94 72 04 	call	0x8e4	; 0x8e4 <init_system>
	init_measure();
     202:	0e 94 86 03 	call	0x70c	; 0x70c <init_measure>
	at_communication_init();
     206:	0e 94 17 03 	call	0x62e	; 0x62e <at_communication_init>
	CLEAR_PIN(SFIOR, PUD);
     20a:	80 b7       	in	r24, 0x30	; 48
     20c:	8b 7f       	andi	r24, 0xFB	; 251
     20e:	80 bf       	out	0x30, r24	; 48
     210:	08 95       	ret

00000212 <main>:
{
	#if CONFIG_DEVICE_SIEWNIK
	#error "asdasdasdas"
	servo_init(0);
	#endif
	init_pin();
     212:	0e 94 f5 00 	call	0x1ea	; 0x1ea <init_pin>
	sei();
     216:	78 94       	sei
	init_driver();
     218:	0e 94 f7 00 	call	0x1ee	; 0x1ee <init_driver>
	debug_msg("/-----------START SYSTEM------------/\n");
     21c:	87 e6       	ldi	r24, 0x67	; 103
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	9f 93       	push	r25
     222:	8f 93       	push	r24
     224:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
	on_system();
     228:	0e 94 73 04 	call	0x8e6	; 0x8e6 <on_system>
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
    /* Replace with your application code */
    while (1) 
    {
		dcmotor_process(motor_value);
     230:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <motor_value>
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 5e 03 	call	0x6bc	; 0x6bc <dcmotor_process>
		#if CONFIG_DEVICE_SIEWNIK
		servo_process(servo_vibro_value);
		#endif
		measure_process();
     23a:	0e 94 a4 03 	call	0x748	; 0x748 <measure_process>
		accumulator_process();
     23e:	0e 94 26 01 	call	0x24c	; 0x24c <accumulator_process>
		atm_com_process();
     242:	0e 94 dd 02 	call	0x5ba	; 0x5ba <atm_com_process>
		at_read_data_process();
     246:	0e 94 a0 02 	call	0x540	; 0x540 <at_read_data_process>
     24a:	f2 cf       	rjmp	.-28     	; 0x230 <main+0x1e>

0000024c <accumulator_process>:
void accumulator_process(void)
{
	
	static timer_t accumulator_timer;
	
	if(accumulator_timer < mktime.ms)
     24c:	40 91 e6 03 	lds	r20, 0x03E6	; 0x8003e6 <mktime+0x2>
     250:	50 91 e7 03 	lds	r21, 0x03E7	; 0x8003e7 <mktime+0x3>
     254:	60 91 e8 03 	lds	r22, 0x03E8	; 0x8003e8 <mktime+0x4>
     258:	70 91 e9 03 	lds	r23, 0x03E9	; 0x8003e9 <mktime+0x5>
     25c:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <__data_end>
     260:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__data_end+0x1>
     264:	a0 91 ec 00 	lds	r26, 0x00EC	; 0x8000ec <__data_end+0x2>
     268:	b0 91 ed 00 	lds	r27, 0x00ED	; 0x8000ed <__data_end+0x3>
     26c:	84 17       	cp	r24, r20
     26e:	95 07       	cpc	r25, r21
     270:	a6 07       	cpc	r26, r22
     272:	b7 07       	cpc	r27, r23
     274:	b8 f4       	brcc	.+46     	; 0x2a4 <accumulator_process+0x58>
	{
		filtered_accum_adc_val = measure_get_filtered_value(MEAS_ACCUM);
     276:	83 e0       	ldi	r24, 0x03	; 3
     278:	0e 94 59 04 	call	0x8b2	; 0x8b2 <measure_get_filtered_value>
		accumulator_timer = mktime.ms + 100;
     27c:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <mktime+0x2>
     280:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <mktime+0x3>
     284:	a0 91 e8 03 	lds	r26, 0x03E8	; 0x8003e8 <mktime+0x4>
     288:	b0 91 e9 03 	lds	r27, 0x03E9	; 0x8003e9 <mktime+0x5>
     28c:	8c 59       	subi	r24, 0x9C	; 156
     28e:	9f 4f       	sbci	r25, 0xFF	; 255
     290:	af 4f       	sbci	r26, 0xFF	; 255
     292:	bf 4f       	sbci	r27, 0xFF	; 255
     294:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__data_end>
     298:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__data_end+0x1>
     29c:	a0 93 ec 00 	sts	0x00EC, r26	; 0x8000ec <__data_end+0x2>
     2a0:	b0 93 ed 00 	sts	0x00ED, r27	; 0x8000ed <__data_end+0x3>
     2a4:	08 95       	ret

000002a6 <adc_setchannel>:
/*
 * set an adc channel
 */
void adc_setchannel(uint8_t channel)
{
	ADCSRA &= ~(1 << ADEN);
     2a6:	37 98       	cbi	0x06, 7	; 6
	ADMUX = (ADMUX & 0xf8) | (channel & 0x07); //set channel
     2a8:	97 b1       	in	r25, 0x07	; 7
     2aa:	98 7f       	andi	r25, 0xF8	; 248
     2ac:	87 70       	andi	r24, 0x07	; 7
     2ae:	89 2b       	or	r24, r25
     2b0:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN);
     2b2:	37 9a       	sbi	0x06, 7	; 6
     2b4:	08 95       	ret

000002b6 <adc_readsel>:
/*
 * read from selected adc channel
 */
uint16_t adc_readsel(void)
{
	ADCSRA |= (1 << ADSC); // Start conversion
     2b6:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & _BV(ADSC)); 
     2b8:	36 99       	sbic	0x06, 6	; 6
     2ba:	fe cf       	rjmp	.-4      	; 0x2b8 <adc_readsel+0x2>
	//while( !(ADCSRA & (1<<ADIF)) ); // Wait for conversion to complete
	uint16_t adc = ADC;
     2bc:	84 b1       	in	r24, 0x04	; 4
     2be:	95 b1       	in	r25, 0x05	; 5
	//ADCSRA |= (1 << ADIF); // Clear ADIF by writing one to it
	return(adc);
}
     2c0:	08 95       	ret

000002c2 <adc_read>:
/*
 * read from adc channel
 */
uint16_t adc_read(uint8_t channel)
{
	adc_setchannel(channel);
     2c2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <adc_setchannel>
	return adc_readsel();
     2c6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <adc_readsel>
}
     2ca:	08 95       	ret

000002cc <clear_msg>:
uint16_t atmega_get_data(atmega_data_read_t data_type) {
	if (data_type < AT_R_LAST_POSITION) {
		return data_read[data_type];
	}
	return 0;
}
     2cc:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <byte_received>
     2d0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <byte_received+0x1>
     2d4:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <byte_received+0x2>
     2d8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <byte_received+0x3>
     2dc:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <cmd>
     2e0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <data_len>
     2e4:	86 ef       	ldi	r24, 0xF6	; 246
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 1f 05 	call	0xa3e	; 0xa3e <evTime_off>
     2ec:	08 95       	ret

000002ee <at_send_data>:
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	16 16       	cp	r1, r22
     2f8:	17 06       	cpc	r1, r23
     2fa:	54 f4       	brge	.+20     	; 0x310 <at_send_data+0x22>
     2fc:	8c 01       	movw	r16, r24
     2fe:	ec 01       	movw	r28, r24
     300:	06 0f       	add	r16, r22
     302:	17 1f       	adc	r17, r23
     304:	89 91       	ld	r24, Y+
     306:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <uart0_putc>
     30a:	c0 17       	cp	r28, r16
     30c:	d1 07       	cpc	r29, r17
     30e:	d1 f7       	brne	.-12     	; 0x304 <at_send_data+0x16>
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	1f 91       	pop	r17
     316:	0f 91       	pop	r16
     318:	08 95       	ret

0000031a <at_write_data>:
     31a:	e4 ed       	ldi	r30, 0xD4	; 212
     31c:	f2 e0       	ldi	r31, 0x02	; 2
     31e:	8e ed       	ldi	r24, 0xDE	; 222
     320:	80 83       	st	Z, r24
     322:	86 e0       	ldi	r24, 0x06	; 6
     324:	81 83       	std	Z+1, r24	; 0x01
     326:	a3 e0       	ldi	r26, 0x03	; 3
     328:	b1 e0       	ldi	r27, 0x01	; 1
     32a:	e6 ed       	ldi	r30, 0xD6	; 214
     32c:	f2 e0       	ldi	r31, 0x02	; 2
     32e:	2c ed       	ldi	r18, 0xDC	; 220
     330:	32 e0       	ldi	r19, 0x02	; 2
     332:	8d 91       	ld	r24, X+
     334:	81 93       	st	Z+, r24
     336:	e2 17       	cp	r30, r18
     338:	f3 07       	cpc	r31, r19
     33a:	d9 f7       	brne	.-10     	; 0x332 <at_write_data+0x18>
     33c:	68 e0       	ldi	r22, 0x08	; 8
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	84 ed       	ldi	r24, 0xD4	; 212
     342:	92 e0       	ldi	r25, 0x02	; 2
     344:	0e 94 77 01 	call	0x2ee	; 0x2ee <at_send_data>
     348:	08 95       	ret

0000034a <data_process>:
	at_send_data((char *)send_buff, sizeof(data_write) + 2);
}

uint16_t atmega_get_data(atmega_data_read_t data_type) {
	if (data_type < AT_R_LAST_POSITION) {
		return data_read[data_type];
     34a:	eb ef       	ldi	r30, 0xFB	; 251
     34c:	f0 e0       	ldi	r31, 0x00	; 0
uint16_t servo_read_value;
uint16_t servo_vibro_is_on;
uint16_t motor_is_on;

void data_process(void) {
	motor_read_value = atmega_get_data(AT_R_MOTOR_VALUE) & 0xFF;
     34e:	80 81       	ld	r24, Z
     350:	91 81       	ldd	r25, Z+1	; 0x01
     352:	99 27       	eor	r25, r25
     354:	90 93 d7 03 	sts	0x03D7, r25	; 0x8003d7 <motor_read_value+0x1>
     358:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <motor_read_value>
	at_send_data((char *)send_buff, sizeof(data_write) + 2);
}

uint16_t atmega_get_data(atmega_data_read_t data_type) {
	if (data_type < AT_R_LAST_POSITION) {
		return data_read[data_type];
     35c:	62 81       	ldd	r22, Z+2	; 0x02
     35e:	73 81       	ldd	r23, Z+3	; 0x03
uint16_t servo_vibro_is_on;
uint16_t motor_is_on;

void data_process(void) {
	motor_read_value = atmega_get_data(AT_R_MOTOR_VALUE) & 0xFF;
	servo_read_value = atmega_get_data(AT_R_SERVO_VIBRO_VALUE);
     360:	60 93 d2 02 	sts	0x02D2, r22	; 0x8002d2 <servo_read_value>
     364:	70 93 d3 02 	sts	0x02D3, r23	; 0x8002d3 <servo_read_value+0x1>
	at_send_data((char *)send_buff, sizeof(data_write) + 2);
}

uint16_t atmega_get_data(atmega_data_read_t data_type) {
	if (data_type < AT_R_LAST_POSITION) {
		return data_read[data_type];
     368:	46 81       	ldd	r20, Z+6	; 0x06
     36a:	57 81       	ldd	r21, Z+7	; 0x07
uint16_t motor_is_on;

void data_process(void) {
	motor_read_value = atmega_get_data(AT_R_MOTOR_VALUE) & 0xFF;
	servo_read_value = atmega_get_data(AT_R_SERVO_VIBRO_VALUE);
	servo_vibro_is_on = atmega_get_data(AT_R_SERVO_VIBRO_IS_ON);
     36c:	40 93 d8 03 	sts	0x03D8, r20	; 0x8003d8 <servo_vibro_is_on>
     370:	50 93 d9 03 	sts	0x03D9, r21	; 0x8003d9 <servo_vibro_is_on+0x1>
	at_send_data((char *)send_buff, sizeof(data_write) + 2);
}

uint16_t atmega_get_data(atmega_data_read_t data_type) {
	if (data_type < AT_R_LAST_POSITION) {
		return data_read[data_type];
     374:	24 81       	ldd	r18, Z+4	; 0x04
     376:	35 81       	ldd	r19, Z+5	; 0x05

void data_process(void) {
	motor_read_value = atmega_get_data(AT_R_MOTOR_VALUE) & 0xFF;
	servo_read_value = atmega_get_data(AT_R_SERVO_VIBRO_VALUE);
	servo_vibro_is_on = atmega_get_data(AT_R_SERVO_VIBRO_IS_ON);
	motor_is_on = atmega_get_data(AT_R_MOTOR_IS_ON);
     378:	20 93 d4 03 	sts	0x03D4, r18	; 0x8003d4 <motor_is_on>
     37c:	30 93 d5 03 	sts	0x03D5, r19	; 0x8003d5 <motor_is_on+0x1>
	
	debug_msg("mot: %d %d, servo: %d %d \n\r",motor_is_on, motor_read_value, servo_vibro_is_on, servo_read_value);
     380:	7f 93       	push	r23
     382:	6f 93       	push	r22
     384:	5f 93       	push	r21
     386:	4f 93       	push	r20
     388:	9f 93       	push	r25
     38a:	8f 93       	push	r24
     38c:	3f 93       	push	r19
     38e:	2f 93       	push	r18
     390:	8e e8       	ldi	r24, 0x8E	; 142
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	9f 93       	push	r25
     396:	8f 93       	push	r24
     398:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>

	/* MOTOR SECTION */
	if (motor_is_on) {
     39c:	8d b7       	in	r24, 0x3d	; 61
     39e:	9e b7       	in	r25, 0x3e	; 62
     3a0:	0a 96       	adiw	r24, 0x0a	; 10
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	9e bf       	out	0x3e, r25	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	8d bf       	out	0x3d, r24	; 61
     3ac:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <motor_is_on>
     3b0:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <motor_is_on+0x1>
     3b4:	89 2b       	or	r24, r25
     3b6:	39 f0       	breq	.+14     	; 0x3c6 <data_process+0x7c>
		dcmotorpwm_start();
     3b8:	0e 94 35 03 	call	0x66a	; 0x66a <dcmotorpwm_start>
		dcmotor_set_pwm((uint8_t) motor_read_value);
     3bc:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <motor_read_value>
     3c0:	0e 94 56 03 	call	0x6ac	; 0x6ac <dcmotor_set_pwm>
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <data_process+0x80>
	}
	else {
		dcmotorpwm_stop();
     3c6:	0e 94 29 03 	call	0x652	; 0x652 <dcmotorpwm_stop>
	else {
		servo_close();
	}*/

	/* VIBRO SECTION */
	if (servo_vibro_is_on) {
     3ca:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <servo_vibro_is_on>
     3ce:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <servo_vibro_is_on+0x1>
     3d2:	89 2b       	or	r24, r25
     3d4:	11 f0       	breq	.+4      	; 0x3da <data_process+0x90>
		ON_VIBRO_PIN;
     3d6:	94 9a       	sbi	0x12, 4	; 18
     3d8:	08 95       	ret
	}
	else {
		OFF_VIBRO_PIN;
     3da:	94 98       	cbi	0x12, 4	; 18
     3dc:	08 95       	ret

000003de <at_read_byte>:
	}
}

void at_read_byte(uint8_t byte) {
     3de:	cf 92       	push	r12
     3e0:	df 92       	push	r13
     3e2:	ef 92       	push	r14
     3e4:	ff 92       	push	r15
     3e6:	0f 93       	push	r16
     3e8:	1f 93       	push	r17
	if (byte_received == 0) {
     3ea:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <byte_received>
     3ee:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <byte_received+0x1>
     3f2:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <byte_received+0x2>
     3f6:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <byte_received+0x3>
     3fa:	41 15       	cp	r20, r1
     3fc:	51 05       	cpc	r21, r1
     3fe:	61 05       	cpc	r22, r1
     400:	71 05       	cpc	r23, r1
     402:	b9 f4       	brne	.+46     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		cmd = byte;
     404:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <cmd>
		byte_received++;
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	a0 e0       	ldi	r26, 0x00	; 0
     40e:	b0 e0       	ldi	r27, 0x00	; 0
     410:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <byte_received>
     414:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <byte_received+0x1>
     418:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <byte_received+0x2>
     41c:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <byte_received+0x3>
		evTime_start(&xTimers, 200);
     420:	48 ec       	ldi	r20, 0xC8	; 200
     422:	50 e0       	ldi	r21, 0x00	; 0
     424:	60 e0       	ldi	r22, 0x00	; 0
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	86 ef       	ldi	r24, 0xF6	; 246
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <evTime_start>
		return;
     430:	80 c0       	rjmp	.+256    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
	}

	switch(cmd) {
     432:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <cmd>
     436:	9e 3e       	cpi	r25, 0xEE	; 238
     438:	09 f4       	brne	.+2      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     43a:	76 c0       	rjmp	.+236    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
     43c:	9e 3f       	cpi	r25, 0xFE	; 254
     43e:	09 f4       	brne	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     440:	6e c0       	rjmp	.+220    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     442:	9e 3d       	cpi	r25, 0xDE	; 222
     444:	09 f0       	breq	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     446:	73 c0       	rjmp	.+230    	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
		case START_FRAME_WRITE:
		if (byte_received == 1) {
     448:	41 30       	cpi	r20, 0x01	; 1
     44a:	51 05       	cpc	r21, r1
     44c:	61 05       	cpc	r22, r1
     44e:	71 05       	cpc	r23, r1
     450:	19 f5       	brne	.+70     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
			data_len = byte;
     452:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <data_len>
			byte_received++;
     456:	42 e0       	ldi	r20, 0x02	; 2
     458:	50 e0       	ldi	r21, 0x00	; 0
     45a:	60 e0       	ldi	r22, 0x00	; 0
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	40 93 0b 01 	sts	0x010B, r20	; 0x80010b <byte_received>
     462:	50 93 0c 01 	sts	0x010C, r21	; 0x80010c <byte_received+0x1>
     466:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <byte_received+0x2>
     46a:	70 93 0e 01 	sts	0x010E, r23	; 0x80010e <byte_received+0x3>
			if (data_len != sizeof(data_read)) {
     46e:	88 30       	cpi	r24, 0x08	; 8
     470:	51 f0       	breq	.+20     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
				clear_msg();
     472:	0e 94 66 01 	call	0x2cc	; 0x2cc <clear_msg>
				debug_msg("FRAME BAD LEN\n\r");
     476:	8a ea       	ldi	r24, 0xAA	; 170
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	9f 93       	push	r25
     47c:	8f 93       	push	r24
     47e:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
			}
			evTime_start(&xTimers, 200);
     486:	48 ec       	ldi	r20, 0xC8	; 200
     488:	50 e0       	ldi	r21, 0x00	; 0
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	86 ef       	ldi	r24, 0xF6	; 246
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 e7 04 	call	0x9ce	; 0x9ce <evTime_start>
     496:	4d c0       	rjmp	.+154    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
		}
		else if (byte_received - 2 < data_len) {
     498:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <data_len>
     49c:	10 e0       	ldi	r17, 0x00	; 0
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	6a 01       	movw	r12, r20
     4a4:	7b 01       	movw	r14, r22
     4a6:	92 e0       	ldi	r25, 0x02	; 2
     4a8:	c9 1a       	sub	r12, r25
     4aa:	d1 08       	sbc	r13, r1
     4ac:	e1 08       	sbc	r14, r1
     4ae:	f1 08       	sbc	r15, r1
     4b0:	c0 16       	cp	r12, r16
     4b2:	d1 06       	cpc	r13, r17
     4b4:	e2 06       	cpc	r14, r18
     4b6:	f3 06       	cpc	r15, r19
     4b8:	38 f5       	brcc	.+78     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
			uint8_t *pnt = (uint8_t *)data_read;
			pnt[byte_received - 2] = byte;
     4ba:	fa 01       	movw	r30, r20
     4bc:	e7 50       	subi	r30, 0x07	; 7
     4be:	ff 4f       	sbci	r31, 0xFF	; 255
     4c0:	80 83       	st	Z, r24
			byte_received++;
     4c2:	db 01       	movw	r26, r22
     4c4:	ca 01       	movw	r24, r20
     4c6:	01 96       	adiw	r24, 0x01	; 1
     4c8:	a1 1d       	adc	r26, r1
     4ca:	b1 1d       	adc	r27, r1
     4cc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <byte_received>
     4d0:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <byte_received+0x1>
     4d4:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <byte_received+0x2>
     4d8:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <byte_received+0x3>
			if (byte_received - 2 == data_len) {
     4dc:	41 50       	subi	r20, 0x01	; 1
     4de:	51 09       	sbc	r21, r1
     4e0:	61 09       	sbc	r22, r1
     4e2:	71 09       	sbc	r23, r1
     4e4:	04 17       	cp	r16, r20
     4e6:	15 07       	cpc	r17, r21
     4e8:	26 07       	cpc	r18, r22
     4ea:	37 07       	cpc	r19, r23
     4ec:	21 f4       	brne	.+8      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
				clear_msg();
     4ee:	0e 94 66 01 	call	0x2cc	; 0x2cc <clear_msg>
				/* Verify data */
				data_process();
     4f2:	0e 94 a5 01 	call	0x34a	; 0x34a <data_process>
				
			}
			evTime_start(&xTimers, 200);
     4f6:	48 ec       	ldi	r20, 0xC8	; 200
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	86 ef       	ldi	r24, 0xF6	; 246
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 e7 04 	call	0x9ce	; 0x9ce <evTime_start>
     506:	15 c0       	rjmp	.+42     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
		}
		else {
			/* End receive data or unknown error */
			clear_msg();
     508:	0e 94 66 01 	call	0x2cc	; 0x2cc <clear_msg>
			debug_msg("ATMEGA RECEIVE UNKNOW ERROR\n\r");
     50c:	8a eb       	ldi	r24, 0xBA	; 186
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	9f 93       	push	r25
     512:	8f 93       	push	r24
     514:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	0a c0       	rjmp	.+20     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
		}
		break;

		case START_FRAME_READ:
		/* SEND BUFF data_write */
		at_write_data();
     51e:	0e 94 8d 01 	call	0x31a	; 0x31a <at_write_data>
		clear_msg();
     522:	0e 94 66 01 	call	0x2cc	; 0x2cc <clear_msg>
		break;
     526:	05 c0       	rjmp	.+10     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>

		case START_FRAME_CMD:
		/* Nothing for host */
		clear_msg();
     528:	0e 94 66 01 	call	0x2cc	; 0x2cc <clear_msg>
		break;
     52c:	02 c0       	rjmp	.+4      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>

		default:
		//debug_msg("FRAME BAD START\n\r");
		clear_msg();
     52e:	0e 94 66 01 	call	0x2cc	; 0x2cc <clear_msg>
	}
}
     532:	1f 91       	pop	r17
     534:	0f 91       	pop	r16
     536:	ff 90       	pop	r15
     538:	ef 90       	pop	r14
     53a:	df 90       	pop	r13
     53c:	cf 90       	pop	r12
     53e:	08 95       	ret

00000540 <at_read_data_process>:
	
}

void at_read_data_process(void) {
	static uint32_t atm_timer;
	if (atm_timer < mktime.ms) {
     540:	40 91 e6 03 	lds	r20, 0x03E6	; 0x8003e6 <mktime+0x2>
     544:	50 91 e7 03 	lds	r21, 0x03E7	; 0x8003e7 <mktime+0x3>
     548:	60 91 e8 03 	lds	r22, 0x03E8	; 0x8003e8 <mktime+0x4>
     54c:	70 91 e9 03 	lds	r23, 0x03E9	; 0x8003e9 <mktime+0x5>
     550:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <atm_timer.1857>
     554:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <atm_timer.1857+0x1>
     558:	a0 91 f4 00 	lds	r26, 0x00F4	; 0x8000f4 <atm_timer.1857+0x2>
     55c:	b0 91 f5 00 	lds	r27, 0x00F5	; 0x8000f5 <atm_timer.1857+0x3>
     560:	84 17       	cp	r24, r20
     562:	95 07       	cpc	r25, r21
     564:	a6 07       	cpc	r26, r22
     566:	b7 07       	cpc	r27, r23
     568:	38 f5       	brcc	.+78     	; 0x5b8 <at_read_data_process+0x78>
		
		uint8_t byte, error_val;
		uint16_t data = uart_getc();
     56a:	0e 94 d0 05 	call	0xba0	; 0xba0 <uart0_getc>
		if (error_val == UART_NO_DATA) {
			atm_timer = mktime.ms + 50;
			return;
		}
		
		at_read_byte(byte);
     56e:	0e 94 ef 01 	call	0x3de	; 0x3de <at_read_byte>
		
		if (evTime_check(&xTimers)) {
     572:	86 ef       	ldi	r24, 0xF6	; 246
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	0e 94 ff 04 	call	0x9fe	; 0x9fe <evTime_check>
     57a:	89 2b       	or	r24, r25
     57c:	51 f0       	breq	.+20     	; 0x592 <at_read_data_process+0x52>
}

static void vTimerCallback( evTime *xTimer )
{
	(void)xTimer;
	clear_msg();
     57e:	0e 94 66 01 	call	0x2cc	; 0x2cc <clear_msg>
	debug_msg("vTimerCallback\n\r");
     582:	88 ed       	ldi	r24, 0xD8	; 216
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	9f 93       	push	r25
     588:	8f 93       	push	r24
     58a:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
		at_read_byte(byte);
		
		if (evTime_check(&xTimers)) {
			vTimerCallback(&xTimers);
		}
		atm_timer = mktime.ms + 5;
     592:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <mktime+0x2>
     596:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <mktime+0x3>
     59a:	a0 91 e8 03 	lds	r26, 0x03E8	; 0x8003e8 <mktime+0x4>
     59e:	b0 91 e9 03 	lds	r27, 0x03E9	; 0x8003e9 <mktime+0x5>
     5a2:	05 96       	adiw	r24, 0x05	; 5
     5a4:	a1 1d       	adc	r26, r1
     5a6:	b1 1d       	adc	r27, r1
     5a8:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <atm_timer.1857>
     5ac:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <atm_timer.1857+0x1>
     5b0:	a0 93 f4 00 	sts	0x00F4, r26	; 0x8000f4 <atm_timer.1857+0x2>
     5b4:	b0 93 f5 00 	sts	0x00F5, r27	; 0x8000f5 <atm_timer.1857+0x3>
     5b8:	08 95       	ret

000005ba <atm_com_process>:
	}
}

void atm_com_process(void) {
	static uint32_t atm_timer;
	if (atm_timer < mktime.ms)
     5ba:	40 91 e6 03 	lds	r20, 0x03E6	; 0x8003e6 <mktime+0x2>
     5be:	50 91 e7 03 	lds	r21, 0x03E7	; 0x8003e7 <mktime+0x3>
     5c2:	60 91 e8 03 	lds	r22, 0x03E8	; 0x8003e8 <mktime+0x4>
     5c6:	70 91 e9 03 	lds	r23, 0x03E9	; 0x8003e9 <mktime+0x5>
     5ca:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <atm_timer.1880>
     5ce:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <atm_timer.1880+0x1>
     5d2:	a0 91 f0 00 	lds	r26, 0x00F0	; 0x8000f0 <atm_timer.1880+0x2>
     5d6:	b0 91 f1 00 	lds	r27, 0x00F1	; 0x8000f1 <atm_timer.1880+0x3>
     5da:	84 17       	cp	r24, r20
     5dc:	95 07       	cpc	r25, r21
     5de:	a6 07       	cpc	r26, r22
     5e0:	b7 07       	cpc	r27, r23
     5e2:	20 f5       	brcc	.+72     	; 0x62c <atm_com_process+0x72>
	{
		/* Do poprawy */
		data_write[AT_W_MEAS_ACCUM] = 123;//(uint16_t)accum_get_voltage();
     5e4:	e3 e0       	ldi	r30, 0x03	; 3
     5e6:	f1 e0       	ldi	r31, 0x01	; 1
     5e8:	8b e7       	ldi	r24, 0x7B	; 123
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	91 83       	std	Z+1, r25	; 0x01
     5ee:	80 83       	st	Z, r24
		data_write[AT_W_MEAS_MOTOR] = 321;//(uint16_t)measure_get_current(MEAS_MOTOR, MOTOR_RESISTOR);
     5f0:	81 e4       	ldi	r24, 0x41	; 65
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	93 83       	std	Z+3, r25	; 0x03
     5f6:	82 83       	std	Z+2, r24	; 0x02
		data_write[AT_W_MEAS_SERVO] = 4095;//(uint16_t)measure_get_filtered_value(MEAS_SERVO);
     5f8:	8f ef       	ldi	r24, 0xFF	; 255
     5fa:	9f e0       	ldi	r25, 0x0F	; 15
     5fc:	95 83       	std	Z+5, r25	; 0x05
     5fe:	84 83       	std	Z+4, r24	; 0x04
		at_write_data();
     600:	0e 94 8d 01 	call	0x31a	; 0x31a <at_write_data>
		atm_timer = mktime.ms + 200;
     604:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <mktime+0x2>
     608:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <mktime+0x3>
     60c:	a0 91 e8 03 	lds	r26, 0x03E8	; 0x8003e8 <mktime+0x4>
     610:	b0 91 e9 03 	lds	r27, 0x03E9	; 0x8003e9 <mktime+0x5>
     614:	88 53       	subi	r24, 0x38	; 56
     616:	9f 4f       	sbci	r25, 0xFF	; 255
     618:	af 4f       	sbci	r26, 0xFF	; 255
     61a:	bf 4f       	sbci	r27, 0xFF	; 255
     61c:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <atm_timer.1880>
     620:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <atm_timer.1880+0x1>
     624:	a0 93 f0 00 	sts	0x00F0, r26	; 0x8000f0 <atm_timer.1880+0x2>
     628:	b0 93 f1 00 	sts	0x00F1, r27	; 0x8000f1 <atm_timer.1880+0x3>
     62c:	08 95       	ret

0000062e <at_communication_init>:
	}
}


void at_communication_init(void) {
	VIBRO_INIT_PIN;
     62e:	8c 9a       	sbi	0x11, 4	; 17
	evTime_init(&xTimers);
     630:	86 ef       	ldi	r24, 0xF6	; 246
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	0e 94 df 04 	call	0x9be	; 0x9be <evTime_init>
     638:	08 95       	ret

0000063a <dcmotorpwm_init>:
	#if CONFIG_DEVICE_SOLARKA
	CLEAR_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
	#else
	SET_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
	#endif
	LED_MOTOR_OFF;
     63a:	8e ed       	ldi	r24, 0xDE	; 222
     63c:	93 e0       	ldi	r25, 0x03	; 3
     63e:	0e 94 df 04 	call	0x9be	; 0x9be <evTime_init>
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <motorD>
     648:	94 98       	cbi	0x12, 4	; 18
     64a:	15 bc       	out	0x25, r1	; 37
     64c:	8f 9a       	sbi	0x11, 7	; 17
     64e:	97 98       	cbi	0x12, 7	; 18
     650:	08 95       	ret

00000652 <dcmotorpwm_stop>:
 * stop the motor
 */
int dcmotorpwm_stop(void) {
	
	//debug_msg("!!!!!!!!!!!!!!!!dcmotor stop\n");
	TCCR2 = 0;
     652:	15 bc       	out	0x25, r1	; 37
	#if CONFIG_DEVICE_SOLARKA
	CLEAR_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
     654:	97 98       	cbi	0x12, 7	; 18
	#else
	SET_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
	#endif
	OCR2 = 0;
     656:	13 bc       	out	0x23, r1	; 35
	motorD.last_state = motorD.state;
     658:	ea ed       	ldi	r30, 0xDA	; 218
     65a:	f3 e0       	ldi	r31, 0x03	; 3
     65c:	80 81       	ld	r24, Z
     65e:	81 83       	std	Z+1, r24	; 0x01
	motorD.state = MOTOR_OFF;
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	80 83       	st	Z, r24
	return 1;
}
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	08 95       	ret

0000066a <dcmotorpwm_start>:

int dcmotorpwm_start(void)
{
	if (motorD.state == MOTOR_OFF)
     66a:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <motorD>
     66e:	81 30       	cpi	r24, 0x01	; 1
     670:	d1 f4       	brne	.+52     	; 0x6a6 <dcmotorpwm_start+0x3c>
	{
		//debug_msg("---------Motor Start----------\n");
		
		#if CONFIG_DEVICE_SOLARKA
		TCCR2 |= (1<<COM21); 
     672:	85 b5       	in	r24, 0x25	; 37
     674:	80 62       	ori	r24, 0x20	; 32
     676:	85 bd       	out	0x25, r24	; 37
		#else
		TCCR2 |= (1<<COM21) | (1<<COM20); 
		#endif
		
		TCCR2 |= (1<<WGM20);
     678:	85 b5       	in	r24, 0x25	; 37
     67a:	80 64       	ori	r24, 0x40	; 64
     67c:	85 bd       	out	0x25, r24	; 37
		TCCR2 |= DCMOTORPWM_PRESCALER; //set prescaler
     67e:	85 b5       	in	r24, 0x25	; 37
     680:	82 60       	ori	r24, 0x02	; 2
     682:	85 bd       	out	0x25, r24	; 37
		motorD.last_state = motorD.state;
     684:	ea ed       	ldi	r30, 0xDA	; 218
     686:	f3 e0       	ldi	r31, 0x03	; 3
     688:	80 81       	ld	r24, Z
     68a:	81 83       	std	Z+1, r24	; 0x01
		motorD.state = MOTOR_ON;
     68c:	82 e0       	ldi	r24, 0x02	; 2
     68e:	80 83       	st	Z, r24
		evTime_start(&motorD.timeout, 1000);
     690:	48 ee       	ldi	r20, 0xE8	; 232
     692:	53 e0       	ldi	r21, 0x03	; 3
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	8e ed       	ldi	r24, 0xDE	; 222
     69a:	93 e0       	ldi	r25, 0x03	; 3
     69c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <evTime_start>
		return 1;
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	08 95       	ret
	}
	else 
	{
		//debug_msg("dcmotor canot start\n");
		return 0;
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     6aa:	08 95       	ret

000006ac <dcmotor_set_pwm>:

void dcmotor_set_pwm(uint8_t value) {
	if (motorD.state == MOTOR_ON) {
     6ac:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <motorD>
     6b0:	92 30       	cpi	r25, 0x02	; 2
     6b2:	19 f4       	brne	.+6      	; 0x6ba <dcmotor_set_pwm+0xe>
		OCR2 = value;
     6b4:	83 bd       	out	0x23, r24	; 35
		motorD.pwm_value = value;
     6b6:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <motorD+0x3>
     6ba:	08 95       	ret

000006bc <dcmotor_process>:

void dcmotor_process(uint16_t value)
{
	(void) value;
	static evTime dcmotor_timer;
	if (evTime_process_period(&dcmotor_timer, 250))
     6bc:	4a ef       	ldi	r20, 0xFA	; 250
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	8f e0       	ldi	r24, 0x0F	; 15
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	0e 94 29 05 	call	0xa52	; 0xa52 <evTime_process_period>
     6cc:	89 2b       	or	r24, r25
     6ce:	59 f0       	breq	.+22     	; 0x6e6 <dcmotor_process+0x2a>
	{
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
     6d0:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <motorD>
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	31 f0       	breq	.+12     	; 0x6e4 <dcmotor_process+0x28>
     6d8:	82 30       	cpi	r24, 0x02	; 2
     6da:	29 f4       	brne	.+10     	; 0x6e6 <dcmotor_process+0x2a>
		{
			case MOTOR_ON:
			//debug_msg("MOTOR ON %d\n", motorD.pwm_value);
			OCR2 = motorD.pwm_value;
     6dc:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <motorD+0x3>
     6e0:	83 bd       	out	0x23, r24	; 35
			break;
     6e2:	08 95       	ret

			case MOTOR_OFF:
			//debug_msg("MOTOR OFF %d\n", 0);
			OCR2 = 0;
     6e4:	13 bc       	out	0x23, r1	; 35
     6e6:	08 95       	ret

000006e8 <filtered_value>:
static uint16_t s_o_t_adc;


static uint16_t filtered_value(uint16_t *tab, uint8_t size)
{
	uint16_t ret_val = *tab;
     6e8:	fc 01       	movw	r30, r24
     6ea:	20 81       	ld	r18, Z
     6ec:	31 81       	ldd	r19, Z+1	; 0x01
	for (uint8_t i = 1; i<size; i++)
     6ee:	62 30       	cpi	r22, 0x02	; 2
     6f0:	58 f0       	brcs	.+22     	; 0x708 <filtered_value+0x20>
     6f2:	32 96       	adiw	r30, 0x02	; 2
     6f4:	91 e0       	ldi	r25, 0x01	; 1
	{
		ret_val = (ret_val + tab[i])/2;
     6f6:	41 91       	ld	r20, Z+
     6f8:	51 91       	ld	r21, Z+
     6fa:	24 0f       	add	r18, r20
     6fc:	35 1f       	adc	r19, r21
     6fe:	36 95       	lsr	r19
     700:	27 95       	ror	r18


static uint16_t filtered_value(uint16_t *tab, uint8_t size)
{
	uint16_t ret_val = *tab;
	for (uint8_t i = 1; i<size; i++)
     702:	9f 5f       	subi	r25, 0xFF	; 255
     704:	69 13       	cpse	r22, r25
     706:	f7 cf       	rjmp	.-18     	; 0x6f6 <filtered_value+0xe>
	{
		ret_val = (ret_val + tab[i])/2;
	}
	return ret_val;
}
     708:	c9 01       	movw	r24, r18
     70a:	08 95       	ret

0000070c <init_measure>:

void init_measure(void)
{
     70c:	e8 e5       	ldi	r30, 0x58	; 88
     70e:	f1 e0       	ldi	r31, 0x01	; 1
     710:	20 e8       	ldi	r18, 0x80	; 128
     712:	31 e0       	ldi	r19, 0x01	; 1
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
     714:	81 ef       	ldi	r24, 0xF1	; 241
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	81 93       	st	Z+, r24
     71a:	91 93       	st	Z+, r25
	return ret_val;
}

void init_measure(void)
{
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
     71c:	2e 17       	cp	r18, r30
     71e:	3f 07       	cpc	r19, r31
     720:	d9 f7       	brne	.-10     	; 0x718 <init_measure+0xc>
     722:	e7 e3       	ldi	r30, 0x37	; 55
     724:	f1 e0       	ldi	r31, 0x01	; 1
     726:	85 e5       	ldi	r24, 0x55	; 85
     728:	91 e0       	ldi	r25, 0x01	; 1
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
	{
		motor_f_table[i] = 0;
     72a:	11 92       	st	Z+, r1
     72c:	11 92       	st	Z+, r1
{
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
     72e:	8e 17       	cp	r24, r30
     730:	9f 07       	cpc	r25, r31
     732:	d9 f7       	brne	.-10     	; 0x72a <init_measure+0x1e>
     734:	ef e1       	ldi	r30, 0x1F	; 31
     736:	f1 e0       	ldi	r31, 0x01	; 1
     738:	83 e3       	ldi	r24, 0x33	; 51
     73a:	91 e0       	ldi	r25, 0x01	; 1
	{
		motor_f_table[i] = 0;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_S_SIZE; i++)
	{
		s_o_t_f_table[i] = 0;
     73c:	11 92       	st	Z+, r1
     73e:	11 92       	st	Z+, r1
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
	{
		motor_f_table[i] = 0;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_S_SIZE; i++)
     740:	8e 17       	cp	r24, r30
     742:	9f 07       	cpc	r25, r31
     744:	d9 f7       	brne	.-10     	; 0x73c <init_measure+0x30>
	{
		s_o_t_f_table[i] = 0;
	}
}
     746:	08 95       	ret

00000748 <measure_process>:
static timer_t measure_timer;
static uint32_t debug_msg_counter;
void measure_process(void)
{
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
	if (measure_timer < mktime.ms)
     74c:	40 91 e6 03 	lds	r20, 0x03E6	; 0x8003e6 <mktime+0x2>
     750:	50 91 e7 03 	lds	r21, 0x03E7	; 0x8003e7 <mktime+0x3>
     754:	60 91 e8 03 	lds	r22, 0x03E8	; 0x8003e8 <mktime+0x4>
     758:	70 91 e9 03 	lds	r23, 0x03E9	; 0x8003e9 <mktime+0x5>
     75c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <measure_timer>
     760:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <measure_timer+0x1>
     764:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <measure_timer+0x2>
     768:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <measure_timer+0x3>
     76c:	84 17       	cp	r24, r20
     76e:	95 07       	cpc	r25, r21
     770:	a6 07       	cpc	r26, r22
     772:	b7 07       	cpc	r27, r23
     774:	08 f0       	brcs	.+2      	; 0x778 <measure_process+0x30>
     776:	9a c0       	rjmp	.+308    	; 0x8ac <__stack+0x4d>
	{
		measure_timer = mktime.ms + 20;
     778:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <mktime+0x2>
     77c:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <mktime+0x3>
     780:	a0 91 e8 03 	lds	r26, 0x03E8	; 0x8003e8 <mktime+0x4>
     784:	b0 91 e9 03 	lds	r27, 0x03E9	; 0x8003e9 <mktime+0x5>
     788:	44 96       	adiw	r24, 0x14	; 20
     78a:	a1 1d       	adc	r26, r1
     78c:	b1 1d       	adc	r27, r1
     78e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <measure_timer>
     792:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <measure_timer+0x1>
     796:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <measure_timer+0x2>
     79a:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <measure_timer+0x3>
		accum_adc = adc_read(ACCUMULATOR_ADC_CH); 
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <adc_read>
     7a4:	9c 01       	movw	r18, r24
     7a6:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <accum_adc+0x1>
     7aa:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <accum_adc>
		#if CONFIG_DEVICE_SOLARKA
		#endif
		#if CONFIG_DEVICE_SIEWNIK
		accum_adc += motor_filter_value*0.27; //motor_filter_value*0.0075*1025/5/5.7
		#endif
		accumulator_tab[iteration_adc_accum_table] = accum_adc;
     7ae:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <iteration_adc_accum_table>
     7b2:	e9 2f       	mov	r30, r25
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	ee 0f       	add	r30, r30
     7b8:	ff 1f       	adc	r31, r31
     7ba:	e8 5a       	subi	r30, 0xA8	; 168
     7bc:	fe 4f       	sbci	r31, 0xFE	; 254
     7be:	31 83       	std	Z+1, r19	; 0x01
     7c0:	20 83       	st	Z, r18
		
		iteration_adc_accum_table++;
     7c2:	9f 5f       	subi	r25, 0xFF	; 255
     7c4:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <iteration_adc_accum_table>
		motor_adc = adc_read(MOTOR_ADC_CH);
     7c8:	82 e0       	ldi	r24, 0x02	; 2
     7ca:	0e 94 61 01 	call	0x2c2	; 0x2c2 <adc_read>
		if (motor_adc > 31) motor_adc = motor_adc - 31;
     7ce:	80 32       	cpi	r24, 0x20	; 32
     7d0:	91 05       	cpc	r25, r1
     7d2:	30 f0       	brcs	.+12     	; 0x7e0 <measure_process+0x98>
     7d4:	4f 97       	sbiw	r24, 0x1f	; 31
     7d6:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <motor_adc+0x1>
     7da:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <motor_adc>
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <measure_process+0xa0>
		else motor_adc = 0;
     7e0:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <motor_adc+0x1>
     7e4:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <motor_adc>
		motor_f_table[iteration_adc_motor_table] = motor_adc;
     7e8:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <iteration_adc_motor_table>
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	ee 0f       	add	r30, r30
     7f0:	ff 1f       	adc	r31, r31
     7f2:	e9 5c       	subi	r30, 0xC9	; 201
     7f4:	fe 4f       	sbci	r31, 0xFE	; 254
     7f6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <motor_adc>
     7fa:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <motor_adc+0x1>
     7fe:	91 83       	std	Z+1, r25	; 0x01
     800:	80 83       	st	Z, r24
		///////////////////////////////////////////////////////////
		////////// TODO isset_timer
		s_o_t_adc = adc_read(SERVO_ADC_CH);
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	0e 94 61 01 	call	0x2c2	; 0x2c2 <adc_read>
     808:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <s_o_t_adc+0x1>
     80c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <s_o_t_adc>

		s_o_t_f_table[s_o_t_iteration_adc_table] = s_o_t_adc;
     810:	c0 91 1e 01 	lds	r28, 0x011E	; 0x80011e <s_o_t_iteration_adc_table>
     814:	ec 2f       	mov	r30, r28
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	ee 0f       	add	r30, r30
     81a:	ff 1f       	adc	r31, r31
     81c:	e1 5e       	subi	r30, 0xE1	; 225
     81e:	fe 4f       	sbci	r31, 0xFE	; 254
     820:	91 83       	std	Z+1, r25	; 0x01
     822:	80 83       	st	Z, r24
		iteration_adc_motor_table++;
     824:	d0 91 57 01 	lds	r29, 0x0157	; 0x800157 <iteration_adc_motor_table>
     828:	df 5f       	subi	r29, 0xFF	; 255
     82a:	d0 93 57 01 	sts	0x0157, r29	; 0x800157 <iteration_adc_motor_table>
		s_o_t_iteration_adc_table++;
     82e:	cf 5f       	subi	r28, 0xFF	; 255
     830:	c0 93 1e 01 	sts	0x011E, r28	; 0x80011e <s_o_t_iteration_adc_table>
		filtered_accum_adc_val = filtered_value(accumulator_tab, ACCUMULATOR_SIZE_TAB);
     834:	64 e1       	ldi	r22, 0x14	; 20
     836:	88 e5       	ldi	r24, 0x58	; 88
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	0e 94 74 03 	call	0x6e8	; 0x6e8 <filtered_value>
     83e:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <filtered_accum_adc_val+0x1>
     842:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <filtered_accum_adc_val>
		motor_filter_value = filtered_value(motor_f_table, FILTER_TABLE_SIZE);
     846:	6f e0       	ldi	r22, 0x0F	; 15
     848:	87 e3       	ldi	r24, 0x37	; 55
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <filtered_value>
     850:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <motor_filter_value+0x1>
     854:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <motor_filter_value>
		s_o_t_filter_value = filtered_value(s_o_t_f_table, FILTER_TABLE_S_SIZE);
     858:	6a e0       	ldi	r22, 0x0A	; 10
     85a:	8f e1       	ldi	r24, 0x1F	; 31
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <filtered_value>
     862:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <s_o_t_filter_value+0x1>
     866:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <s_o_t_filter_value>
		debug_msg_counter++;
     86a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <debug_msg_counter>
     86e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <debug_msg_counter+0x1>
     872:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <debug_msg_counter+0x2>
     876:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <debug_msg_counter+0x3>
     87a:	01 96       	adiw	r24, 0x01	; 1
     87c:	a1 1d       	adc	r26, r1
     87e:	b1 1d       	adc	r27, r1
     880:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <debug_msg_counter>
     884:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <debug_msg_counter+0x1>
     888:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <debug_msg_counter+0x2>
     88c:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <debug_msg_counter+0x3>
		
		if (iteration_adc_accum_table == ACCUMULATOR_SIZE_TAB) iteration_adc_accum_table = 0;
     890:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <iteration_adc_accum_table>
     894:	84 31       	cpi	r24, 0x14	; 20
     896:	11 f4       	brne	.+4      	; 0x89c <__stack+0x3d>
     898:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <iteration_adc_accum_table>
		if (s_o_t_iteration_adc_table == FILTER_TABLE_S_SIZE) s_o_t_iteration_adc_table = 0;
     89c:	ca 30       	cpi	r28, 0x0A	; 10
     89e:	11 f4       	brne	.+4      	; 0x8a4 <__stack+0x45>
     8a0:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <s_o_t_iteration_adc_table>
		if (iteration_adc_motor_table == FILTER_TABLE_SIZE) iteration_adc_motor_table = 0;
     8a4:	df 30       	cpi	r29, 0x0F	; 15
     8a6:	11 f4       	brne	.+4      	; 0x8ac <__stack+0x4d>
     8a8:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <iteration_adc_motor_table>
	}
}
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	08 95       	ret

000008b2 <measure_get_filtered_value>:

uint16_t measure_get_filtered_value(_type_measure type)
{
    switch(type)
     8b2:	83 30       	cpi	r24, 0x03	; 3
     8b4:	18 f4       	brcc	.+6      	; 0x8bc <measure_get_filtered_value+0xa>
     8b6:	81 30       	cpi	r24, 0x01	; 1
     8b8:	40 f0       	brcs	.+16     	; 0x8ca <measure_get_filtered_value+0x18>
     8ba:	0c c0       	rjmp	.+24     	; 0x8d4 <measure_get_filtered_value+0x22>
     8bc:	83 30       	cpi	r24, 0x03	; 3
     8be:	79 f4       	brne	.+30     	; 0x8de <measure_get_filtered_value+0x2c>
    {
        case MEAS_ACCUM:
        return filtered_accum_adc_val;
     8c0:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <filtered_accum_adc_val>
     8c4:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <filtered_accum_adc_val+0x1>
     8c8:	08 95       	ret
        break;

        case MEAS_MOTOR:
        return motor_filter_value;
     8ca:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <motor_filter_value>
     8ce:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <motor_filter_value+0x1>
     8d2:	08 95       	ret
        break;

        case MEAS_SERVO:
		case MEAS_TEMPERATURE:
        return s_o_t_filter_value;
     8d4:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <s_o_t_filter_value>
     8d8:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <s_o_t_filter_value+0x1>
     8dc:	08 95       	ret
        break;
    }
	return 0;
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	90 e0       	ldi	r25, 0x00	; 0
}
     8e2:	08 95       	ret

000008e4 <init_system>:
extern uint8_t servo_vibro_value;

extern uint8_t motor_value;

void init_system(void)
{
     8e4:	08 95       	ret

000008e6 <on_system>:

}

void on_system(void)
{
	dcmotorpwm_init();	
     8e6:	0e 94 1d 03 	call	0x63a	; 0x63a <dcmotorpwm_init>
	//servo_init(0);
	init_measure();
     8ea:	0e 94 86 03 	call	0x70c	; 0x70c <init_measure>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <system_events+0x1>
     8f6:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <system_events>
     8fa:	08 95       	ret

000008fc <__vector_10>:
	int time_to_end;
	if (evt->timer > mktime.ms)
		time_to_end = evt->timer - mktime.ms;
	else time_to_end = 0;
	return time_to_end;
}
     8fc:	1f 92       	push	r1
     8fe:	0f 92       	push	r0
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	0f 92       	push	r0
     904:	11 24       	eor	r1, r1
     906:	2f 93       	push	r18
     908:	8f 93       	push	r24
     90a:	9f 93       	push	r25
     90c:	af 93       	push	r26
     90e:	bf 93       	push	r27
     910:	ef 93       	push	r30
     912:	ff 93       	push	r31
     914:	e4 ee       	ldi	r30, 0xE4	; 228
     916:	f3 e0       	ldi	r31, 0x03	; 3
     918:	80 81       	ld	r24, Z
     91a:	91 81       	ldd	r25, Z+1	; 0x01
     91c:	c2 96       	adiw	r24, 0x32	; 50
     91e:	91 83       	std	Z+1, r25	; 0x01
     920:	80 83       	st	Z, r24
     922:	80 81       	ld	r24, Z
     924:	91 81       	ldd	r25, Z+1	; 0x01
     926:	88 3e       	cpi	r24, 0xE8	; 232
     928:	93 40       	sbci	r25, 0x03	; 3
     92a:	88 f0       	brcs	.+34     	; 0x94e <__vector_10+0x52>
     92c:	82 81       	ldd	r24, Z+2	; 0x02
     92e:	93 81       	ldd	r25, Z+3	; 0x03
     930:	a4 81       	ldd	r26, Z+4	; 0x04
     932:	b5 81       	ldd	r27, Z+5	; 0x05
     934:	01 96       	adiw	r24, 0x01	; 1
     936:	a1 1d       	adc	r26, r1
     938:	b1 1d       	adc	r27, r1
     93a:	82 83       	std	Z+2, r24	; 0x02
     93c:	93 83       	std	Z+3, r25	; 0x03
     93e:	a4 83       	std	Z+4, r26	; 0x04
     940:	b5 83       	std	Z+5, r27	; 0x05
     942:	80 81       	ld	r24, Z
     944:	91 81       	ldd	r25, Z+1	; 0x01
     946:	88 5e       	subi	r24, 0xE8	; 232
     948:	93 40       	sbci	r25, 0x03	; 3
     94a:	91 83       	std	Z+1, r25	; 0x01
     94c:	80 83       	st	Z, r24
     94e:	ff 91       	pop	r31
     950:	ef 91       	pop	r30
     952:	bf 91       	pop	r27
     954:	af 91       	pop	r26
     956:	9f 91       	pop	r25
     958:	8f 91       	pop	r24
     95a:	2f 91       	pop	r18
     95c:	0f 90       	pop	r0
     95e:	0f be       	out	0x3f, r0	; 63
     960:	0f 90       	pop	r0
     962:	1f 90       	pop	r1
     964:	18 95       	reti

00000966 <timer0_init>:
     966:	93 b7       	in	r25, 0x33	; 51
     968:	98 60       	ori	r25, 0x08	; 8
     96a:	93 bf       	out	0x33, r25	; 51
     96c:	6c bf       	out	0x3c, r22	; 60
     96e:	82 30       	cpi	r24, 0x02	; 2
     970:	99 f0       	breq	.+38     	; 0x998 <timer0_init+0x32>
     972:	28 f4       	brcc	.+10     	; 0x97e <timer0_init+0x18>
     974:	88 23       	and	r24, r24
     976:	41 f0       	breq	.+16     	; 0x988 <timer0_init+0x22>
     978:	81 30       	cpi	r24, 0x01	; 1
     97a:	51 f0       	breq	.+20     	; 0x990 <timer0_init+0x2a>
     97c:	19 c0       	rjmp	.+50     	; 0x9b0 <timer0_init+0x4a>
     97e:	83 30       	cpi	r24, 0x03	; 3
     980:	79 f0       	breq	.+30     	; 0x9a0 <timer0_init+0x3a>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	89 f0       	breq	.+34     	; 0x9a8 <timer0_init+0x42>
     986:	14 c0       	rjmp	.+40     	; 0x9b0 <timer0_init+0x4a>
     988:	83 b7       	in	r24, 0x33	; 51
     98a:	81 60       	ori	r24, 0x01	; 1
     98c:	83 bf       	out	0x33, r24	; 51
     98e:	13 c0       	rjmp	.+38     	; 0x9b6 <timer0_init+0x50>
     990:	83 b7       	in	r24, 0x33	; 51
     992:	82 60       	ori	r24, 0x02	; 2
     994:	83 bf       	out	0x33, r24	; 51
     996:	0f c0       	rjmp	.+30     	; 0x9b6 <timer0_init+0x50>
     998:	83 b7       	in	r24, 0x33	; 51
     99a:	83 60       	ori	r24, 0x03	; 3
     99c:	83 bf       	out	0x33, r24	; 51
     99e:	0b c0       	rjmp	.+22     	; 0x9b6 <timer0_init+0x50>
     9a0:	83 b7       	in	r24, 0x33	; 51
     9a2:	84 60       	ori	r24, 0x04	; 4
     9a4:	83 bf       	out	0x33, r24	; 51
     9a6:	07 c0       	rjmp	.+14     	; 0x9b6 <timer0_init+0x50>
     9a8:	83 b7       	in	r24, 0x33	; 51
     9aa:	85 60       	ori	r24, 0x05	; 5
     9ac:	83 bf       	out	0x33, r24	; 51
     9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <timer0_init+0x50>
     9b0:	83 b7       	in	r24, 0x33	; 51
     9b2:	81 60       	ori	r24, 0x01	; 1
     9b4:	83 bf       	out	0x33, r24	; 51
     9b6:	89 b7       	in	r24, 0x39	; 57
     9b8:	82 60       	ori	r24, 0x02	; 2
     9ba:	89 bf       	out	0x39, r24	; 57
     9bc:	08 95       	ret

000009be <evTime_init>:
     9be:	23 e0       	ldi	r18, 0x03	; 3
     9c0:	fc 01       	movw	r30, r24
     9c2:	24 83       	std	Z+4, r18	; 0x04
     9c4:	10 82       	st	Z, r1
     9c6:	11 82       	std	Z+1, r1	; 0x01
     9c8:	12 82       	std	Z+2, r1	; 0x02
     9ca:	13 82       	std	Z+3, r1	; 0x03
     9cc:	08 95       	ret

000009ce <evTime_start>:
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
     9d2:	21 e0       	ldi	r18, 0x01	; 1
     9d4:	fc 01       	movw	r30, r24
     9d6:	24 83       	std	Z+4, r18	; 0x04
     9d8:	00 91 e6 03 	lds	r16, 0x03E6	; 0x8003e6 <mktime+0x2>
     9dc:	10 91 e7 03 	lds	r17, 0x03E7	; 0x8003e7 <mktime+0x3>
     9e0:	20 91 e8 03 	lds	r18, 0x03E8	; 0x8003e8 <mktime+0x4>
     9e4:	30 91 e9 03 	lds	r19, 0x03E9	; 0x8003e9 <mktime+0x5>
     9e8:	40 0f       	add	r20, r16
     9ea:	51 1f       	adc	r21, r17
     9ec:	62 1f       	adc	r22, r18
     9ee:	73 1f       	adc	r23, r19
     9f0:	40 83       	st	Z, r20
     9f2:	51 83       	std	Z+1, r21	; 0x01
     9f4:	62 83       	std	Z+2, r22	; 0x02
     9f6:	73 83       	std	Z+3, r23	; 0x03
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	08 95       	ret

000009fe <evTime_check>:

int evTime_check(evTime * evt)
{
     9fe:	fc 01       	movw	r30, r24
	if (evt->time_state == TIMER_START)
     a00:	84 81       	ldd	r24, Z+4	; 0x04
     a02:	81 30       	cpi	r24, 0x01	; 1
     a04:	b1 f4       	brne	.+44     	; 0xa32 <evTime_check+0x34>
	{
		if (evt->timer < mktime.ms) 
     a06:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <mktime+0x2>
     a0a:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <mktime+0x3>
     a0e:	a0 91 e8 03 	lds	r26, 0x03E8	; 0x8003e8 <mktime+0x4>
     a12:	b0 91 e9 03 	lds	r27, 0x03E9	; 0x8003e9 <mktime+0x5>
     a16:	40 81       	ld	r20, Z
     a18:	51 81       	ldd	r21, Z+1	; 0x01
     a1a:	62 81       	ldd	r22, Z+2	; 0x02
     a1c:	73 81       	ldd	r23, Z+3	; 0x03
     a1e:	48 17       	cp	r20, r24
     a20:	59 07       	cpc	r21, r25
     a22:	6a 07       	cpc	r22, r26
     a24:	7b 07       	cpc	r23, r27
     a26:	40 f4       	brcc	.+16     	; 0xa38 <evTime_check+0x3a>
		{
			evt->time_state = TIMER_END;
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	84 83       	std	Z+4, r24	; 0x04
			return 1;
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	08 95       	ret
		}
		else return 0;
	}
	else return -1;
     a32:	8f ef       	ldi	r24, 0xFF	; 255
     a34:	9f ef       	ldi	r25, 0xFF	; 255
     a36:	08 95       	ret
		if (evt->timer < mktime.ms) 
		{
			evt->time_state = TIMER_END;
			return 1;
		}
		else return 0;
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	90 e0       	ldi	r25, 0x00	; 0
	}
	else return -1;
}
     a3c:	08 95       	ret

00000a3e <evTime_off>:

int evTime_off(evTime * evt)
{
	return evt->time_state == TIMER_OFF;
     a3e:	21 e0       	ldi	r18, 0x01	; 1
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	fc 01       	movw	r30, r24
     a44:	84 81       	ldd	r24, Z+4	; 0x04
     a46:	83 30       	cpi	r24, 0x03	; 3
     a48:	11 f0       	breq	.+4      	; 0xa4e <evTime_off+0x10>
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
}
     a4e:	c9 01       	movw	r24, r18
     a50:	08 95       	ret

00000a52 <evTime_process_period>:

int evTime_process_period(evTime * timer, uint32_t period)
{
     a52:	cf 92       	push	r12
     a54:	df 92       	push	r13
     a56:	ef 92       	push	r14
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	ec 01       	movw	r28, r24
     a64:	6a 01       	movw	r12, r20
     a66:	7b 01       	movw	r14, r22
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
     a68:	8c 81       	ldd	r24, Y+4	; 0x04
     a6a:	81 11       	cpse	r24, r1
     a6c:	06 c0       	rjmp	.+12     	; 0xa7a <evTime_process_period+0x28>
	#endif
}

void evTime_init(evTime * evt)
{
	evt->time_state = TIMER_OFF;
     a6e:	83 e0       	ldi	r24, 0x03	; 3
     a70:	8c 83       	std	Y+4, r24	; 0x04
	evt->timer = 0;
     a72:	18 82       	st	Y, r1
     a74:	19 82       	std	Y+1, r1	; 0x01
     a76:	1a 82       	std	Y+2, r1	; 0x02
     a78:	1b 82       	std	Y+3, r1	; 0x03

int evTime_process_period(evTime * timer, uint32_t period)
{
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
	ret_val = evTime_check(timer);
     a7a:	ce 01       	movw	r24, r28
     a7c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <evTime_check>
     a80:	8c 01       	movw	r16, r24
	if (ret_val == 1)
     a82:	01 97       	sbiw	r24, 0x01	; 1
     a84:	31 f4       	brne	.+12     	; 0xa92 <evTime_process_period+0x40>
	{
		evTime_start(timer, period);
     a86:	b7 01       	movw	r22, r14
     a88:	a6 01       	movw	r20, r12
     a8a:	ce 01       	movw	r24, r28
     a8c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <evTime_start>
		return 1;
     a90:	0d c0       	rjmp	.+26     	; 0xaac <evTime_process_period+0x5a>
	}
	else if (evTime_off(timer))
     a92:	8c 81       	ldd	r24, Y+4	; 0x04
     a94:	83 30       	cpi	r24, 0x03	; 3
     a96:	41 f4       	brne	.+16     	; 0xaa8 <evTime_process_period+0x56>
	{
		evTime_start(timer, period);
     a98:	b7 01       	movw	r22, r14
     a9a:	a6 01       	movw	r20, r12
     a9c:	ce 01       	movw	r24, r28
     a9e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <evTime_start>
	}
	return 0;
     aa2:	00 e0       	ldi	r16, 0x00	; 0
     aa4:	10 e0       	ldi	r17, 0x00	; 0
     aa6:	02 c0       	rjmp	.+4      	; 0xaac <evTime_process_period+0x5a>
     aa8:	00 e0       	ldi	r16, 0x00	; 0
     aaa:	10 e0       	ldi	r17, 0x00	; 0
}
     aac:	c8 01       	movw	r24, r16
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	ff 90       	pop	r15
     ab8:	ef 90       	pop	r14
     aba:	df 90       	pop	r13
     abc:	cf 90       	pop	r12
     abe:	08 95       	ret

00000ac0 <__vector_13>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
     ac0:	1f 92       	push	r1
     ac2:	0f 92       	push	r0
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	0f 92       	push	r0
     ac8:	11 24       	eor	r1, r1
     aca:	2f 93       	push	r18
     acc:	3f 93       	push	r19
     ace:	4f 93       	push	r20
     ad0:	5f 93       	push	r21
     ad2:	8f 93       	push	r24
     ad4:	9f 93       	push	r25
     ad6:	ef 93       	push	r30
     ad8:	ff 93       	push	r31
     ada:	2b b1       	in	r18, 0x0b	; 11
     adc:	3c b1       	in	r19, 0x0c	; 12
     ade:	28 71       	andi	r18, 0x18	; 24
     ae0:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <UART_RxHead>
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	8f 77       	andi	r24, 0x7F	; 127
     aea:	99 27       	eor	r25, r25
     aec:	40 91 86 01 	lds	r20, 0x0186	; 0x800186 <UART_RxTail>
     af0:	50 e0       	ldi	r21, 0x00	; 0
     af2:	84 17       	cp	r24, r20
     af4:	95 07       	cpc	r25, r21
     af6:	39 f0       	breq	.+14     	; 0xb06 <__vector_13+0x46>
     af8:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <UART_RxHead>
     afc:	fc 01       	movw	r30, r24
     afe:	e6 57       	subi	r30, 0x76	; 118
     b00:	fe 4f       	sbci	r31, 0xFE	; 254
     b02:	30 83       	st	Z, r19
     b04:	01 c0       	rjmp	.+2      	; 0xb08 <__vector_13+0x48>
     b06:	22 e0       	ldi	r18, 0x02	; 2
     b08:	20 93 85 01 	sts	0x0185, r18	; 0x800185 <UART_LastRxError>
     b0c:	ff 91       	pop	r31
     b0e:	ef 91       	pop	r30
     b10:	9f 91       	pop	r25
     b12:	8f 91       	pop	r24
     b14:	5f 91       	pop	r21
     b16:	4f 91       	pop	r20
     b18:	3f 91       	pop	r19
     b1a:	2f 91       	pop	r18
     b1c:	0f 90       	pop	r0
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	0f 90       	pop	r0
     b22:	1f 90       	pop	r1
     b24:	18 95       	reti

00000b26 <__vector_14>:
     b26:	1f 92       	push	r1
     b28:	0f 92       	push	r0
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	0f 92       	push	r0
     b2e:	11 24       	eor	r1, r1
     b30:	8f 93       	push	r24
     b32:	9f 93       	push	r25
     b34:	ef 93       	push	r30
     b36:	ff 93       	push	r31
     b38:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <UART_TxHead>
     b3c:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <UART_TxTail>
     b40:	98 17       	cp	r25, r24
     b42:	71 f0       	breq	.+28     	; 0xb60 <__vector_14+0x3a>
     b44:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <UART_TxTail>
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	8f 77       	andi	r24, 0x7F	; 127
     b4e:	99 27       	eor	r25, r25
     b50:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <UART_TxTail>
     b54:	fc 01       	movw	r30, r24
     b56:	e6 5f       	subi	r30, 0xF6	; 246
     b58:	fd 4f       	sbci	r31, 0xFD	; 253
     b5a:	80 81       	ld	r24, Z
     b5c:	8c b9       	out	0x0c, r24	; 12
     b5e:	01 c0       	rjmp	.+2      	; 0xb62 <__vector_14+0x3c>
     b60:	55 98       	cbi	0x0a, 5	; 10
     b62:	ff 91       	pop	r31
     b64:	ef 91       	pop	r30
     b66:	9f 91       	pop	r25
     b68:	8f 91       	pop	r24
     b6a:	0f 90       	pop	r0
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	0f 90       	pop	r0
     b70:	1f 90       	pop	r1
     b72:	18 95       	reti

00000b74 <uart0_init>:
     b74:	f8 94       	cli
     b76:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <UART_TxHead>
     b7a:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <UART_TxTail>
     b7e:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <UART_RxHead>
     b82:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <UART_RxTail>
     b86:	78 94       	sei
     b88:	99 23       	and	r25, r25
     b8a:	1c f4       	brge	.+6      	; 0xb92 <uart0_init+0x1e>
     b8c:	22 e0       	ldi	r18, 0x02	; 2
     b8e:	2b b9       	out	0x0b, r18	; 11
     b90:	9f 77       	andi	r25, 0x7F	; 127
     b92:	90 bd       	out	0x20, r25	; 32
     b94:	89 b9       	out	0x09, r24	; 9
     b96:	88 e9       	ldi	r24, 0x98	; 152
     b98:	8a b9       	out	0x0a, r24	; 10
     b9a:	86 e8       	ldi	r24, 0x86	; 134
     b9c:	80 bd       	out	0x20, r24	; 32
     b9e:	08 95       	ret

00000ba0 <uart0_getc>:
     ba0:	f8 94       	cli
     ba2:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <UART_RxHead>
     ba6:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <UART_RxTail>
     baa:	98 13       	cpse	r25, r24
     bac:	04 c0       	rjmp	.+8      	; 0xbb6 <uart0_getc+0x16>
     bae:	78 94       	sei
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	91 e0       	ldi	r25, 0x01	; 1
     bb4:	08 95       	ret
     bb6:	78 94       	sei
     bb8:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <UART_RxTail>
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	01 96       	adiw	r24, 0x01	; 1
     bc0:	8f 77       	andi	r24, 0x7F	; 127
     bc2:	99 27       	eor	r25, r25
     bc4:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <UART_RxTail>
     bc8:	fc 01       	movw	r30, r24
     bca:	e6 57       	subi	r30, 0x76	; 118
     bcc:	fe 4f       	sbci	r31, 0xFE	; 254
     bce:	20 81       	ld	r18, Z
     bd0:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <UART_LastRxError>
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	98 2f       	mov	r25, r24
     bd8:	88 27       	eor	r24, r24
     bda:	82 0f       	add	r24, r18
     bdc:	91 1d       	adc	r25, r1
     bde:	08 95       	ret

00000be0 <uart0_putc>:
		}
	} while (tmphead == txtail_tmp); /* wait for free space in buffer */
#else
	uint16_t tmphead;
	
	tmphead = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
     be0:	40 91 89 01 	lds	r20, 0x0189	; 0x800189 <UART_TxHead>
     be4:	50 e0       	ldi	r21, 0x00	; 0
     be6:	4f 5f       	subi	r20, 0xFF	; 255
     be8:	5f 4f       	sbci	r21, 0xFF	; 255
     bea:	4f 77       	andi	r20, 0x7F	; 127
     bec:	55 27       	eor	r21, r21
	
	while (tmphead == UART_TxTail); /* wait for free space in buffer */
     bee:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <UART_TxTail>
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	42 17       	cp	r20, r18
     bf6:	53 07       	cpc	r21, r19
     bf8:	d1 f3       	breq	.-12     	; 0xbee <uart0_putc+0xe>
#endif

	UART_TxBuf[tmphead] = data;
     bfa:	fa 01       	movw	r30, r20
     bfc:	e6 5f       	subi	r30, 0xF6	; 246
     bfe:	fd 4f       	sbci	r31, 0xFD	; 253
     c00:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
     c02:	40 93 89 01 	sts	0x0189, r20	; 0x800189 <UART_TxHead>

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
     c06:	55 9a       	sbi	0x0a, 5	; 10
     c08:	08 95       	ret

00000c0a <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	ec 01       	movw	r28, r24
	while (*s) {
     c10:	88 81       	ld	r24, Y
     c12:	88 23       	and	r24, r24
     c14:	31 f0       	breq	.+12     	; 0xc22 <uart0_puts+0x18>
     c16:	21 96       	adiw	r28, 0x01	; 1
		uart0_putc(*s++);
     c18:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
	while (*s) {
     c1c:	89 91       	ld	r24, Y+
     c1e:	81 11       	cpse	r24, r1
     c20:	fb cf       	rjmp	.-10     	; 0xc18 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	08 95       	ret

00000c28 <vfprintf>:
     c28:	a0 e1       	ldi	r26, 0x10	; 16
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	ea e1       	ldi	r30, 0x1A	; 26
     c2e:	f6 e0       	ldi	r31, 0x06	; 6
     c30:	0c 94 91 09 	jmp	0x1322	; 0x1322 <__prologue_saves__>
     c34:	7c 01       	movw	r14, r24
     c36:	1b 01       	movw	r2, r22
     c38:	6a 01       	movw	r12, r20
     c3a:	fc 01       	movw	r30, r24
     c3c:	17 82       	std	Z+7, r1	; 0x07
     c3e:	16 82       	std	Z+6, r1	; 0x06
     c40:	83 81       	ldd	r24, Z+3	; 0x03
     c42:	81 ff       	sbrs	r24, 1
     c44:	44 c3       	rjmp	.+1672   	; 0x12ce <vfprintf+0x6a6>
     c46:	9e 01       	movw	r18, r28
     c48:	2f 5f       	subi	r18, 0xFF	; 255
     c4a:	3f 4f       	sbci	r19, 0xFF	; 255
     c4c:	39 01       	movw	r6, r18
     c4e:	f7 01       	movw	r30, r14
     c50:	93 81       	ldd	r25, Z+3	; 0x03
     c52:	f1 01       	movw	r30, r2
     c54:	93 fd       	sbrc	r25, 3
     c56:	85 91       	lpm	r24, Z+
     c58:	93 ff       	sbrs	r25, 3
     c5a:	81 91       	ld	r24, Z+
     c5c:	1f 01       	movw	r2, r30
     c5e:	88 23       	and	r24, r24
     c60:	09 f4       	brne	.+2      	; 0xc64 <vfprintf+0x3c>
     c62:	31 c3       	rjmp	.+1634   	; 0x12c6 <vfprintf+0x69e>
     c64:	85 32       	cpi	r24, 0x25	; 37
     c66:	39 f4       	brne	.+14     	; 0xc76 <vfprintf+0x4e>
     c68:	93 fd       	sbrc	r25, 3
     c6a:	85 91       	lpm	r24, Z+
     c6c:	93 ff       	sbrs	r25, 3
     c6e:	81 91       	ld	r24, Z+
     c70:	1f 01       	movw	r2, r30
     c72:	85 32       	cpi	r24, 0x25	; 37
     c74:	39 f4       	brne	.+14     	; 0xc84 <vfprintf+0x5c>
     c76:	b7 01       	movw	r22, r14
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
     c7e:	56 01       	movw	r10, r12
     c80:	65 01       	movw	r12, r10
     c82:	e5 cf       	rjmp	.-54     	; 0xc4e <vfprintf+0x26>
     c84:	10 e0       	ldi	r17, 0x00	; 0
     c86:	51 2c       	mov	r5, r1
     c88:	91 2c       	mov	r9, r1
     c8a:	ff e1       	ldi	r31, 0x1F	; 31
     c8c:	f9 15       	cp	r31, r9
     c8e:	d8 f0       	brcs	.+54     	; 0xcc6 <vfprintf+0x9e>
     c90:	8b 32       	cpi	r24, 0x2B	; 43
     c92:	79 f0       	breq	.+30     	; 0xcb2 <vfprintf+0x8a>
     c94:	38 f4       	brcc	.+14     	; 0xca4 <vfprintf+0x7c>
     c96:	80 32       	cpi	r24, 0x20	; 32
     c98:	79 f0       	breq	.+30     	; 0xcb8 <vfprintf+0x90>
     c9a:	83 32       	cpi	r24, 0x23	; 35
     c9c:	a1 f4       	brne	.+40     	; 0xcc6 <vfprintf+0x9e>
     c9e:	f9 2d       	mov	r31, r9
     ca0:	f0 61       	ori	r31, 0x10	; 16
     ca2:	2e c0       	rjmp	.+92     	; 0xd00 <vfprintf+0xd8>
     ca4:	8d 32       	cpi	r24, 0x2D	; 45
     ca6:	61 f0       	breq	.+24     	; 0xcc0 <vfprintf+0x98>
     ca8:	80 33       	cpi	r24, 0x30	; 48
     caa:	69 f4       	brne	.+26     	; 0xcc6 <vfprintf+0x9e>
     cac:	29 2d       	mov	r18, r9
     cae:	21 60       	ori	r18, 0x01	; 1
     cb0:	2d c0       	rjmp	.+90     	; 0xd0c <vfprintf+0xe4>
     cb2:	39 2d       	mov	r19, r9
     cb4:	32 60       	ori	r19, 0x02	; 2
     cb6:	93 2e       	mov	r9, r19
     cb8:	89 2d       	mov	r24, r9
     cba:	84 60       	ori	r24, 0x04	; 4
     cbc:	98 2e       	mov	r9, r24
     cbe:	2a c0       	rjmp	.+84     	; 0xd14 <vfprintf+0xec>
     cc0:	e9 2d       	mov	r30, r9
     cc2:	e8 60       	ori	r30, 0x08	; 8
     cc4:	15 c0       	rjmp	.+42     	; 0xcf0 <vfprintf+0xc8>
     cc6:	97 fc       	sbrc	r9, 7
     cc8:	2d c0       	rjmp	.+90     	; 0xd24 <vfprintf+0xfc>
     cca:	20 ed       	ldi	r18, 0xD0	; 208
     ccc:	28 0f       	add	r18, r24
     cce:	2a 30       	cpi	r18, 0x0A	; 10
     cd0:	88 f4       	brcc	.+34     	; 0xcf4 <vfprintf+0xcc>
     cd2:	96 fe       	sbrs	r9, 6
     cd4:	06 c0       	rjmp	.+12     	; 0xce2 <vfprintf+0xba>
     cd6:	3a e0       	ldi	r19, 0x0A	; 10
     cd8:	13 9f       	mul	r17, r19
     cda:	20 0d       	add	r18, r0
     cdc:	11 24       	eor	r1, r1
     cde:	12 2f       	mov	r17, r18
     ce0:	19 c0       	rjmp	.+50     	; 0xd14 <vfprintf+0xec>
     ce2:	8a e0       	ldi	r24, 0x0A	; 10
     ce4:	58 9e       	mul	r5, r24
     ce6:	20 0d       	add	r18, r0
     ce8:	11 24       	eor	r1, r1
     cea:	52 2e       	mov	r5, r18
     cec:	e9 2d       	mov	r30, r9
     cee:	e0 62       	ori	r30, 0x20	; 32
     cf0:	9e 2e       	mov	r9, r30
     cf2:	10 c0       	rjmp	.+32     	; 0xd14 <vfprintf+0xec>
     cf4:	8e 32       	cpi	r24, 0x2E	; 46
     cf6:	31 f4       	brne	.+12     	; 0xd04 <vfprintf+0xdc>
     cf8:	96 fc       	sbrc	r9, 6
     cfa:	e5 c2       	rjmp	.+1482   	; 0x12c6 <vfprintf+0x69e>
     cfc:	f9 2d       	mov	r31, r9
     cfe:	f0 64       	ori	r31, 0x40	; 64
     d00:	9f 2e       	mov	r9, r31
     d02:	08 c0       	rjmp	.+16     	; 0xd14 <vfprintf+0xec>
     d04:	8c 36       	cpi	r24, 0x6C	; 108
     d06:	21 f4       	brne	.+8      	; 0xd10 <vfprintf+0xe8>
     d08:	29 2d       	mov	r18, r9
     d0a:	20 68       	ori	r18, 0x80	; 128
     d0c:	92 2e       	mov	r9, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <vfprintf+0xec>
     d10:	88 36       	cpi	r24, 0x68	; 104
     d12:	41 f4       	brne	.+16     	; 0xd24 <vfprintf+0xfc>
     d14:	f1 01       	movw	r30, r2
     d16:	93 fd       	sbrc	r25, 3
     d18:	85 91       	lpm	r24, Z+
     d1a:	93 ff       	sbrs	r25, 3
     d1c:	81 91       	ld	r24, Z+
     d1e:	1f 01       	movw	r2, r30
     d20:	81 11       	cpse	r24, r1
     d22:	b3 cf       	rjmp	.-154    	; 0xc8a <vfprintf+0x62>
     d24:	9b eb       	ldi	r25, 0xBB	; 187
     d26:	98 0f       	add	r25, r24
     d28:	93 30       	cpi	r25, 0x03	; 3
     d2a:	20 f4       	brcc	.+8      	; 0xd34 <vfprintf+0x10c>
     d2c:	99 2d       	mov	r25, r9
     d2e:	90 61       	ori	r25, 0x10	; 16
     d30:	80 5e       	subi	r24, 0xE0	; 224
     d32:	07 c0       	rjmp	.+14     	; 0xd42 <vfprintf+0x11a>
     d34:	9b e9       	ldi	r25, 0x9B	; 155
     d36:	98 0f       	add	r25, r24
     d38:	93 30       	cpi	r25, 0x03	; 3
     d3a:	08 f0       	brcs	.+2      	; 0xd3e <vfprintf+0x116>
     d3c:	66 c1       	rjmp	.+716    	; 0x100a <vfprintf+0x3e2>
     d3e:	99 2d       	mov	r25, r9
     d40:	9f 7e       	andi	r25, 0xEF	; 239
     d42:	96 ff       	sbrs	r25, 6
     d44:	16 e0       	ldi	r17, 0x06	; 6
     d46:	9f 73       	andi	r25, 0x3F	; 63
     d48:	99 2e       	mov	r9, r25
     d4a:	85 36       	cpi	r24, 0x65	; 101
     d4c:	19 f4       	brne	.+6      	; 0xd54 <vfprintf+0x12c>
     d4e:	90 64       	ori	r25, 0x40	; 64
     d50:	99 2e       	mov	r9, r25
     d52:	08 c0       	rjmp	.+16     	; 0xd64 <vfprintf+0x13c>
     d54:	86 36       	cpi	r24, 0x66	; 102
     d56:	21 f4       	brne	.+8      	; 0xd60 <vfprintf+0x138>
     d58:	39 2f       	mov	r19, r25
     d5a:	30 68       	ori	r19, 0x80	; 128
     d5c:	93 2e       	mov	r9, r19
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <vfprintf+0x13c>
     d60:	11 11       	cpse	r17, r1
     d62:	11 50       	subi	r17, 0x01	; 1
     d64:	97 fe       	sbrs	r9, 7
     d66:	07 c0       	rjmp	.+14     	; 0xd76 <vfprintf+0x14e>
     d68:	1c 33       	cpi	r17, 0x3C	; 60
     d6a:	50 f4       	brcc	.+20     	; 0xd80 <vfprintf+0x158>
     d6c:	44 24       	eor	r4, r4
     d6e:	43 94       	inc	r4
     d70:	41 0e       	add	r4, r17
     d72:	27 e0       	ldi	r18, 0x07	; 7
     d74:	0b c0       	rjmp	.+22     	; 0xd8c <vfprintf+0x164>
     d76:	18 30       	cpi	r17, 0x08	; 8
     d78:	38 f0       	brcs	.+14     	; 0xd88 <vfprintf+0x160>
     d7a:	27 e0       	ldi	r18, 0x07	; 7
     d7c:	17 e0       	ldi	r17, 0x07	; 7
     d7e:	05 c0       	rjmp	.+10     	; 0xd8a <vfprintf+0x162>
     d80:	27 e0       	ldi	r18, 0x07	; 7
     d82:	9c e3       	ldi	r25, 0x3C	; 60
     d84:	49 2e       	mov	r4, r25
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <vfprintf+0x164>
     d88:	21 2f       	mov	r18, r17
     d8a:	41 2c       	mov	r4, r1
     d8c:	56 01       	movw	r10, r12
     d8e:	84 e0       	ldi	r24, 0x04	; 4
     d90:	a8 0e       	add	r10, r24
     d92:	b1 1c       	adc	r11, r1
     d94:	f6 01       	movw	r30, r12
     d96:	60 81       	ld	r22, Z
     d98:	71 81       	ldd	r23, Z+1	; 0x01
     d9a:	82 81       	ldd	r24, Z+2	; 0x02
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	04 2d       	mov	r16, r4
     da0:	a3 01       	movw	r20, r6
     da2:	0e 94 c8 09 	call	0x1390	; 0x1390 <__ftoa_engine>
     da6:	6c 01       	movw	r12, r24
     da8:	f9 81       	ldd	r31, Y+1	; 0x01
     daa:	fc 87       	std	Y+12, r31	; 0x0c
     dac:	f0 ff       	sbrs	r31, 0
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <vfprintf+0x18c>
     db0:	f3 ff       	sbrs	r31, 3
     db2:	06 c0       	rjmp	.+12     	; 0xdc0 <vfprintf+0x198>
     db4:	91 fc       	sbrc	r9, 1
     db6:	06 c0       	rjmp	.+12     	; 0xdc4 <vfprintf+0x19c>
     db8:	92 fe       	sbrs	r9, 2
     dba:	06 c0       	rjmp	.+12     	; 0xdc8 <vfprintf+0x1a0>
     dbc:	00 e2       	ldi	r16, 0x20	; 32
     dbe:	05 c0       	rjmp	.+10     	; 0xdca <vfprintf+0x1a2>
     dc0:	0d e2       	ldi	r16, 0x2D	; 45
     dc2:	03 c0       	rjmp	.+6      	; 0xdca <vfprintf+0x1a2>
     dc4:	0b e2       	ldi	r16, 0x2B	; 43
     dc6:	01 c0       	rjmp	.+2      	; 0xdca <vfprintf+0x1a2>
     dc8:	00 e0       	ldi	r16, 0x00	; 0
     dca:	8c 85       	ldd	r24, Y+12	; 0x0c
     dcc:	8c 70       	andi	r24, 0x0C	; 12
     dce:	19 f0       	breq	.+6      	; 0xdd6 <vfprintf+0x1ae>
     dd0:	01 11       	cpse	r16, r1
     dd2:	5a c2       	rjmp	.+1204   	; 0x1288 <vfprintf+0x660>
     dd4:	9b c2       	rjmp	.+1334   	; 0x130c <vfprintf+0x6e4>
     dd6:	97 fe       	sbrs	r9, 7
     dd8:	10 c0       	rjmp	.+32     	; 0xdfa <vfprintf+0x1d2>
     dda:	4c 0c       	add	r4, r12
     ddc:	fc 85       	ldd	r31, Y+12	; 0x0c
     dde:	f4 ff       	sbrs	r31, 4
     de0:	04 c0       	rjmp	.+8      	; 0xdea <vfprintf+0x1c2>
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	81 33       	cpi	r24, 0x31	; 49
     de6:	09 f4       	brne	.+2      	; 0xdea <vfprintf+0x1c2>
     de8:	4a 94       	dec	r4
     dea:	14 14       	cp	r1, r4
     dec:	74 f5       	brge	.+92     	; 0xe4a <vfprintf+0x222>
     dee:	28 e0       	ldi	r18, 0x08	; 8
     df0:	24 15       	cp	r18, r4
     df2:	78 f5       	brcc	.+94     	; 0xe52 <vfprintf+0x22a>
     df4:	88 e0       	ldi	r24, 0x08	; 8
     df6:	48 2e       	mov	r4, r24
     df8:	2c c0       	rjmp	.+88     	; 0xe52 <vfprintf+0x22a>
     dfa:	96 fc       	sbrc	r9, 6
     dfc:	2a c0       	rjmp	.+84     	; 0xe52 <vfprintf+0x22a>
     dfe:	81 2f       	mov	r24, r17
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	8c 15       	cp	r24, r12
     e04:	9d 05       	cpc	r25, r13
     e06:	9c f0       	brlt	.+38     	; 0xe2e <vfprintf+0x206>
     e08:	3c ef       	ldi	r19, 0xFC	; 252
     e0a:	c3 16       	cp	r12, r19
     e0c:	3f ef       	ldi	r19, 0xFF	; 255
     e0e:	d3 06       	cpc	r13, r19
     e10:	74 f0       	brlt	.+28     	; 0xe2e <vfprintf+0x206>
     e12:	89 2d       	mov	r24, r9
     e14:	80 68       	ori	r24, 0x80	; 128
     e16:	98 2e       	mov	r9, r24
     e18:	0a c0       	rjmp	.+20     	; 0xe2e <vfprintf+0x206>
     e1a:	e2 e0       	ldi	r30, 0x02	; 2
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	ec 0f       	add	r30, r28
     e20:	fd 1f       	adc	r31, r29
     e22:	e1 0f       	add	r30, r17
     e24:	f1 1d       	adc	r31, r1
     e26:	80 81       	ld	r24, Z
     e28:	80 33       	cpi	r24, 0x30	; 48
     e2a:	19 f4       	brne	.+6      	; 0xe32 <vfprintf+0x20a>
     e2c:	11 50       	subi	r17, 0x01	; 1
     e2e:	11 11       	cpse	r17, r1
     e30:	f4 cf       	rjmp	.-24     	; 0xe1a <vfprintf+0x1f2>
     e32:	97 fe       	sbrs	r9, 7
     e34:	0e c0       	rjmp	.+28     	; 0xe52 <vfprintf+0x22a>
     e36:	44 24       	eor	r4, r4
     e38:	43 94       	inc	r4
     e3a:	41 0e       	add	r4, r17
     e3c:	81 2f       	mov	r24, r17
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	c8 16       	cp	r12, r24
     e42:	d9 06       	cpc	r13, r25
     e44:	2c f4       	brge	.+10     	; 0xe50 <vfprintf+0x228>
     e46:	1c 19       	sub	r17, r12
     e48:	04 c0       	rjmp	.+8      	; 0xe52 <vfprintf+0x22a>
     e4a:	44 24       	eor	r4, r4
     e4c:	43 94       	inc	r4
     e4e:	01 c0       	rjmp	.+2      	; 0xe52 <vfprintf+0x22a>
     e50:	10 e0       	ldi	r17, 0x00	; 0
     e52:	97 fe       	sbrs	r9, 7
     e54:	06 c0       	rjmp	.+12     	; 0xe62 <vfprintf+0x23a>
     e56:	1c 14       	cp	r1, r12
     e58:	1d 04       	cpc	r1, r13
     e5a:	34 f4       	brge	.+12     	; 0xe68 <vfprintf+0x240>
     e5c:	c6 01       	movw	r24, r12
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	05 c0       	rjmp	.+10     	; 0xe6c <vfprintf+0x244>
     e62:	85 e0       	ldi	r24, 0x05	; 5
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <vfprintf+0x244>
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	01 11       	cpse	r16, r1
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	11 23       	and	r17, r17
     e72:	31 f0       	breq	.+12     	; 0xe80 <vfprintf+0x258>
     e74:	21 2f       	mov	r18, r17
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	2f 5f       	subi	r18, 0xFF	; 255
     e7a:	3f 4f       	sbci	r19, 0xFF	; 255
     e7c:	82 0f       	add	r24, r18
     e7e:	93 1f       	adc	r25, r19
     e80:	25 2d       	mov	r18, r5
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	82 17       	cp	r24, r18
     e86:	93 07       	cpc	r25, r19
     e88:	14 f4       	brge	.+4      	; 0xe8e <vfprintf+0x266>
     e8a:	58 1a       	sub	r5, r24
     e8c:	01 c0       	rjmp	.+2      	; 0xe90 <vfprintf+0x268>
     e8e:	51 2c       	mov	r5, r1
     e90:	89 2d       	mov	r24, r9
     e92:	89 70       	andi	r24, 0x09	; 9
     e94:	49 f4       	brne	.+18     	; 0xea8 <vfprintf+0x280>
     e96:	55 20       	and	r5, r5
     e98:	39 f0       	breq	.+14     	; 0xea8 <vfprintf+0x280>
     e9a:	b7 01       	movw	r22, r14
     e9c:	80 e2       	ldi	r24, 0x20	; 32
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
     ea4:	5a 94       	dec	r5
     ea6:	f7 cf       	rjmp	.-18     	; 0xe96 <vfprintf+0x26e>
     ea8:	00 23       	and	r16, r16
     eaa:	29 f0       	breq	.+10     	; 0xeb6 <vfprintf+0x28e>
     eac:	b7 01       	movw	r22, r14
     eae:	80 2f       	mov	r24, r16
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
     eb6:	93 fc       	sbrc	r9, 3
     eb8:	09 c0       	rjmp	.+18     	; 0xecc <vfprintf+0x2a4>
     eba:	55 20       	and	r5, r5
     ebc:	39 f0       	breq	.+14     	; 0xecc <vfprintf+0x2a4>
     ebe:	b7 01       	movw	r22, r14
     ec0:	80 e3       	ldi	r24, 0x30	; 48
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
     ec8:	5a 94       	dec	r5
     eca:	f7 cf       	rjmp	.-18     	; 0xeba <vfprintf+0x292>
     ecc:	97 fe       	sbrs	r9, 7
     ece:	4c c0       	rjmp	.+152    	; 0xf68 <vfprintf+0x340>
     ed0:	46 01       	movw	r8, r12
     ed2:	d7 fe       	sbrs	r13, 7
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <vfprintf+0x2b2>
     ed6:	81 2c       	mov	r8, r1
     ed8:	91 2c       	mov	r9, r1
     eda:	c6 01       	movw	r24, r12
     edc:	88 19       	sub	r24, r8
     ede:	99 09       	sbc	r25, r9
     ee0:	f3 01       	movw	r30, r6
     ee2:	e8 0f       	add	r30, r24
     ee4:	f9 1f       	adc	r31, r25
     ee6:	fe 87       	std	Y+14, r31	; 0x0e
     ee8:	ed 87       	std	Y+13, r30	; 0x0d
     eea:	96 01       	movw	r18, r12
     eec:	24 19       	sub	r18, r4
     eee:	31 09       	sbc	r19, r1
     ef0:	38 8b       	std	Y+16, r19	; 0x10
     ef2:	2f 87       	std	Y+15, r18	; 0x0f
     ef4:	01 2f       	mov	r16, r17
     ef6:	10 e0       	ldi	r17, 0x00	; 0
     ef8:	11 95       	neg	r17
     efa:	01 95       	neg	r16
     efc:	11 09       	sbc	r17, r1
     efe:	3f ef       	ldi	r19, 0xFF	; 255
     f00:	83 16       	cp	r8, r19
     f02:	93 06       	cpc	r9, r19
     f04:	29 f4       	brne	.+10     	; 0xf10 <vfprintf+0x2e8>
     f06:	b7 01       	movw	r22, r14
     f08:	8e e2       	ldi	r24, 0x2E	; 46
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
     f10:	c8 14       	cp	r12, r8
     f12:	d9 04       	cpc	r13, r9
     f14:	4c f0       	brlt	.+18     	; 0xf28 <vfprintf+0x300>
     f16:	8f 85       	ldd	r24, Y+15	; 0x0f
     f18:	98 89       	ldd	r25, Y+16	; 0x10
     f1a:	88 15       	cp	r24, r8
     f1c:	99 05       	cpc	r25, r9
     f1e:	24 f4       	brge	.+8      	; 0xf28 <vfprintf+0x300>
     f20:	ed 85       	ldd	r30, Y+13	; 0x0d
     f22:	fe 85       	ldd	r31, Y+14	; 0x0e
     f24:	81 81       	ldd	r24, Z+1	; 0x01
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <vfprintf+0x302>
     f28:	80 e3       	ldi	r24, 0x30	; 48
     f2a:	f1 e0       	ldi	r31, 0x01	; 1
     f2c:	8f 1a       	sub	r8, r31
     f2e:	91 08       	sbc	r9, r1
     f30:	2d 85       	ldd	r18, Y+13	; 0x0d
     f32:	3e 85       	ldd	r19, Y+14	; 0x0e
     f34:	2f 5f       	subi	r18, 0xFF	; 255
     f36:	3f 4f       	sbci	r19, 0xFF	; 255
     f38:	3e 87       	std	Y+14, r19	; 0x0e
     f3a:	2d 87       	std	Y+13, r18	; 0x0d
     f3c:	80 16       	cp	r8, r16
     f3e:	91 06       	cpc	r9, r17
     f40:	2c f0       	brlt	.+10     	; 0xf4c <vfprintf+0x324>
     f42:	b7 01       	movw	r22, r14
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
     f4a:	d9 cf       	rjmp	.-78     	; 0xefe <vfprintf+0x2d6>
     f4c:	c8 14       	cp	r12, r8
     f4e:	d9 04       	cpc	r13, r9
     f50:	41 f4       	brne	.+16     	; 0xf62 <vfprintf+0x33a>
     f52:	9a 81       	ldd	r25, Y+2	; 0x02
     f54:	96 33       	cpi	r25, 0x36	; 54
     f56:	20 f4       	brcc	.+8      	; 0xf60 <vfprintf+0x338>
     f58:	95 33       	cpi	r25, 0x35	; 53
     f5a:	19 f4       	brne	.+6      	; 0xf62 <vfprintf+0x33a>
     f5c:	3c 85       	ldd	r19, Y+12	; 0x0c
     f5e:	34 ff       	sbrs	r19, 4
     f60:	81 e3       	ldi	r24, 0x31	; 49
     f62:	b7 01       	movw	r22, r14
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	4e c0       	rjmp	.+156    	; 0x1004 <vfprintf+0x3dc>
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	81 33       	cpi	r24, 0x31	; 49
     f6c:	19 f0       	breq	.+6      	; 0xf74 <vfprintf+0x34c>
     f6e:	9c 85       	ldd	r25, Y+12	; 0x0c
     f70:	9f 7e       	andi	r25, 0xEF	; 239
     f72:	9c 87       	std	Y+12, r25	; 0x0c
     f74:	b7 01       	movw	r22, r14
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
     f7c:	11 11       	cpse	r17, r1
     f7e:	05 c0       	rjmp	.+10     	; 0xf8a <vfprintf+0x362>
     f80:	94 fc       	sbrc	r9, 4
     f82:	18 c0       	rjmp	.+48     	; 0xfb4 <vfprintf+0x38c>
     f84:	85 e6       	ldi	r24, 0x65	; 101
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	17 c0       	rjmp	.+46     	; 0xfb8 <vfprintf+0x390>
     f8a:	b7 01       	movw	r22, r14
     f8c:	8e e2       	ldi	r24, 0x2E	; 46
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
     f94:	1e 5f       	subi	r17, 0xFE	; 254
     f96:	82 e0       	ldi	r24, 0x02	; 2
     f98:	01 e0       	ldi	r16, 0x01	; 1
     f9a:	08 0f       	add	r16, r24
     f9c:	f3 01       	movw	r30, r6
     f9e:	e8 0f       	add	r30, r24
     fa0:	f1 1d       	adc	r31, r1
     fa2:	80 81       	ld	r24, Z
     fa4:	b7 01       	movw	r22, r14
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
     fac:	80 2f       	mov	r24, r16
     fae:	01 13       	cpse	r16, r17
     fb0:	f3 cf       	rjmp	.-26     	; 0xf98 <vfprintf+0x370>
     fb2:	e6 cf       	rjmp	.-52     	; 0xf80 <vfprintf+0x358>
     fb4:	85 e4       	ldi	r24, 0x45	; 69
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	b7 01       	movw	r22, r14
     fba:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
     fbe:	d7 fc       	sbrc	r13, 7
     fc0:	06 c0       	rjmp	.+12     	; 0xfce <vfprintf+0x3a6>
     fc2:	c1 14       	cp	r12, r1
     fc4:	d1 04       	cpc	r13, r1
     fc6:	41 f4       	brne	.+16     	; 0xfd8 <vfprintf+0x3b0>
     fc8:	ec 85       	ldd	r30, Y+12	; 0x0c
     fca:	e4 ff       	sbrs	r30, 4
     fcc:	05 c0       	rjmp	.+10     	; 0xfd8 <vfprintf+0x3b0>
     fce:	d1 94       	neg	r13
     fd0:	c1 94       	neg	r12
     fd2:	d1 08       	sbc	r13, r1
     fd4:	8d e2       	ldi	r24, 0x2D	; 45
     fd6:	01 c0       	rjmp	.+2      	; 0xfda <vfprintf+0x3b2>
     fd8:	8b e2       	ldi	r24, 0x2B	; 43
     fda:	b7 01       	movw	r22, r14
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
     fe2:	80 e3       	ldi	r24, 0x30	; 48
     fe4:	2a e0       	ldi	r18, 0x0A	; 10
     fe6:	c2 16       	cp	r12, r18
     fe8:	d1 04       	cpc	r13, r1
     fea:	2c f0       	brlt	.+10     	; 0xff6 <vfprintf+0x3ce>
     fec:	8f 5f       	subi	r24, 0xFF	; 255
     fee:	fa e0       	ldi	r31, 0x0A	; 10
     ff0:	cf 1a       	sub	r12, r31
     ff2:	d1 08       	sbc	r13, r1
     ff4:	f7 cf       	rjmp	.-18     	; 0xfe4 <vfprintf+0x3bc>
     ff6:	b7 01       	movw	r22, r14
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
     ffe:	b7 01       	movw	r22, r14
    1000:	c6 01       	movw	r24, r12
    1002:	c0 96       	adiw	r24, 0x30	; 48
    1004:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
    1008:	54 c1       	rjmp	.+680    	; 0x12b2 <vfprintf+0x68a>
    100a:	83 36       	cpi	r24, 0x63	; 99
    100c:	31 f0       	breq	.+12     	; 0x101a <vfprintf+0x3f2>
    100e:	83 37       	cpi	r24, 0x73	; 115
    1010:	79 f0       	breq	.+30     	; 0x1030 <vfprintf+0x408>
    1012:	83 35       	cpi	r24, 0x53	; 83
    1014:	09 f0       	breq	.+2      	; 0x1018 <vfprintf+0x3f0>
    1016:	56 c0       	rjmp	.+172    	; 0x10c4 <vfprintf+0x49c>
    1018:	20 c0       	rjmp	.+64     	; 0x105a <vfprintf+0x432>
    101a:	56 01       	movw	r10, r12
    101c:	32 e0       	ldi	r19, 0x02	; 2
    101e:	a3 0e       	add	r10, r19
    1020:	b1 1c       	adc	r11, r1
    1022:	f6 01       	movw	r30, r12
    1024:	80 81       	ld	r24, Z
    1026:	89 83       	std	Y+1, r24	; 0x01
    1028:	01 e0       	ldi	r16, 0x01	; 1
    102a:	10 e0       	ldi	r17, 0x00	; 0
    102c:	63 01       	movw	r12, r6
    102e:	12 c0       	rjmp	.+36     	; 0x1054 <vfprintf+0x42c>
    1030:	56 01       	movw	r10, r12
    1032:	f2 e0       	ldi	r31, 0x02	; 2
    1034:	af 0e       	add	r10, r31
    1036:	b1 1c       	adc	r11, r1
    1038:	f6 01       	movw	r30, r12
    103a:	c0 80       	ld	r12, Z
    103c:	d1 80       	ldd	r13, Z+1	; 0x01
    103e:	96 fe       	sbrs	r9, 6
    1040:	03 c0       	rjmp	.+6      	; 0x1048 <vfprintf+0x420>
    1042:	61 2f       	mov	r22, r17
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	02 c0       	rjmp	.+4      	; 0x104c <vfprintf+0x424>
    1048:	6f ef       	ldi	r22, 0xFF	; 255
    104a:	7f ef       	ldi	r23, 0xFF	; 255
    104c:	c6 01       	movw	r24, r12
    104e:	0e 94 ab 0a 	call	0x1556	; 0x1556 <strnlen>
    1052:	8c 01       	movw	r16, r24
    1054:	f9 2d       	mov	r31, r9
    1056:	ff 77       	andi	r31, 0x7F	; 127
    1058:	14 c0       	rjmp	.+40     	; 0x1082 <vfprintf+0x45a>
    105a:	56 01       	movw	r10, r12
    105c:	22 e0       	ldi	r18, 0x02	; 2
    105e:	a2 0e       	add	r10, r18
    1060:	b1 1c       	adc	r11, r1
    1062:	f6 01       	movw	r30, r12
    1064:	c0 80       	ld	r12, Z
    1066:	d1 80       	ldd	r13, Z+1	; 0x01
    1068:	96 fe       	sbrs	r9, 6
    106a:	03 c0       	rjmp	.+6      	; 0x1072 <vfprintf+0x44a>
    106c:	61 2f       	mov	r22, r17
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <vfprintf+0x44e>
    1072:	6f ef       	ldi	r22, 0xFF	; 255
    1074:	7f ef       	ldi	r23, 0xFF	; 255
    1076:	c6 01       	movw	r24, r12
    1078:	0e 94 a0 0a 	call	0x1540	; 0x1540 <strnlen_P>
    107c:	8c 01       	movw	r16, r24
    107e:	f9 2d       	mov	r31, r9
    1080:	f0 68       	ori	r31, 0x80	; 128
    1082:	9f 2e       	mov	r9, r31
    1084:	f3 fd       	sbrc	r31, 3
    1086:	1a c0       	rjmp	.+52     	; 0x10bc <vfprintf+0x494>
    1088:	85 2d       	mov	r24, r5
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	08 17       	cp	r16, r24
    108e:	19 07       	cpc	r17, r25
    1090:	a8 f4       	brcc	.+42     	; 0x10bc <vfprintf+0x494>
    1092:	b7 01       	movw	r22, r14
    1094:	80 e2       	ldi	r24, 0x20	; 32
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
    109c:	5a 94       	dec	r5
    109e:	f4 cf       	rjmp	.-24     	; 0x1088 <vfprintf+0x460>
    10a0:	f6 01       	movw	r30, r12
    10a2:	97 fc       	sbrc	r9, 7
    10a4:	85 91       	lpm	r24, Z+
    10a6:	97 fe       	sbrs	r9, 7
    10a8:	81 91       	ld	r24, Z+
    10aa:	6f 01       	movw	r12, r30
    10ac:	b7 01       	movw	r22, r14
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
    10b4:	51 10       	cpse	r5, r1
    10b6:	5a 94       	dec	r5
    10b8:	01 50       	subi	r16, 0x01	; 1
    10ba:	11 09       	sbc	r17, r1
    10bc:	01 15       	cp	r16, r1
    10be:	11 05       	cpc	r17, r1
    10c0:	79 f7       	brne	.-34     	; 0x10a0 <vfprintf+0x478>
    10c2:	f7 c0       	rjmp	.+494    	; 0x12b2 <vfprintf+0x68a>
    10c4:	84 36       	cpi	r24, 0x64	; 100
    10c6:	11 f0       	breq	.+4      	; 0x10cc <vfprintf+0x4a4>
    10c8:	89 36       	cpi	r24, 0x69	; 105
    10ca:	61 f5       	brne	.+88     	; 0x1124 <vfprintf+0x4fc>
    10cc:	56 01       	movw	r10, r12
    10ce:	97 fe       	sbrs	r9, 7
    10d0:	09 c0       	rjmp	.+18     	; 0x10e4 <vfprintf+0x4bc>
    10d2:	24 e0       	ldi	r18, 0x04	; 4
    10d4:	a2 0e       	add	r10, r18
    10d6:	b1 1c       	adc	r11, r1
    10d8:	f6 01       	movw	r30, r12
    10da:	60 81       	ld	r22, Z
    10dc:	71 81       	ldd	r23, Z+1	; 0x01
    10de:	82 81       	ldd	r24, Z+2	; 0x02
    10e0:	93 81       	ldd	r25, Z+3	; 0x03
    10e2:	0a c0       	rjmp	.+20     	; 0x10f8 <vfprintf+0x4d0>
    10e4:	f2 e0       	ldi	r31, 0x02	; 2
    10e6:	af 0e       	add	r10, r31
    10e8:	b1 1c       	adc	r11, r1
    10ea:	f6 01       	movw	r30, r12
    10ec:	60 81       	ld	r22, Z
    10ee:	71 81       	ldd	r23, Z+1	; 0x01
    10f0:	07 2e       	mov	r0, r23
    10f2:	00 0c       	add	r0, r0
    10f4:	88 0b       	sbc	r24, r24
    10f6:	99 0b       	sbc	r25, r25
    10f8:	f9 2d       	mov	r31, r9
    10fa:	ff 76       	andi	r31, 0x6F	; 111
    10fc:	9f 2e       	mov	r9, r31
    10fe:	97 ff       	sbrs	r25, 7
    1100:	09 c0       	rjmp	.+18     	; 0x1114 <vfprintf+0x4ec>
    1102:	90 95       	com	r25
    1104:	80 95       	com	r24
    1106:	70 95       	com	r23
    1108:	61 95       	neg	r22
    110a:	7f 4f       	sbci	r23, 0xFF	; 255
    110c:	8f 4f       	sbci	r24, 0xFF	; 255
    110e:	9f 4f       	sbci	r25, 0xFF	; 255
    1110:	f0 68       	ori	r31, 0x80	; 128
    1112:	9f 2e       	mov	r9, r31
    1114:	2a e0       	ldi	r18, 0x0A	; 10
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	a3 01       	movw	r20, r6
    111a:	0e 94 0e 0b 	call	0x161c	; 0x161c <__ultoa_invert>
    111e:	c8 2e       	mov	r12, r24
    1120:	c6 18       	sub	r12, r6
    1122:	3f c0       	rjmp	.+126    	; 0x11a2 <vfprintf+0x57a>
    1124:	09 2d       	mov	r16, r9
    1126:	85 37       	cpi	r24, 0x75	; 117
    1128:	21 f4       	brne	.+8      	; 0x1132 <vfprintf+0x50a>
    112a:	0f 7e       	andi	r16, 0xEF	; 239
    112c:	2a e0       	ldi	r18, 0x0A	; 10
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	1d c0       	rjmp	.+58     	; 0x116c <vfprintf+0x544>
    1132:	09 7f       	andi	r16, 0xF9	; 249
    1134:	8f 36       	cpi	r24, 0x6F	; 111
    1136:	91 f0       	breq	.+36     	; 0x115c <vfprintf+0x534>
    1138:	18 f4       	brcc	.+6      	; 0x1140 <vfprintf+0x518>
    113a:	88 35       	cpi	r24, 0x58	; 88
    113c:	59 f0       	breq	.+22     	; 0x1154 <vfprintf+0x52c>
    113e:	c3 c0       	rjmp	.+390    	; 0x12c6 <vfprintf+0x69e>
    1140:	80 37       	cpi	r24, 0x70	; 112
    1142:	19 f0       	breq	.+6      	; 0x114a <vfprintf+0x522>
    1144:	88 37       	cpi	r24, 0x78	; 120
    1146:	11 f0       	breq	.+4      	; 0x114c <vfprintf+0x524>
    1148:	be c0       	rjmp	.+380    	; 0x12c6 <vfprintf+0x69e>
    114a:	00 61       	ori	r16, 0x10	; 16
    114c:	04 ff       	sbrs	r16, 4
    114e:	09 c0       	rjmp	.+18     	; 0x1162 <vfprintf+0x53a>
    1150:	04 60       	ori	r16, 0x04	; 4
    1152:	07 c0       	rjmp	.+14     	; 0x1162 <vfprintf+0x53a>
    1154:	94 fe       	sbrs	r9, 4
    1156:	08 c0       	rjmp	.+16     	; 0x1168 <vfprintf+0x540>
    1158:	06 60       	ori	r16, 0x06	; 6
    115a:	06 c0       	rjmp	.+12     	; 0x1168 <vfprintf+0x540>
    115c:	28 e0       	ldi	r18, 0x08	; 8
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	05 c0       	rjmp	.+10     	; 0x116c <vfprintf+0x544>
    1162:	20 e1       	ldi	r18, 0x10	; 16
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	02 c0       	rjmp	.+4      	; 0x116c <vfprintf+0x544>
    1168:	20 e1       	ldi	r18, 0x10	; 16
    116a:	32 e0       	ldi	r19, 0x02	; 2
    116c:	56 01       	movw	r10, r12
    116e:	07 ff       	sbrs	r16, 7
    1170:	09 c0       	rjmp	.+18     	; 0x1184 <vfprintf+0x55c>
    1172:	84 e0       	ldi	r24, 0x04	; 4
    1174:	a8 0e       	add	r10, r24
    1176:	b1 1c       	adc	r11, r1
    1178:	f6 01       	movw	r30, r12
    117a:	60 81       	ld	r22, Z
    117c:	71 81       	ldd	r23, Z+1	; 0x01
    117e:	82 81       	ldd	r24, Z+2	; 0x02
    1180:	93 81       	ldd	r25, Z+3	; 0x03
    1182:	08 c0       	rjmp	.+16     	; 0x1194 <vfprintf+0x56c>
    1184:	f2 e0       	ldi	r31, 0x02	; 2
    1186:	af 0e       	add	r10, r31
    1188:	b1 1c       	adc	r11, r1
    118a:	f6 01       	movw	r30, r12
    118c:	60 81       	ld	r22, Z
    118e:	71 81       	ldd	r23, Z+1	; 0x01
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	a3 01       	movw	r20, r6
    1196:	0e 94 0e 0b 	call	0x161c	; 0x161c <__ultoa_invert>
    119a:	c8 2e       	mov	r12, r24
    119c:	c6 18       	sub	r12, r6
    119e:	0f 77       	andi	r16, 0x7F	; 127
    11a0:	90 2e       	mov	r9, r16
    11a2:	96 fe       	sbrs	r9, 6
    11a4:	0b c0       	rjmp	.+22     	; 0x11bc <vfprintf+0x594>
    11a6:	09 2d       	mov	r16, r9
    11a8:	0e 7f       	andi	r16, 0xFE	; 254
    11aa:	c1 16       	cp	r12, r17
    11ac:	50 f4       	brcc	.+20     	; 0x11c2 <vfprintf+0x59a>
    11ae:	94 fe       	sbrs	r9, 4
    11b0:	0a c0       	rjmp	.+20     	; 0x11c6 <vfprintf+0x59e>
    11b2:	92 fc       	sbrc	r9, 2
    11b4:	08 c0       	rjmp	.+16     	; 0x11c6 <vfprintf+0x59e>
    11b6:	09 2d       	mov	r16, r9
    11b8:	0e 7e       	andi	r16, 0xEE	; 238
    11ba:	05 c0       	rjmp	.+10     	; 0x11c6 <vfprintf+0x59e>
    11bc:	dc 2c       	mov	r13, r12
    11be:	09 2d       	mov	r16, r9
    11c0:	03 c0       	rjmp	.+6      	; 0x11c8 <vfprintf+0x5a0>
    11c2:	dc 2c       	mov	r13, r12
    11c4:	01 c0       	rjmp	.+2      	; 0x11c8 <vfprintf+0x5a0>
    11c6:	d1 2e       	mov	r13, r17
    11c8:	04 ff       	sbrs	r16, 4
    11ca:	0d c0       	rjmp	.+26     	; 0x11e6 <vfprintf+0x5be>
    11cc:	fe 01       	movw	r30, r28
    11ce:	ec 0d       	add	r30, r12
    11d0:	f1 1d       	adc	r31, r1
    11d2:	80 81       	ld	r24, Z
    11d4:	80 33       	cpi	r24, 0x30	; 48
    11d6:	11 f4       	brne	.+4      	; 0x11dc <vfprintf+0x5b4>
    11d8:	09 7e       	andi	r16, 0xE9	; 233
    11da:	09 c0       	rjmp	.+18     	; 0x11ee <vfprintf+0x5c6>
    11dc:	02 ff       	sbrs	r16, 2
    11de:	06 c0       	rjmp	.+12     	; 0x11ec <vfprintf+0x5c4>
    11e0:	d3 94       	inc	r13
    11e2:	d3 94       	inc	r13
    11e4:	04 c0       	rjmp	.+8      	; 0x11ee <vfprintf+0x5c6>
    11e6:	80 2f       	mov	r24, r16
    11e8:	86 78       	andi	r24, 0x86	; 134
    11ea:	09 f0       	breq	.+2      	; 0x11ee <vfprintf+0x5c6>
    11ec:	d3 94       	inc	r13
    11ee:	03 fd       	sbrc	r16, 3
    11f0:	11 c0       	rjmp	.+34     	; 0x1214 <vfprintf+0x5ec>
    11f2:	00 ff       	sbrs	r16, 0
    11f4:	06 c0       	rjmp	.+12     	; 0x1202 <vfprintf+0x5da>
    11f6:	1c 2d       	mov	r17, r12
    11f8:	d5 14       	cp	r13, r5
    11fa:	80 f4       	brcc	.+32     	; 0x121c <vfprintf+0x5f4>
    11fc:	15 0d       	add	r17, r5
    11fe:	1d 19       	sub	r17, r13
    1200:	0d c0       	rjmp	.+26     	; 0x121c <vfprintf+0x5f4>
    1202:	d5 14       	cp	r13, r5
    1204:	58 f4       	brcc	.+22     	; 0x121c <vfprintf+0x5f4>
    1206:	b7 01       	movw	r22, r14
    1208:	80 e2       	ldi	r24, 0x20	; 32
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
    1210:	d3 94       	inc	r13
    1212:	f7 cf       	rjmp	.-18     	; 0x1202 <vfprintf+0x5da>
    1214:	d5 14       	cp	r13, r5
    1216:	10 f4       	brcc	.+4      	; 0x121c <vfprintf+0x5f4>
    1218:	5d 18       	sub	r5, r13
    121a:	01 c0       	rjmp	.+2      	; 0x121e <vfprintf+0x5f6>
    121c:	51 2c       	mov	r5, r1
    121e:	04 ff       	sbrs	r16, 4
    1220:	10 c0       	rjmp	.+32     	; 0x1242 <vfprintf+0x61a>
    1222:	b7 01       	movw	r22, r14
    1224:	80 e3       	ldi	r24, 0x30	; 48
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
    122c:	02 ff       	sbrs	r16, 2
    122e:	17 c0       	rjmp	.+46     	; 0x125e <vfprintf+0x636>
    1230:	01 fd       	sbrc	r16, 1
    1232:	03 c0       	rjmp	.+6      	; 0x123a <vfprintf+0x612>
    1234:	88 e7       	ldi	r24, 0x78	; 120
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 c0       	rjmp	.+4      	; 0x123e <vfprintf+0x616>
    123a:	88 e5       	ldi	r24, 0x58	; 88
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	b7 01       	movw	r22, r14
    1240:	0c c0       	rjmp	.+24     	; 0x125a <vfprintf+0x632>
    1242:	80 2f       	mov	r24, r16
    1244:	86 78       	andi	r24, 0x86	; 134
    1246:	59 f0       	breq	.+22     	; 0x125e <vfprintf+0x636>
    1248:	01 ff       	sbrs	r16, 1
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <vfprintf+0x628>
    124c:	8b e2       	ldi	r24, 0x2B	; 43
    124e:	01 c0       	rjmp	.+2      	; 0x1252 <vfprintf+0x62a>
    1250:	80 e2       	ldi	r24, 0x20	; 32
    1252:	07 fd       	sbrc	r16, 7
    1254:	8d e2       	ldi	r24, 0x2D	; 45
    1256:	b7 01       	movw	r22, r14
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
    125e:	c1 16       	cp	r12, r17
    1260:	38 f4       	brcc	.+14     	; 0x1270 <vfprintf+0x648>
    1262:	b7 01       	movw	r22, r14
    1264:	80 e3       	ldi	r24, 0x30	; 48
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
    126c:	11 50       	subi	r17, 0x01	; 1
    126e:	f7 cf       	rjmp	.-18     	; 0x125e <vfprintf+0x636>
    1270:	ca 94       	dec	r12
    1272:	f3 01       	movw	r30, r6
    1274:	ec 0d       	add	r30, r12
    1276:	f1 1d       	adc	r31, r1
    1278:	80 81       	ld	r24, Z
    127a:	b7 01       	movw	r22, r14
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
    1282:	c1 10       	cpse	r12, r1
    1284:	f5 cf       	rjmp	.-22     	; 0x1270 <vfprintf+0x648>
    1286:	15 c0       	rjmp	.+42     	; 0x12b2 <vfprintf+0x68a>
    1288:	f4 e0       	ldi	r31, 0x04	; 4
    128a:	f5 15       	cp	r31, r5
    128c:	60 f5       	brcc	.+88     	; 0x12e6 <vfprintf+0x6be>
    128e:	84 e0       	ldi	r24, 0x04	; 4
    1290:	58 1a       	sub	r5, r24
    1292:	93 fe       	sbrs	r9, 3
    1294:	1f c0       	rjmp	.+62     	; 0x12d4 <vfprintf+0x6ac>
    1296:	01 11       	cpse	r16, r1
    1298:	27 c0       	rjmp	.+78     	; 0x12e8 <vfprintf+0x6c0>
    129a:	2c 85       	ldd	r18, Y+12	; 0x0c
    129c:	23 ff       	sbrs	r18, 3
    129e:	2a c0       	rjmp	.+84     	; 0x12f4 <vfprintf+0x6cc>
    12a0:	04 e5       	ldi	r16, 0x54	; 84
    12a2:	10 e0       	ldi	r17, 0x00	; 0
    12a4:	39 2d       	mov	r19, r9
    12a6:	30 71       	andi	r19, 0x10	; 16
    12a8:	93 2e       	mov	r9, r19
    12aa:	f8 01       	movw	r30, r16
    12ac:	84 91       	lpm	r24, Z
    12ae:	81 11       	cpse	r24, r1
    12b0:	24 c0       	rjmp	.+72     	; 0x12fa <vfprintf+0x6d2>
    12b2:	55 20       	and	r5, r5
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <vfprintf+0x690>
    12b6:	e4 cc       	rjmp	.-1592   	; 0xc80 <vfprintf+0x58>
    12b8:	b7 01       	movw	r22, r14
    12ba:	80 e2       	ldi	r24, 0x20	; 32
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
    12c2:	5a 94       	dec	r5
    12c4:	f6 cf       	rjmp	.-20     	; 0x12b2 <vfprintf+0x68a>
    12c6:	f7 01       	movw	r30, r14
    12c8:	86 81       	ldd	r24, Z+6	; 0x06
    12ca:	97 81       	ldd	r25, Z+7	; 0x07
    12cc:	26 c0       	rjmp	.+76     	; 0x131a <vfprintf+0x6f2>
    12ce:	8f ef       	ldi	r24, 0xFF	; 255
    12d0:	9f ef       	ldi	r25, 0xFF	; 255
    12d2:	23 c0       	rjmp	.+70     	; 0x131a <vfprintf+0x6f2>
    12d4:	b7 01       	movw	r22, r14
    12d6:	80 e2       	ldi	r24, 0x20	; 32
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
    12de:	5a 94       	dec	r5
    12e0:	51 10       	cpse	r5, r1
    12e2:	f8 cf       	rjmp	.-16     	; 0x12d4 <vfprintf+0x6ac>
    12e4:	d8 cf       	rjmp	.-80     	; 0x1296 <vfprintf+0x66e>
    12e6:	51 2c       	mov	r5, r1
    12e8:	b7 01       	movw	r22, r14
    12ea:	80 2f       	mov	r24, r16
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
    12f2:	d3 cf       	rjmp	.-90     	; 0x129a <vfprintf+0x672>
    12f4:	08 e5       	ldi	r16, 0x58	; 88
    12f6:	10 e0       	ldi	r17, 0x00	; 0
    12f8:	d5 cf       	rjmp	.-86     	; 0x12a4 <vfprintf+0x67c>
    12fa:	91 10       	cpse	r9, r1
    12fc:	80 52       	subi	r24, 0x20	; 32
    12fe:	b7 01       	movw	r22, r14
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	0e 94 b6 0a 	call	0x156c	; 0x156c <fputc>
    1306:	0f 5f       	subi	r16, 0xFF	; 255
    1308:	1f 4f       	sbci	r17, 0xFF	; 255
    130a:	cf cf       	rjmp	.-98     	; 0x12aa <vfprintf+0x682>
    130c:	23 e0       	ldi	r18, 0x03	; 3
    130e:	25 15       	cp	r18, r5
    1310:	10 f4       	brcc	.+4      	; 0x1316 <vfprintf+0x6ee>
    1312:	83 e0       	ldi	r24, 0x03	; 3
    1314:	bd cf       	rjmp	.-134    	; 0x1290 <vfprintf+0x668>
    1316:	51 2c       	mov	r5, r1
    1318:	c0 cf       	rjmp	.-128    	; 0x129a <vfprintf+0x672>
    131a:	60 96       	adiw	r28, 0x10	; 16
    131c:	e2 e1       	ldi	r30, 0x12	; 18
    131e:	0c 94 ad 09 	jmp	0x135a	; 0x135a <__epilogue_restores__>

00001322 <__prologue_saves__>:
    1322:	2f 92       	push	r2
    1324:	3f 92       	push	r3
    1326:	4f 92       	push	r4
    1328:	5f 92       	push	r5
    132a:	6f 92       	push	r6
    132c:	7f 92       	push	r7
    132e:	8f 92       	push	r8
    1330:	9f 92       	push	r9
    1332:	af 92       	push	r10
    1334:	bf 92       	push	r11
    1336:	cf 92       	push	r12
    1338:	df 92       	push	r13
    133a:	ef 92       	push	r14
    133c:	ff 92       	push	r15
    133e:	0f 93       	push	r16
    1340:	1f 93       	push	r17
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	ca 1b       	sub	r28, r26
    134c:	db 0b       	sbc	r29, r27
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	09 94       	ijmp

0000135a <__epilogue_restores__>:
    135a:	2a 88       	ldd	r2, Y+18	; 0x12
    135c:	39 88       	ldd	r3, Y+17	; 0x11
    135e:	48 88       	ldd	r4, Y+16	; 0x10
    1360:	5f 84       	ldd	r5, Y+15	; 0x0f
    1362:	6e 84       	ldd	r6, Y+14	; 0x0e
    1364:	7d 84       	ldd	r7, Y+13	; 0x0d
    1366:	8c 84       	ldd	r8, Y+12	; 0x0c
    1368:	9b 84       	ldd	r9, Y+11	; 0x0b
    136a:	aa 84       	ldd	r10, Y+10	; 0x0a
    136c:	b9 84       	ldd	r11, Y+9	; 0x09
    136e:	c8 84       	ldd	r12, Y+8	; 0x08
    1370:	df 80       	ldd	r13, Y+7	; 0x07
    1372:	ee 80       	ldd	r14, Y+6	; 0x06
    1374:	fd 80       	ldd	r15, Y+5	; 0x05
    1376:	0c 81       	ldd	r16, Y+4	; 0x04
    1378:	1b 81       	ldd	r17, Y+3	; 0x03
    137a:	aa 81       	ldd	r26, Y+2	; 0x02
    137c:	b9 81       	ldd	r27, Y+1	; 0x01
    137e:	ce 0f       	add	r28, r30
    1380:	d1 1d       	adc	r29, r1
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	ed 01       	movw	r28, r26
    138e:	08 95       	ret

00001390 <__ftoa_engine>:
    1390:	28 30       	cpi	r18, 0x08	; 8
    1392:	08 f0       	brcs	.+2      	; 0x1396 <__ftoa_engine+0x6>
    1394:	27 e0       	ldi	r18, 0x07	; 7
    1396:	33 27       	eor	r19, r19
    1398:	da 01       	movw	r26, r20
    139a:	99 0f       	add	r25, r25
    139c:	31 1d       	adc	r19, r1
    139e:	87 fd       	sbrc	r24, 7
    13a0:	91 60       	ori	r25, 0x01	; 1
    13a2:	00 96       	adiw	r24, 0x00	; 0
    13a4:	61 05       	cpc	r22, r1
    13a6:	71 05       	cpc	r23, r1
    13a8:	39 f4       	brne	.+14     	; 0x13b8 <__ftoa_engine+0x28>
    13aa:	32 60       	ori	r19, 0x02	; 2
    13ac:	2e 5f       	subi	r18, 0xFE	; 254
    13ae:	3d 93       	st	X+, r19
    13b0:	30 e3       	ldi	r19, 0x30	; 48
    13b2:	2a 95       	dec	r18
    13b4:	e1 f7       	brne	.-8      	; 0x13ae <__ftoa_engine+0x1e>
    13b6:	08 95       	ret
    13b8:	9f 3f       	cpi	r25, 0xFF	; 255
    13ba:	30 f0       	brcs	.+12     	; 0x13c8 <__ftoa_engine+0x38>
    13bc:	80 38       	cpi	r24, 0x80	; 128
    13be:	71 05       	cpc	r23, r1
    13c0:	61 05       	cpc	r22, r1
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <__ftoa_engine+0x36>
    13c4:	3c 5f       	subi	r19, 0xFC	; 252
    13c6:	3c 5f       	subi	r19, 0xFC	; 252
    13c8:	3d 93       	st	X+, r19
    13ca:	91 30       	cpi	r25, 0x01	; 1
    13cc:	08 f0       	brcs	.+2      	; 0x13d0 <__ftoa_engine+0x40>
    13ce:	80 68       	ori	r24, 0x80	; 128
    13d0:	91 1d       	adc	r25, r1
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	1f 93       	push	r17
    13d8:	0f 93       	push	r16
    13da:	ff 92       	push	r15
    13dc:	ef 92       	push	r14
    13de:	19 2f       	mov	r17, r25
    13e0:	98 7f       	andi	r25, 0xF8	; 248
    13e2:	96 95       	lsr	r25
    13e4:	e9 2f       	mov	r30, r25
    13e6:	96 95       	lsr	r25
    13e8:	96 95       	lsr	r25
    13ea:	e9 0f       	add	r30, r25
    13ec:	ff 27       	eor	r31, r31
    13ee:	ea 54       	subi	r30, 0x4A	; 74
    13f0:	ff 4f       	sbci	r31, 0xFF	; 255
    13f2:	99 27       	eor	r25, r25
    13f4:	33 27       	eor	r19, r19
    13f6:	ee 24       	eor	r14, r14
    13f8:	ff 24       	eor	r15, r15
    13fa:	a7 01       	movw	r20, r14
    13fc:	e7 01       	movw	r28, r14
    13fe:	05 90       	lpm	r0, Z+
    1400:	08 94       	sec
    1402:	07 94       	ror	r0
    1404:	28 f4       	brcc	.+10     	; 0x1410 <__ftoa_engine+0x80>
    1406:	36 0f       	add	r19, r22
    1408:	e7 1e       	adc	r14, r23
    140a:	f8 1e       	adc	r15, r24
    140c:	49 1f       	adc	r20, r25
    140e:	51 1d       	adc	r21, r1
    1410:	66 0f       	add	r22, r22
    1412:	77 1f       	adc	r23, r23
    1414:	88 1f       	adc	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	06 94       	lsr	r0
    141a:	a1 f7       	brne	.-24     	; 0x1404 <__ftoa_engine+0x74>
    141c:	05 90       	lpm	r0, Z+
    141e:	07 94       	ror	r0
    1420:	28 f4       	brcc	.+10     	; 0x142c <__ftoa_engine+0x9c>
    1422:	e7 0e       	add	r14, r23
    1424:	f8 1e       	adc	r15, r24
    1426:	49 1f       	adc	r20, r25
    1428:	56 1f       	adc	r21, r22
    142a:	c1 1d       	adc	r28, r1
    142c:	77 0f       	add	r23, r23
    142e:	88 1f       	adc	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	66 1f       	adc	r22, r22
    1434:	06 94       	lsr	r0
    1436:	a1 f7       	brne	.-24     	; 0x1420 <__ftoa_engine+0x90>
    1438:	05 90       	lpm	r0, Z+
    143a:	07 94       	ror	r0
    143c:	28 f4       	brcc	.+10     	; 0x1448 <__ftoa_engine+0xb8>
    143e:	f8 0e       	add	r15, r24
    1440:	49 1f       	adc	r20, r25
    1442:	56 1f       	adc	r21, r22
    1444:	c7 1f       	adc	r28, r23
    1446:	d1 1d       	adc	r29, r1
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	66 1f       	adc	r22, r22
    144e:	77 1f       	adc	r23, r23
    1450:	06 94       	lsr	r0
    1452:	a1 f7       	brne	.-24     	; 0x143c <__ftoa_engine+0xac>
    1454:	05 90       	lpm	r0, Z+
    1456:	07 94       	ror	r0
    1458:	20 f4       	brcc	.+8      	; 0x1462 <__ftoa_engine+0xd2>
    145a:	49 0f       	add	r20, r25
    145c:	56 1f       	adc	r21, r22
    145e:	c7 1f       	adc	r28, r23
    1460:	d8 1f       	adc	r29, r24
    1462:	99 0f       	add	r25, r25
    1464:	66 1f       	adc	r22, r22
    1466:	77 1f       	adc	r23, r23
    1468:	88 1f       	adc	r24, r24
    146a:	06 94       	lsr	r0
    146c:	a9 f7       	brne	.-22     	; 0x1458 <__ftoa_engine+0xc8>
    146e:	84 91       	lpm	r24, Z
    1470:	10 95       	com	r17
    1472:	17 70       	andi	r17, 0x07	; 7
    1474:	41 f0       	breq	.+16     	; 0x1486 <__ftoa_engine+0xf6>
    1476:	d6 95       	lsr	r29
    1478:	c7 95       	ror	r28
    147a:	57 95       	ror	r21
    147c:	47 95       	ror	r20
    147e:	f7 94       	ror	r15
    1480:	e7 94       	ror	r14
    1482:	1a 95       	dec	r17
    1484:	c1 f7       	brne	.-16     	; 0x1476 <__ftoa_engine+0xe6>
    1486:	ec e5       	ldi	r30, 0x5C	; 92
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	68 94       	set
    148c:	15 90       	lpm	r1, Z+
    148e:	15 91       	lpm	r17, Z+
    1490:	35 91       	lpm	r19, Z+
    1492:	65 91       	lpm	r22, Z+
    1494:	95 91       	lpm	r25, Z+
    1496:	05 90       	lpm	r0, Z+
    1498:	7f e2       	ldi	r23, 0x2F	; 47
    149a:	73 95       	inc	r23
    149c:	e1 18       	sub	r14, r1
    149e:	f1 0a       	sbc	r15, r17
    14a0:	43 0b       	sbc	r20, r19
    14a2:	56 0b       	sbc	r21, r22
    14a4:	c9 0b       	sbc	r28, r25
    14a6:	d0 09       	sbc	r29, r0
    14a8:	c0 f7       	brcc	.-16     	; 0x149a <__ftoa_engine+0x10a>
    14aa:	e1 0c       	add	r14, r1
    14ac:	f1 1e       	adc	r15, r17
    14ae:	43 1f       	adc	r20, r19
    14b0:	56 1f       	adc	r21, r22
    14b2:	c9 1f       	adc	r28, r25
    14b4:	d0 1d       	adc	r29, r0
    14b6:	7e f4       	brtc	.+30     	; 0x14d6 <__ftoa_engine+0x146>
    14b8:	70 33       	cpi	r23, 0x30	; 48
    14ba:	11 f4       	brne	.+4      	; 0x14c0 <__ftoa_engine+0x130>
    14bc:	8a 95       	dec	r24
    14be:	e6 cf       	rjmp	.-52     	; 0x148c <__ftoa_engine+0xfc>
    14c0:	e8 94       	clt
    14c2:	01 50       	subi	r16, 0x01	; 1
    14c4:	30 f0       	brcs	.+12     	; 0x14d2 <__ftoa_engine+0x142>
    14c6:	08 0f       	add	r16, r24
    14c8:	0a f4       	brpl	.+2      	; 0x14cc <__ftoa_engine+0x13c>
    14ca:	00 27       	eor	r16, r16
    14cc:	02 17       	cp	r16, r18
    14ce:	08 f4       	brcc	.+2      	; 0x14d2 <__ftoa_engine+0x142>
    14d0:	20 2f       	mov	r18, r16
    14d2:	23 95       	inc	r18
    14d4:	02 2f       	mov	r16, r18
    14d6:	7a 33       	cpi	r23, 0x3A	; 58
    14d8:	28 f0       	brcs	.+10     	; 0x14e4 <__ftoa_engine+0x154>
    14da:	79 e3       	ldi	r23, 0x39	; 57
    14dc:	7d 93       	st	X+, r23
    14de:	2a 95       	dec	r18
    14e0:	e9 f7       	brne	.-6      	; 0x14dc <__ftoa_engine+0x14c>
    14e2:	10 c0       	rjmp	.+32     	; 0x1504 <__ftoa_engine+0x174>
    14e4:	7d 93       	st	X+, r23
    14e6:	2a 95       	dec	r18
    14e8:	89 f6       	brne	.-94     	; 0x148c <__ftoa_engine+0xfc>
    14ea:	06 94       	lsr	r0
    14ec:	97 95       	ror	r25
    14ee:	67 95       	ror	r22
    14f0:	37 95       	ror	r19
    14f2:	17 95       	ror	r17
    14f4:	17 94       	ror	r1
    14f6:	e1 18       	sub	r14, r1
    14f8:	f1 0a       	sbc	r15, r17
    14fa:	43 0b       	sbc	r20, r19
    14fc:	56 0b       	sbc	r21, r22
    14fe:	c9 0b       	sbc	r28, r25
    1500:	d0 09       	sbc	r29, r0
    1502:	98 f0       	brcs	.+38     	; 0x152a <__ftoa_engine+0x19a>
    1504:	23 95       	inc	r18
    1506:	7e 91       	ld	r23, -X
    1508:	73 95       	inc	r23
    150a:	7a 33       	cpi	r23, 0x3A	; 58
    150c:	08 f0       	brcs	.+2      	; 0x1510 <__ftoa_engine+0x180>
    150e:	70 e3       	ldi	r23, 0x30	; 48
    1510:	7c 93       	st	X, r23
    1512:	20 13       	cpse	r18, r16
    1514:	b8 f7       	brcc	.-18     	; 0x1504 <__ftoa_engine+0x174>
    1516:	7e 91       	ld	r23, -X
    1518:	70 61       	ori	r23, 0x10	; 16
    151a:	7d 93       	st	X+, r23
    151c:	30 f0       	brcs	.+12     	; 0x152a <__ftoa_engine+0x19a>
    151e:	83 95       	inc	r24
    1520:	71 e3       	ldi	r23, 0x31	; 49
    1522:	7d 93       	st	X+, r23
    1524:	70 e3       	ldi	r23, 0x30	; 48
    1526:	2a 95       	dec	r18
    1528:	e1 f7       	brne	.-8      	; 0x1522 <__ftoa_engine+0x192>
    152a:	11 24       	eor	r1, r1
    152c:	ef 90       	pop	r14
    152e:	ff 90       	pop	r15
    1530:	0f 91       	pop	r16
    1532:	1f 91       	pop	r17
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	99 27       	eor	r25, r25
    153a:	87 fd       	sbrc	r24, 7
    153c:	90 95       	com	r25
    153e:	08 95       	ret

00001540 <strnlen_P>:
    1540:	fc 01       	movw	r30, r24
    1542:	05 90       	lpm	r0, Z+
    1544:	61 50       	subi	r22, 0x01	; 1
    1546:	70 40       	sbci	r23, 0x00	; 0
    1548:	01 10       	cpse	r0, r1
    154a:	d8 f7       	brcc	.-10     	; 0x1542 <strnlen_P+0x2>
    154c:	80 95       	com	r24
    154e:	90 95       	com	r25
    1550:	8e 0f       	add	r24, r30
    1552:	9f 1f       	adc	r25, r31
    1554:	08 95       	ret

00001556 <strnlen>:
    1556:	fc 01       	movw	r30, r24
    1558:	61 50       	subi	r22, 0x01	; 1
    155a:	70 40       	sbci	r23, 0x00	; 0
    155c:	01 90       	ld	r0, Z+
    155e:	01 10       	cpse	r0, r1
    1560:	d8 f7       	brcc	.-10     	; 0x1558 <strnlen+0x2>
    1562:	80 95       	com	r24
    1564:	90 95       	com	r25
    1566:	8e 0f       	add	r24, r30
    1568:	9f 1f       	adc	r25, r31
    156a:	08 95       	ret

0000156c <fputc>:
    156c:	0f 93       	push	r16
    156e:	1f 93       	push	r17
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	fb 01       	movw	r30, r22
    1576:	23 81       	ldd	r18, Z+3	; 0x03
    1578:	21 fd       	sbrc	r18, 1
    157a:	03 c0       	rjmp	.+6      	; 0x1582 <fputc+0x16>
    157c:	8f ef       	ldi	r24, 0xFF	; 255
    157e:	9f ef       	ldi	r25, 0xFF	; 255
    1580:	2c c0       	rjmp	.+88     	; 0x15da <fputc+0x6e>
    1582:	22 ff       	sbrs	r18, 2
    1584:	16 c0       	rjmp	.+44     	; 0x15b2 <fputc+0x46>
    1586:	46 81       	ldd	r20, Z+6	; 0x06
    1588:	57 81       	ldd	r21, Z+7	; 0x07
    158a:	24 81       	ldd	r18, Z+4	; 0x04
    158c:	35 81       	ldd	r19, Z+5	; 0x05
    158e:	42 17       	cp	r20, r18
    1590:	53 07       	cpc	r21, r19
    1592:	44 f4       	brge	.+16     	; 0x15a4 <fputc+0x38>
    1594:	a0 81       	ld	r26, Z
    1596:	b1 81       	ldd	r27, Z+1	; 0x01
    1598:	9d 01       	movw	r18, r26
    159a:	2f 5f       	subi	r18, 0xFF	; 255
    159c:	3f 4f       	sbci	r19, 0xFF	; 255
    159e:	31 83       	std	Z+1, r19	; 0x01
    15a0:	20 83       	st	Z, r18
    15a2:	8c 93       	st	X, r24
    15a4:	26 81       	ldd	r18, Z+6	; 0x06
    15a6:	37 81       	ldd	r19, Z+7	; 0x07
    15a8:	2f 5f       	subi	r18, 0xFF	; 255
    15aa:	3f 4f       	sbci	r19, 0xFF	; 255
    15ac:	37 83       	std	Z+7, r19	; 0x07
    15ae:	26 83       	std	Z+6, r18	; 0x06
    15b0:	14 c0       	rjmp	.+40     	; 0x15da <fputc+0x6e>
    15b2:	8b 01       	movw	r16, r22
    15b4:	ec 01       	movw	r28, r24
    15b6:	fb 01       	movw	r30, r22
    15b8:	00 84       	ldd	r0, Z+8	; 0x08
    15ba:	f1 85       	ldd	r31, Z+9	; 0x09
    15bc:	e0 2d       	mov	r30, r0
    15be:	09 95       	icall
    15c0:	89 2b       	or	r24, r25
    15c2:	e1 f6       	brne	.-72     	; 0x157c <fputc+0x10>
    15c4:	d8 01       	movw	r26, r16
    15c6:	16 96       	adiw	r26, 0x06	; 6
    15c8:	8d 91       	ld	r24, X+
    15ca:	9c 91       	ld	r25, X
    15cc:	17 97       	sbiw	r26, 0x07	; 7
    15ce:	01 96       	adiw	r24, 0x01	; 1
    15d0:	17 96       	adiw	r26, 0x07	; 7
    15d2:	9c 93       	st	X, r25
    15d4:	8e 93       	st	-X, r24
    15d6:	16 97       	sbiw	r26, 0x06	; 6
    15d8:	ce 01       	movw	r24, r28
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	08 95       	ret

000015e4 <vsprintf>:
    15e4:	ae e0       	ldi	r26, 0x0E	; 14
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e8 ef       	ldi	r30, 0xF8	; 248
    15ea:	fa e0       	ldi	r31, 0x0A	; 10
    15ec:	0c 94 9f 09 	jmp	0x133e	; 0x133e <__prologue_saves__+0x1c>
    15f0:	8c 01       	movw	r16, r24
    15f2:	86 e0       	ldi	r24, 0x06	; 6
    15f4:	8c 83       	std	Y+4, r24	; 0x04
    15f6:	1a 83       	std	Y+2, r17	; 0x02
    15f8:	09 83       	std	Y+1, r16	; 0x01
    15fa:	8f ef       	ldi	r24, 0xFF	; 255
    15fc:	9f e7       	ldi	r25, 0x7F	; 127
    15fe:	9e 83       	std	Y+6, r25	; 0x06
    1600:	8d 83       	std	Y+5, r24	; 0x05
    1602:	ce 01       	movw	r24, r28
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	0e 94 14 06 	call	0xc28	; 0xc28 <vfprintf>
    160a:	ef 81       	ldd	r30, Y+7	; 0x07
    160c:	f8 85       	ldd	r31, Y+8	; 0x08
    160e:	e0 0f       	add	r30, r16
    1610:	f1 1f       	adc	r31, r17
    1612:	10 82       	st	Z, r1
    1614:	2e 96       	adiw	r28, 0x0e	; 14
    1616:	e4 e0       	ldi	r30, 0x04	; 4
    1618:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__epilogue_restores__+0x1c>

0000161c <__ultoa_invert>:
    161c:	fa 01       	movw	r30, r20
    161e:	aa 27       	eor	r26, r26
    1620:	28 30       	cpi	r18, 0x08	; 8
    1622:	51 f1       	breq	.+84     	; 0x1678 <__ultoa_invert+0x5c>
    1624:	20 31       	cpi	r18, 0x10	; 16
    1626:	81 f1       	breq	.+96     	; 0x1688 <__ultoa_invert+0x6c>
    1628:	e8 94       	clt
    162a:	6f 93       	push	r22
    162c:	6e 7f       	andi	r22, 0xFE	; 254
    162e:	6e 5f       	subi	r22, 0xFE	; 254
    1630:	7f 4f       	sbci	r23, 0xFF	; 255
    1632:	8f 4f       	sbci	r24, 0xFF	; 255
    1634:	9f 4f       	sbci	r25, 0xFF	; 255
    1636:	af 4f       	sbci	r26, 0xFF	; 255
    1638:	b1 e0       	ldi	r27, 0x01	; 1
    163a:	3e d0       	rcall	.+124    	; 0x16b8 <__ultoa_invert+0x9c>
    163c:	b4 e0       	ldi	r27, 0x04	; 4
    163e:	3c d0       	rcall	.+120    	; 0x16b8 <__ultoa_invert+0x9c>
    1640:	67 0f       	add	r22, r23
    1642:	78 1f       	adc	r23, r24
    1644:	89 1f       	adc	r24, r25
    1646:	9a 1f       	adc	r25, r26
    1648:	a1 1d       	adc	r26, r1
    164a:	68 0f       	add	r22, r24
    164c:	79 1f       	adc	r23, r25
    164e:	8a 1f       	adc	r24, r26
    1650:	91 1d       	adc	r25, r1
    1652:	a1 1d       	adc	r26, r1
    1654:	6a 0f       	add	r22, r26
    1656:	71 1d       	adc	r23, r1
    1658:	81 1d       	adc	r24, r1
    165a:	91 1d       	adc	r25, r1
    165c:	a1 1d       	adc	r26, r1
    165e:	20 d0       	rcall	.+64     	; 0x16a0 <__ultoa_invert+0x84>
    1660:	09 f4       	brne	.+2      	; 0x1664 <__ultoa_invert+0x48>
    1662:	68 94       	set
    1664:	3f 91       	pop	r19
    1666:	2a e0       	ldi	r18, 0x0A	; 10
    1668:	26 9f       	mul	r18, r22
    166a:	11 24       	eor	r1, r1
    166c:	30 19       	sub	r19, r0
    166e:	30 5d       	subi	r19, 0xD0	; 208
    1670:	31 93       	st	Z+, r19
    1672:	de f6       	brtc	.-74     	; 0x162a <__ultoa_invert+0xe>
    1674:	cf 01       	movw	r24, r30
    1676:	08 95       	ret
    1678:	46 2f       	mov	r20, r22
    167a:	47 70       	andi	r20, 0x07	; 7
    167c:	40 5d       	subi	r20, 0xD0	; 208
    167e:	41 93       	st	Z+, r20
    1680:	b3 e0       	ldi	r27, 0x03	; 3
    1682:	0f d0       	rcall	.+30     	; 0x16a2 <__ultoa_invert+0x86>
    1684:	c9 f7       	brne	.-14     	; 0x1678 <__ultoa_invert+0x5c>
    1686:	f6 cf       	rjmp	.-20     	; 0x1674 <__ultoa_invert+0x58>
    1688:	46 2f       	mov	r20, r22
    168a:	4f 70       	andi	r20, 0x0F	; 15
    168c:	40 5d       	subi	r20, 0xD0	; 208
    168e:	4a 33       	cpi	r20, 0x3A	; 58
    1690:	18 f0       	brcs	.+6      	; 0x1698 <__ultoa_invert+0x7c>
    1692:	49 5d       	subi	r20, 0xD9	; 217
    1694:	31 fd       	sbrc	r19, 1
    1696:	40 52       	subi	r20, 0x20	; 32
    1698:	41 93       	st	Z+, r20
    169a:	02 d0       	rcall	.+4      	; 0x16a0 <__ultoa_invert+0x84>
    169c:	a9 f7       	brne	.-22     	; 0x1688 <__ultoa_invert+0x6c>
    169e:	ea cf       	rjmp	.-44     	; 0x1674 <__ultoa_invert+0x58>
    16a0:	b4 e0       	ldi	r27, 0x04	; 4
    16a2:	a6 95       	lsr	r26
    16a4:	97 95       	ror	r25
    16a6:	87 95       	ror	r24
    16a8:	77 95       	ror	r23
    16aa:	67 95       	ror	r22
    16ac:	ba 95       	dec	r27
    16ae:	c9 f7       	brne	.-14     	; 0x16a2 <__ultoa_invert+0x86>
    16b0:	00 97       	sbiw	r24, 0x00	; 0
    16b2:	61 05       	cpc	r22, r1
    16b4:	71 05       	cpc	r23, r1
    16b6:	08 95       	ret
    16b8:	9b 01       	movw	r18, r22
    16ba:	ac 01       	movw	r20, r24
    16bc:	0a 2e       	mov	r0, r26
    16be:	06 94       	lsr	r0
    16c0:	57 95       	ror	r21
    16c2:	47 95       	ror	r20
    16c4:	37 95       	ror	r19
    16c6:	27 95       	ror	r18
    16c8:	ba 95       	dec	r27
    16ca:	c9 f7       	brne	.-14     	; 0x16be <__ultoa_invert+0xa2>
    16cc:	62 0f       	add	r22, r18
    16ce:	73 1f       	adc	r23, r19
    16d0:	84 1f       	adc	r24, r20
    16d2:	95 1f       	adc	r25, r21
    16d4:	a0 1d       	adc	r26, r0
    16d6:	08 95       	ret

000016d8 <_exit>:
    16d8:	f8 94       	cli

000016da <__stop_program>:
    16da:	ff cf       	rjmp	.-2      	; 0x16da <__stop_program>
