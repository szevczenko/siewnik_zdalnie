
avr_siewnik_zdalnie.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00800060  000016c8  0000175c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000304  008000ce  008000ce  000017ca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001828  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002573  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000120c  00000000  00000000  0000407f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000157e  00000000  00000000  0000528b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e8  00000000  00000000  0000680c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d6c  00000000  00000000  00006df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012b9  00000000  00000000  00007b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  00008e19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      1c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      28:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__vector_10>
      2c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 56 05 	jmp	0xaac	; 0xaac <__vector_13>
      38:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__vector_14>
      3c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	6e 61       	ori	r22, 0x1E	; 30
      56:	6e 00       	.word	0x006e	; ????

00000058 <__c.2332>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf e5       	ldi	r28, 0x5F	; 95
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	10 e0       	ldi	r17, 0x00	; 0
     164:	a0 e6       	ldi	r26, 0x60	; 96
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	e8 ec       	ldi	r30, 0xC8	; 200
     16a:	f6 e1       	ldi	r31, 0x16	; 22
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x10>
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	ae 3c       	cpi	r26, 0xCE	; 206
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0xc>

00000178 <__do_clear_bss>:
     178:	23 e0       	ldi	r18, 0x03	; 3
     17a:	ae ec       	ldi	r26, 0xCE	; 206
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a2 3d       	cpi	r26, 0xD2	; 210
     184:	b2 07       	cpc	r27, r18
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 09 01 	call	0x212	; 0x212 <main>
     18c:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <_exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <debug_msg>:

#if L_DEBUG
#include <stdio.h>
char debug_buff[64];
void debug_msg( const char* format, ... )
{
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62
     19c:	ae 01       	movw	r20, r28
     19e:	4b 5f       	subi	r20, 0xFB	; 251
     1a0:	5f 4f       	sbci	r21, 0xFF	; 255
     1a2:	fa 01       	movw	r30, r20
     1a4:	61 91       	ld	r22, Z+
     1a6:	71 91       	ld	r23, Z+
     1a8:	af 01       	movw	r20, r30
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
     1aa:	84 e7       	ldi	r24, 0x74	; 116
     1ac:	92 e0       	ldi	r25, 0x02	; 2
     1ae:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <vsprintf>
	va_end( arglist );
	for (int i = 0; i < strlen(debug_buff); i++) {
     1b2:	e4 e7       	ldi	r30, 0x74	; 116
     1b4:	f2 e0       	ldi	r31, 0x02	; 2
     1b6:	df 01       	movw	r26, r30
     1b8:	0d 90       	ld	r0, X+
     1ba:	00 20       	and	r0, r0
     1bc:	e9 f7       	brne	.-6      	; 0x1b8 <debug_msg+0x24>
     1be:	9d 01       	movw	r18, r26
     1c0:	21 50       	subi	r18, 0x01	; 1
     1c2:	31 09       	sbc	r19, r1
     1c4:	08 c0       	rjmp	.+16     	; 0x1d6 <debug_msg+0x42>
		if (debug_buff[i] == '\n') {
     1c6:	81 91       	ld	r24, Z+
     1c8:	8a 30       	cpi	r24, 0x0A	; 10
     1ca:	29 f4       	brne	.+10     	; 0x1d6 <debug_msg+0x42>
			uart_puts("\n\rAT: ");
     1cc:	80 e6       	ldi	r24, 0x60	; 96
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <uart0_puts>
			break;
     1d4:	03 c0       	rjmp	.+6      	; 0x1dc <debug_msg+0x48>
{
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
	va_end( arglist );
	for (int i = 0; i < strlen(debug_buff); i++) {
     1d6:	e2 17       	cp	r30, r18
     1d8:	f3 07       	cpc	r31, r19
     1da:	a9 f7       	brne	.-22     	; 0x1c6 <debug_msg+0x32>
			uart_puts("\n\rAT: ");
			break;
		}
	}
	#if USE_USART
	uart_puts(debug_buff);
     1dc:	84 e7       	ldi	r24, 0x74	; 116
     1de:	92 e0       	ldi	r25, 0x02	; 2
     1e0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <uart0_puts>
	#endif
}
     1e4:	df 91       	pop	r29
     1e6:	cf 91       	pop	r28
     1e8:	08 95       	ret

000001ea <init_pin>:
uint8_t servo_vibro_value;

void init_pin(void)
{
	//UART_TX_PIN
	DDRD |= (1<<1);
     1ea:	89 9a       	sbi	0x11, 1	; 17
     1ec:	08 95       	ret

000001ee <init_driver>:
}

void init_driver(void)
{
	#if USE_USART
	uart_init(UART_BAUD_SELECT(57600, F_CPU));
     1ee:	88 e0       	ldi	r24, 0x08	; 8
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 b0 05 	call	0xb60	; 0xb60 <uart0_init>
	#endif
	timer0_init(TIM0_PRESCALER, TIM0_ARR);
     1f6:	62 e3       	ldi	r22, 0x32	; 50
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	0e 94 a9 04 	call	0x952	; 0x952 <timer0_init>
	init_system();
     1fe:	0e 94 68 04 	call	0x8d0	; 0x8d0 <init_system>
	init_measure();
     202:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <init_measure>
	at_communication_init();
     206:	0e 94 0c 03 	call	0x618	; 0x618 <at_communication_init>
	CLEAR_PIN(SFIOR, PUD);
     20a:	80 b7       	in	r24, 0x30	; 48
     20c:	8b 7f       	andi	r24, 0xFB	; 251
     20e:	80 bf       	out	0x30, r24	; 48
     210:	08 95       	ret

00000212 <main>:
int main(void)
{
	#if CONFIG_DEVICE_SIEWNIK
	servo_init();
	#endif
	init_pin();
     212:	0e 94 f5 00 	call	0x1ea	; 0x1ea <init_pin>
	sei();
     216:	78 94       	sei
	init_driver();
     218:	0e 94 f7 00 	call	0x1ee	; 0x1ee <init_driver>
	debug_msg("/-----------START SYSTEM------------/\n");
     21c:	87 e6       	ldi	r24, 0x67	; 103
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	9f 93       	push	r25
     222:	8f 93       	push	r24
     224:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
	on_system();
     228:	0e 94 69 04 	call	0x8d2	; 0x8d2 <on_system>
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
    /* Replace with your application code */
    while (1) 
    {
		dcmotor_process(motor_value);
     230:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <motor_value>
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 54 03 	call	0x6a8	; 0x6a8 <dcmotor_process>
		#if CONFIG_DEVICE_SIEWNIK
		#endif
		measure_process();
     23a:	0e 94 9a 03 	call	0x734	; 0x734 <measure_process>
		accumulator_process();
     23e:	0e 94 26 01 	call	0x24c	; 0x24c <accumulator_process>
		atm_com_process();
     242:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <atm_com_process>
		at_read_data_process();
     246:	0e 94 95 02 	call	0x52a	; 0x52a <at_read_data_process>
     24a:	f2 cf       	rjmp	.-28     	; 0x230 <main+0x1e>

0000024c <accumulator_process>:
void accumulator_process(void)
{
	
	static timer_t accumulator_timer;
	
	if(accumulator_timer < mktime.ms)
     24c:	40 91 ce 03 	lds	r20, 0x03CE	; 0x8003ce <mktime+0x2>
     250:	50 91 cf 03 	lds	r21, 0x03CF	; 0x8003cf <mktime+0x3>
     254:	60 91 d0 03 	lds	r22, 0x03D0	; 0x8003d0 <mktime+0x4>
     258:	70 91 d1 03 	lds	r23, 0x03D1	; 0x8003d1 <mktime+0x5>
     25c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__data_end>
     260:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <__data_end+0x1>
     264:	a0 91 d0 00 	lds	r26, 0x00D0	; 0x8000d0 <__data_end+0x2>
     268:	b0 91 d1 00 	lds	r27, 0x00D1	; 0x8000d1 <__data_end+0x3>
     26c:	84 17       	cp	r24, r20
     26e:	95 07       	cpc	r25, r21
     270:	a6 07       	cpc	r26, r22
     272:	b7 07       	cpc	r27, r23
     274:	b8 f4       	brcc	.+46     	; 0x2a4 <accumulator_process+0x58>
	{
		filtered_accum_adc_val = measure_get_filtered_value(MEAS_ACCUM);
     276:	83 e0       	ldi	r24, 0x03	; 3
     278:	0e 94 4f 04 	call	0x89e	; 0x89e <measure_get_filtered_value>
		accumulator_timer = mktime.ms + 100;
     27c:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <mktime+0x2>
     280:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <mktime+0x3>
     284:	a0 91 d0 03 	lds	r26, 0x03D0	; 0x8003d0 <mktime+0x4>
     288:	b0 91 d1 03 	lds	r27, 0x03D1	; 0x8003d1 <mktime+0x5>
     28c:	8c 59       	subi	r24, 0x9C	; 156
     28e:	9f 4f       	sbci	r25, 0xFF	; 255
     290:	af 4f       	sbci	r26, 0xFF	; 255
     292:	bf 4f       	sbci	r27, 0xFF	; 255
     294:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__data_end>
     298:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <__data_end+0x1>
     29c:	a0 93 d0 00 	sts	0x00D0, r26	; 0x8000d0 <__data_end+0x2>
     2a0:	b0 93 d1 00 	sts	0x00D1, r27	; 0x8000d1 <__data_end+0x3>
     2a4:	08 95       	ret

000002a6 <adc_setchannel>:
/*
 * set an adc channel
 */
void adc_setchannel(uint8_t channel)
{
	ADCSRA &= ~(1 << ADEN);
     2a6:	37 98       	cbi	0x06, 7	; 6
	ADMUX = (ADMUX & 0xf8) | (channel & 0x07); //set channel
     2a8:	97 b1       	in	r25, 0x07	; 7
     2aa:	98 7f       	andi	r25, 0xF8	; 248
     2ac:	87 70       	andi	r24, 0x07	; 7
     2ae:	89 2b       	or	r24, r25
     2b0:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN);
     2b2:	37 9a       	sbi	0x06, 7	; 6
     2b4:	08 95       	ret

000002b6 <adc_readsel>:
/*
 * read from selected adc channel
 */
uint16_t adc_readsel(void)
{
	ADCSRA |= (1 << ADSC); // Start conversion
     2b6:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & _BV(ADSC)); 
     2b8:	36 99       	sbic	0x06, 6	; 6
     2ba:	fe cf       	rjmp	.-4      	; 0x2b8 <adc_readsel+0x2>
	//while( !(ADCSRA & (1<<ADIF)) ); // Wait for conversion to complete
	uint16_t adc = ADC;
     2bc:	84 b1       	in	r24, 0x04	; 4
     2be:	95 b1       	in	r25, 0x05	; 5
	//ADCSRA |= (1 << ADIF); // Clear ADIF by writing one to it
	return(adc);
}
     2c0:	08 95       	ret

000002c2 <adc_read>:
/*
 * read from adc channel
 */
uint16_t adc_read(uint8_t channel)
{
	adc_setchannel(channel);
     2c2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <adc_setchannel>
	return adc_readsel();
     2c6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <adc_readsel>
}
     2ca:	08 95       	ret

000002cc <clear_msg>:
uint16_t atmega_get_data(atmega_data_read_t data_type) {
	if (data_type < AT_R_LAST_POSITION) {
		return data_read[data_type];
	}
	return 0;
}
     2cc:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <byte_received>
     2d0:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <byte_received+0x1>
     2d4:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <byte_received+0x2>
     2d8:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <byte_received+0x3>
     2dc:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <cmd>
     2e0:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <data_len>
     2e4:	8a ed       	ldi	r24, 0xDA	; 218
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 15 05 	call	0xa2a	; 0xa2a <evTime_off>
     2ec:	08 95       	ret

000002ee <at_send_data>:
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	16 16       	cp	r1, r22
     2f8:	17 06       	cpc	r1, r23
     2fa:	54 f4       	brge	.+20     	; 0x310 <at_send_data+0x22>
     2fc:	8c 01       	movw	r16, r24
     2fe:	ec 01       	movw	r28, r24
     300:	06 0f       	add	r16, r22
     302:	17 1f       	adc	r17, r23
     304:	89 91       	ld	r24, Y+
     306:	0e 94 e6 05 	call	0xbcc	; 0xbcc <uart0_putc>
     30a:	c0 17       	cp	r28, r16
     30c:	d1 07       	cpc	r29, r17
     30e:	d1 f7       	brne	.-12     	; 0x304 <at_send_data+0x16>
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	1f 91       	pop	r17
     316:	0f 91       	pop	r16
     318:	08 95       	ret

0000031a <at_write_data>:
     31a:	ea eb       	ldi	r30, 0xBA	; 186
     31c:	f2 e0       	ldi	r31, 0x02	; 2
     31e:	8e ed       	ldi	r24, 0xDE	; 222
     320:	80 83       	st	Z, r24
     322:	86 e0       	ldi	r24, 0x06	; 6
     324:	81 83       	std	Z+1, r24	; 0x01
     326:	a9 ee       	ldi	r26, 0xE9	; 233
     328:	b0 e0       	ldi	r27, 0x00	; 0
     32a:	ec eb       	ldi	r30, 0xBC	; 188
     32c:	f2 e0       	ldi	r31, 0x02	; 2
     32e:	22 ec       	ldi	r18, 0xC2	; 194
     330:	32 e0       	ldi	r19, 0x02	; 2
     332:	8d 91       	ld	r24, X+
     334:	81 93       	st	Z+, r24
     336:	e2 17       	cp	r30, r18
     338:	f3 07       	cpc	r31, r19
     33a:	d9 f7       	brne	.-10     	; 0x332 <at_write_data+0x18>
     33c:	68 e0       	ldi	r22, 0x08	; 8
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	8a eb       	ldi	r24, 0xBA	; 186
     342:	92 e0       	ldi	r25, 0x02	; 2
     344:	0e 94 77 01 	call	0x2ee	; 0x2ee <at_send_data>
     348:	08 95       	ret

0000034a <data_process>:
	at_send_data((char *)send_buff, sizeof(data_write) + 2);
}

uint16_t atmega_get_data(atmega_data_read_t data_type) {
	if (data_type < AT_R_LAST_POSITION) {
		return data_read[data_type];
     34a:	ef ed       	ldi	r30, 0xDF	; 223
     34c:	f0 e0       	ldi	r31, 0x00	; 0
uint16_t servo_vibro_is_on;
uint16_t motor_is_on;
uint16_t system_is_on;

void data_process(void) {
	motor_read_value = atmega_get_data(AT_R_MOTOR_VALUE) & 0xFF;
     34e:	80 81       	ld	r24, Z
     350:	91 81       	ldd	r25, Z+1	; 0x01
     352:	99 27       	eor	r25, r25
     354:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <motor_read_value+0x1>
     358:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <motor_read_value>
	servo_read_value = atmega_get_data(AT_R_SERVO_VIBRO_VALUE);
     35c:	82 81       	ldd	r24, Z+2	; 0x02
     35e:	93 81       	ldd	r25, Z+3	; 0x03
     360:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <servo_read_value+0x1>
     364:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <servo_read_value>
	servo_vibro_is_on = atmega_get_data(AT_R_SERVO_VIBRO_IS_ON);
     368:	86 81       	ldd	r24, Z+6	; 0x06
     36a:	97 81       	ldd	r25, Z+7	; 0x07
     36c:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <servo_vibro_is_on+0x1>
     370:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <servo_vibro_is_on>
	motor_is_on = atmega_get_data(AT_R_MOTOR_IS_ON);
     374:	84 81       	ldd	r24, Z+4	; 0x04
     376:	95 81       	ldd	r25, Z+5	; 0x05
     378:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <motor_is_on+0x1>
     37c:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <motor_is_on>
	at_send_data((char *)send_buff, sizeof(data_write) + 2);
}

uint16_t atmega_get_data(atmega_data_read_t data_type) {
	if (data_type < AT_R_LAST_POSITION) {
		return data_read[data_type];
     380:	80 85       	ldd	r24, Z+8	; 0x08
     382:	91 85       	ldd	r25, Z+9	; 0x09
void data_process(void) {
	motor_read_value = atmega_get_data(AT_R_MOTOR_VALUE) & 0xFF;
	servo_read_value = atmega_get_data(AT_R_SERVO_VIBRO_VALUE);
	servo_vibro_is_on = atmega_get_data(AT_R_SERVO_VIBRO_IS_ON);
	motor_is_on = atmega_get_data(AT_R_MOTOR_IS_ON);
	system_is_on = atmega_get_data(AT_R_SYSTEM_ON);
     384:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <system_is_on+0x1>
     388:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <system_is_on>
	
	//debug_msg("mot: %d %d, servo: %d %d \n\r",motor_is_on, motor_read_value, servo_vibro_is_on, servo_read_value);
		
	if (system_is_on) {
     38c:	89 2b       	or	r24, r25
     38e:	11 f0       	breq	.+4      	; 0x394 <data_process+0x4a>
		ON_SYSTEM_PIN;
     390:	db 9a       	sbi	0x1b, 3	; 27
     392:	01 c0       	rjmp	.+2      	; 0x396 <data_process+0x4c>
	}
	else {
		OFF_SYSTEM_PIN;
     394:	db 98       	cbi	0x1b, 3	; 27
	}

	/* MOTOR SECTION */
	if (motor_is_on) {
     396:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <motor_is_on>
     39a:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <motor_is_on+0x1>
     39e:	89 2b       	or	r24, r25
     3a0:	39 f0       	breq	.+14     	; 0x3b0 <data_process+0x66>
		dcmotorpwm_start();
     3a2:	0e 94 2b 03 	call	0x656	; 0x656 <dcmotorpwm_start>
		dcmotor_set_pwm((uint8_t) motor_read_value);
     3a6:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <motor_read_value>
     3aa:	0e 94 4c 03 	call	0x698	; 0x698 <dcmotor_set_pwm>
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <data_process+0x6a>
	}
	else {
		dcmotorpwm_stop();
     3b0:	0e 94 1f 03 	call	0x63e	; 0x63e <dcmotorpwm_stop>
		//servo_close();
	}
	#endif
	/* VIBRO SECTION */
	#if CONFIG_DEVICE_SOLARKA
	if (servo_vibro_is_on) {
     3b4:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <servo_vibro_is_on>
     3b8:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <servo_vibro_is_on+0x1>
     3bc:	89 2b       	or	r24, r25
     3be:	11 f0       	breq	.+4      	; 0x3c4 <data_process+0x7a>
		ON_VIBRO_PIN;
     3c0:	94 9a       	sbi	0x12, 4	; 18
     3c2:	08 95       	ret
	}
	else {
		OFF_VIBRO_PIN;
     3c4:	94 98       	cbi	0x12, 4	; 18
     3c6:	08 95       	ret

000003c8 <at_read_byte>:
	}
	#endif

}

void at_read_byte(uint8_t byte) {
     3c8:	cf 92       	push	r12
     3ca:	df 92       	push	r13
     3cc:	ef 92       	push	r14
     3ce:	ff 92       	push	r15
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
	if (byte_received == 0) {
     3d4:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <byte_received>
     3d8:	50 91 f2 00 	lds	r21, 0x00F2	; 0x8000f2 <byte_received+0x1>
     3dc:	60 91 f3 00 	lds	r22, 0x00F3	; 0x8000f3 <byte_received+0x2>
     3e0:	70 91 f4 00 	lds	r23, 0x00F4	; 0x8000f4 <byte_received+0x3>
     3e4:	41 15       	cp	r20, r1
     3e6:	51 05       	cpc	r21, r1
     3e8:	61 05       	cpc	r22, r1
     3ea:	71 05       	cpc	r23, r1
     3ec:	b9 f4       	brne	.+46     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		cmd = byte;
     3ee:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <cmd>
		byte_received++;
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	a0 e0       	ldi	r26, 0x00	; 0
     3f8:	b0 e0       	ldi	r27, 0x00	; 0
     3fa:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <byte_received>
     3fe:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <byte_received+0x1>
     402:	a0 93 f3 00 	sts	0x00F3, r26	; 0x8000f3 <byte_received+0x2>
     406:	b0 93 f4 00 	sts	0x00F4, r27	; 0x8000f4 <byte_received+0x3>
		evTime_start(&xTimers, 200);
     40a:	48 ec       	ldi	r20, 0xC8	; 200
     40c:	50 e0       	ldi	r21, 0x00	; 0
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	8a ed       	ldi	r24, 0xDA	; 218
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 dd 04 	call	0x9ba	; 0x9ba <evTime_start>
		return;
     41a:	80 c0       	rjmp	.+256    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
	}

	switch(cmd) {
     41c:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <cmd>
     420:	9e 3e       	cpi	r25, 0xEE	; 238
     422:	09 f4       	brne	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     424:	76 c0       	rjmp	.+236    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
     426:	9e 3f       	cpi	r25, 0xFE	; 254
     428:	09 f4       	brne	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42a:	6e c0       	rjmp	.+220    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     42c:	9e 3d       	cpi	r25, 0xDE	; 222
     42e:	09 f0       	breq	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     430:	73 c0       	rjmp	.+230    	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
		case START_FRAME_WRITE:
		if (byte_received == 1) {
     432:	41 30       	cpi	r20, 0x01	; 1
     434:	51 05       	cpc	r21, r1
     436:	61 05       	cpc	r22, r1
     438:	71 05       	cpc	r23, r1
     43a:	19 f5       	brne	.+70     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			data_len = byte;
     43c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <data_len>
			byte_received++;
     440:	42 e0       	ldi	r20, 0x02	; 2
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <byte_received>
     44c:	50 93 f2 00 	sts	0x00F2, r21	; 0x8000f2 <byte_received+0x1>
     450:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <byte_received+0x2>
     454:	70 93 f4 00 	sts	0x00F4, r23	; 0x8000f4 <byte_received+0x3>
			if (data_len != sizeof(data_read)) {
     458:	8a 30       	cpi	r24, 0x0A	; 10
     45a:	51 f0       	breq	.+20     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
				clear_msg();
     45c:	0e 94 66 01 	call	0x2cc	; 0x2cc <clear_msg>
				debug_msg("FRAME BAD LEN\n\r");
     460:	8e e8       	ldi	r24, 0x8E	; 142
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	9f 93       	push	r25
     466:	8f 93       	push	r24
     468:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
			}
			evTime_start(&xTimers, 200);
     470:	48 ec       	ldi	r20, 0xC8	; 200
     472:	50 e0       	ldi	r21, 0x00	; 0
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	8a ed       	ldi	r24, 0xDA	; 218
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <evTime_start>
     480:	4d c0       	rjmp	.+154    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
		}
		else if (byte_received - 2 < data_len) {
     482:	00 91 ef 00 	lds	r16, 0x00EF	; 0x8000ef <data_len>
     486:	10 e0       	ldi	r17, 0x00	; 0
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	6a 01       	movw	r12, r20
     48e:	7b 01       	movw	r14, r22
     490:	92 e0       	ldi	r25, 0x02	; 2
     492:	c9 1a       	sub	r12, r25
     494:	d1 08       	sbc	r13, r1
     496:	e1 08       	sbc	r14, r1
     498:	f1 08       	sbc	r15, r1
     49a:	c0 16       	cp	r12, r16
     49c:	d1 06       	cpc	r13, r17
     49e:	e2 06       	cpc	r14, r18
     4a0:	f3 06       	cpc	r15, r19
     4a2:	38 f5       	brcc	.+78     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
			uint8_t *pnt = (uint8_t *)data_read;
			pnt[byte_received - 2] = byte;
     4a4:	fa 01       	movw	r30, r20
     4a6:	e3 52       	subi	r30, 0x23	; 35
     4a8:	ff 4f       	sbci	r31, 0xFF	; 255
     4aa:	80 83       	st	Z, r24
			byte_received++;
     4ac:	db 01       	movw	r26, r22
     4ae:	ca 01       	movw	r24, r20
     4b0:	01 96       	adiw	r24, 0x01	; 1
     4b2:	a1 1d       	adc	r26, r1
     4b4:	b1 1d       	adc	r27, r1
     4b6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <byte_received>
     4ba:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <byte_received+0x1>
     4be:	a0 93 f3 00 	sts	0x00F3, r26	; 0x8000f3 <byte_received+0x2>
     4c2:	b0 93 f4 00 	sts	0x00F4, r27	; 0x8000f4 <byte_received+0x3>
			if (byte_received - 2 == data_len) {
     4c6:	41 50       	subi	r20, 0x01	; 1
     4c8:	51 09       	sbc	r21, r1
     4ca:	61 09       	sbc	r22, r1
     4cc:	71 09       	sbc	r23, r1
     4ce:	04 17       	cp	r16, r20
     4d0:	15 07       	cpc	r17, r21
     4d2:	26 07       	cpc	r18, r22
     4d4:	37 07       	cpc	r19, r23
     4d6:	21 f4       	brne	.+8      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
				clear_msg();
     4d8:	0e 94 66 01 	call	0x2cc	; 0x2cc <clear_msg>
				/* Verify data */
				data_process();
     4dc:	0e 94 a5 01 	call	0x34a	; 0x34a <data_process>
				
			}
			evTime_start(&xTimers, 200);
     4e0:	48 ec       	ldi	r20, 0xC8	; 200
     4e2:	50 e0       	ldi	r21, 0x00	; 0
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	8a ed       	ldi	r24, 0xDA	; 218
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	0e 94 dd 04 	call	0x9ba	; 0x9ba <evTime_start>
     4f0:	15 c0       	rjmp	.+42     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
		}
		else {
			/* End receive data or unknown error */
			clear_msg();
     4f2:	0e 94 66 01 	call	0x2cc	; 0x2cc <clear_msg>
			debug_msg("ATMEGA RECEIVE UNKNOW ERROR\n\r");
     4f6:	8e e9       	ldi	r24, 0x9E	; 158
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	9f 93       	push	r25
     4fc:	8f 93       	push	r24
     4fe:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	0a c0       	rjmp	.+20     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
		}
		break;

		case START_FRAME_READ:
		/* SEND BUFF data_write */
		at_write_data();
     508:	0e 94 8d 01 	call	0x31a	; 0x31a <at_write_data>
		clear_msg();
     50c:	0e 94 66 01 	call	0x2cc	; 0x2cc <clear_msg>
		break;
     510:	05 c0       	rjmp	.+10     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>

		case START_FRAME_CMD:
		/* Nothing for host */
		clear_msg();
     512:	0e 94 66 01 	call	0x2cc	; 0x2cc <clear_msg>
		break;
     516:	02 c0       	rjmp	.+4      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>

		default:
		//debug_msg("FRAME BAD START\n\r");
		clear_msg();
     518:	0e 94 66 01 	call	0x2cc	; 0x2cc <clear_msg>
	}
}
     51c:	1f 91       	pop	r17
     51e:	0f 91       	pop	r16
     520:	ff 90       	pop	r15
     522:	ef 90       	pop	r14
     524:	df 90       	pop	r13
     526:	cf 90       	pop	r12
     528:	08 95       	ret

0000052a <at_read_data_process>:
	
}

void at_read_data_process(void) {
	static uint32_t atm_timer;
	if (atm_timer < mktime.ms) {
     52a:	40 91 ce 03 	lds	r20, 0x03CE	; 0x8003ce <mktime+0x2>
     52e:	50 91 cf 03 	lds	r21, 0x03CF	; 0x8003cf <mktime+0x3>
     532:	60 91 d0 03 	lds	r22, 0x03D0	; 0x8003d0 <mktime+0x4>
     536:	70 91 d1 03 	lds	r23, 0x03D1	; 0x8003d1 <mktime+0x5>
     53a:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <atm_timer.1858>
     53e:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <atm_timer.1858+0x1>
     542:	a0 91 d8 00 	lds	r26, 0x00D8	; 0x8000d8 <atm_timer.1858+0x2>
     546:	b0 91 d9 00 	lds	r27, 0x00D9	; 0x8000d9 <atm_timer.1858+0x3>
     54a:	84 17       	cp	r24, r20
     54c:	95 07       	cpc	r25, r21
     54e:	a6 07       	cpc	r26, r22
     550:	b7 07       	cpc	r27, r23
     552:	38 f5       	brcc	.+78     	; 0x5a2 <at_read_data_process+0x78>
		
		uint8_t byte, error_val;
		uint16_t data = uart_getc();
     554:	0e 94 c6 05 	call	0xb8c	; 0xb8c <uart0_getc>
		if (error_val == UART_NO_DATA) {
			atm_timer = mktime.ms + 50;
			return;
		}
		
		at_read_byte(byte);
     558:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <at_read_byte>
		
		if (evTime_check(&xTimers)) {
     55c:	8a ed       	ldi	r24, 0xDA	; 218
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 f5 04 	call	0x9ea	; 0x9ea <evTime_check>
     564:	89 2b       	or	r24, r25
     566:	51 f0       	breq	.+20     	; 0x57c <at_read_data_process+0x52>
}

static void vTimerCallback( evTime *xTimer )
{
	(void)xTimer;
	clear_msg();
     568:	0e 94 66 01 	call	0x2cc	; 0x2cc <clear_msg>
	debug_msg("vTimerCallback\n\r");
     56c:	8c eb       	ldi	r24, 0xBC	; 188
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	9f 93       	push	r25
     572:	8f 93       	push	r24
     574:	0e 94 ca 00 	call	0x194	; 0x194 <debug_msg>
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
		at_read_byte(byte);
		
		if (evTime_check(&xTimers)) {
			vTimerCallback(&xTimers);
		}
		atm_timer = mktime.ms + 5;
     57c:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <mktime+0x2>
     580:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <mktime+0x3>
     584:	a0 91 d0 03 	lds	r26, 0x03D0	; 0x8003d0 <mktime+0x4>
     588:	b0 91 d1 03 	lds	r27, 0x03D1	; 0x8003d1 <mktime+0x5>
     58c:	05 96       	adiw	r24, 0x05	; 5
     58e:	a1 1d       	adc	r26, r1
     590:	b1 1d       	adc	r27, r1
     592:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <atm_timer.1858>
     596:	90 93 d7 00 	sts	0x00D7, r25	; 0x8000d7 <atm_timer.1858+0x1>
     59a:	a0 93 d8 00 	sts	0x00D8, r26	; 0x8000d8 <atm_timer.1858+0x2>
     59e:	b0 93 d9 00 	sts	0x00D9, r27	; 0x8000d9 <atm_timer.1858+0x3>
     5a2:	08 95       	ret

000005a4 <atm_com_process>:
	}
}

void atm_com_process(void) {
	static uint32_t atm_timer;
	if (atm_timer < mktime.ms)
     5a4:	40 91 ce 03 	lds	r20, 0x03CE	; 0x8003ce <mktime+0x2>
     5a8:	50 91 cf 03 	lds	r21, 0x03CF	; 0x8003cf <mktime+0x3>
     5ac:	60 91 d0 03 	lds	r22, 0x03D0	; 0x8003d0 <mktime+0x4>
     5b0:	70 91 d1 03 	lds	r23, 0x03D1	; 0x8003d1 <mktime+0x5>
     5b4:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <atm_timer.1882>
     5b8:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <atm_timer.1882+0x1>
     5bc:	a0 91 d4 00 	lds	r26, 0x00D4	; 0x8000d4 <atm_timer.1882+0x2>
     5c0:	b0 91 d5 00 	lds	r27, 0x00D5	; 0x8000d5 <atm_timer.1882+0x3>
     5c4:	84 17       	cp	r24, r20
     5c6:	95 07       	cpc	r25, r21
     5c8:	a6 07       	cpc	r26, r22
     5ca:	b7 07       	cpc	r27, r23
     5cc:	20 f5       	brcc	.+72     	; 0x616 <atm_com_process+0x72>
	{
		/* Do poprawy */
		data_write[AT_W_MEAS_ACCUM] = 123;//(uint16_t)accum_get_voltage();
     5ce:	e9 ee       	ldi	r30, 0xE9	; 233
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	8b e7       	ldi	r24, 0x7B	; 123
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	91 83       	std	Z+1, r25	; 0x01
     5d8:	80 83       	st	Z, r24
		data_write[AT_W_MEAS_MOTOR] = 321;//(uint16_t)measure_get_current(MEAS_MOTOR, MOTOR_RESISTOR);
     5da:	81 e4       	ldi	r24, 0x41	; 65
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	93 83       	std	Z+3, r25	; 0x03
     5e0:	82 83       	std	Z+2, r24	; 0x02
		data_write[AT_W_MEAS_SERVO] = 4095;//(uint16_t)measure_get_filtered_value(MEAS_SERVO);
     5e2:	8f ef       	ldi	r24, 0xFF	; 255
     5e4:	9f e0       	ldi	r25, 0x0F	; 15
     5e6:	95 83       	std	Z+5, r25	; 0x05
     5e8:	84 83       	std	Z+4, r24	; 0x04
		at_write_data();
     5ea:	0e 94 8d 01 	call	0x31a	; 0x31a <at_write_data>
		atm_timer = mktime.ms + 200;
     5ee:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <mktime+0x2>
     5f2:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <mktime+0x3>
     5f6:	a0 91 d0 03 	lds	r26, 0x03D0	; 0x8003d0 <mktime+0x4>
     5fa:	b0 91 d1 03 	lds	r27, 0x03D1	; 0x8003d1 <mktime+0x5>
     5fe:	88 53       	subi	r24, 0x38	; 56
     600:	9f 4f       	sbci	r25, 0xFF	; 255
     602:	af 4f       	sbci	r26, 0xFF	; 255
     604:	bf 4f       	sbci	r27, 0xFF	; 255
     606:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <atm_timer.1882>
     60a:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <atm_timer.1882+0x1>
     60e:	a0 93 d4 00 	sts	0x00D4, r26	; 0x8000d4 <atm_timer.1882+0x2>
     612:	b0 93 d5 00 	sts	0x00D5, r27	; 0x8000d5 <atm_timer.1882+0x3>
     616:	08 95       	ret

00000618 <at_communication_init>:
}


void at_communication_init(void) {
	#if CONFIG_DEVICE_SOLARKA
	VIBRO_INIT_PIN;
     618:	8c 9a       	sbi	0x11, 4	; 17
	#endif
	SYSTEM_INIT_PIN;
     61a:	d3 9a       	sbi	0x1a, 3	; 26
	evTime_init(&xTimers);
     61c:	8a ed       	ldi	r24, 0xDA	; 218
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	0e 94 d5 04 	call	0x9aa	; 0x9aa <evTime_init>
     624:	08 95       	ret

00000626 <dcmotorpwm_init>:
	#if CONFIG_DEVICE_SOLARKA
	CLEAR_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
	#else
	SET_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
	#endif
	LED_MOTOR_OFF;
     626:	86 ec       	ldi	r24, 0xC6	; 198
     628:	93 e0       	ldi	r25, 0x03	; 3
     62a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <evTime_init>
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <motorD>
     634:	94 98       	cbi	0x12, 4	; 18
     636:	15 bc       	out	0x25, r1	; 37
     638:	8f 9a       	sbi	0x11, 7	; 17
     63a:	97 98       	cbi	0x12, 7	; 18
     63c:	08 95       	ret

0000063e <dcmotorpwm_stop>:
 * stop the motor
 */
int dcmotorpwm_stop(void) {
	
	//debug_msg("!!!!!!!!!!!!!!!!dcmotor stop\n");
	TCCR2 = 0;
     63e:	15 bc       	out	0x25, r1	; 37
	#if CONFIG_DEVICE_SOLARKA
	CLEAR_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
     640:	97 98       	cbi	0x12, 7	; 18
	#else
	SET_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
	#endif
	OCR2 = 0;
     642:	13 bc       	out	0x23, r1	; 35
	motorD.last_state = motorD.state;
     644:	e2 ec       	ldi	r30, 0xC2	; 194
     646:	f3 e0       	ldi	r31, 0x03	; 3
     648:	80 81       	ld	r24, Z
     64a:	81 83       	std	Z+1, r24	; 0x01
	motorD.state = MOTOR_OFF;
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	80 83       	st	Z, r24
	return 1;
}
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	08 95       	ret

00000656 <dcmotorpwm_start>:

int dcmotorpwm_start(void)
{
	if (motorD.state == MOTOR_OFF)
     656:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <motorD>
     65a:	81 30       	cpi	r24, 0x01	; 1
     65c:	d1 f4       	brne	.+52     	; 0x692 <dcmotorpwm_start+0x3c>
	{
		//debug_msg("---------Motor Start----------\n");
		
		#if CONFIG_DEVICE_SOLARKA
		TCCR2 |= (1<<COM21); 
     65e:	85 b5       	in	r24, 0x25	; 37
     660:	80 62       	ori	r24, 0x20	; 32
     662:	85 bd       	out	0x25, r24	; 37
		#else
		TCCR2 |= (1<<COM21) | (1<<COM20); 
		#endif
		
		TCCR2 |= (1<<WGM20);
     664:	85 b5       	in	r24, 0x25	; 37
     666:	80 64       	ori	r24, 0x40	; 64
     668:	85 bd       	out	0x25, r24	; 37
		TCCR2 |= DCMOTORPWM_PRESCALER; //set prescaler
     66a:	85 b5       	in	r24, 0x25	; 37
     66c:	82 60       	ori	r24, 0x02	; 2
     66e:	85 bd       	out	0x25, r24	; 37
		motorD.last_state = motorD.state;
     670:	e2 ec       	ldi	r30, 0xC2	; 194
     672:	f3 e0       	ldi	r31, 0x03	; 3
     674:	80 81       	ld	r24, Z
     676:	81 83       	std	Z+1, r24	; 0x01
		motorD.state = MOTOR_ON;
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	80 83       	st	Z, r24
		evTime_start(&motorD.timeout, 1000);
     67c:	48 ee       	ldi	r20, 0xE8	; 232
     67e:	53 e0       	ldi	r21, 0x03	; 3
     680:	60 e0       	ldi	r22, 0x00	; 0
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	86 ec       	ldi	r24, 0xC6	; 198
     686:	93 e0       	ldi	r25, 0x03	; 3
     688:	0e 94 dd 04 	call	0x9ba	; 0x9ba <evTime_start>
		return 1;
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	08 95       	ret
	}
	else 
	{
		//debug_msg("dcmotor canot start\n");
		return 0;
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     696:	08 95       	ret

00000698 <dcmotor_set_pwm>:

void dcmotor_set_pwm(uint8_t value) {
	if (motorD.state == MOTOR_ON) {
     698:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <motorD>
     69c:	92 30       	cpi	r25, 0x02	; 2
     69e:	19 f4       	brne	.+6      	; 0x6a6 <dcmotor_set_pwm+0xe>
		OCR2 = value;
     6a0:	83 bd       	out	0x23, r24	; 35
		motorD.pwm_value = value;
     6a2:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <motorD+0x3>
     6a6:	08 95       	ret

000006a8 <dcmotor_process>:

void dcmotor_process(uint16_t value)
{
	(void) value;
	static evTime dcmotor_timer;
	if (evTime_process_period(&dcmotor_timer, 250))
     6a8:	4a ef       	ldi	r20, 0xFA	; 250
     6aa:	50 e0       	ldi	r21, 0x00	; 0
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	85 ef       	ldi	r24, 0xF5	; 245
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 1f 05 	call	0xa3e	; 0xa3e <evTime_process_period>
     6b8:	89 2b       	or	r24, r25
     6ba:	59 f0       	breq	.+22     	; 0x6d2 <dcmotor_process+0x2a>
	{
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
     6bc:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <motorD>
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	31 f0       	breq	.+12     	; 0x6d0 <dcmotor_process+0x28>
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	29 f4       	brne	.+10     	; 0x6d2 <dcmotor_process+0x2a>
		{
			case MOTOR_ON:
			//debug_msg("MOTOR ON %d\n", motorD.pwm_value);
			OCR2 = motorD.pwm_value;
     6c8:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <motorD+0x3>
     6cc:	83 bd       	out	0x23, r24	; 35
			break;
     6ce:	08 95       	ret

			case MOTOR_OFF:
			//debug_msg("MOTOR OFF %d\n", 0);
			OCR2 = 0;
     6d0:	13 bc       	out	0x23, r1	; 35
     6d2:	08 95       	ret

000006d4 <filtered_value>:
static uint16_t s_o_t_adc;


static uint16_t filtered_value(uint16_t *tab, uint8_t size)
{
	uint16_t ret_val = *tab;
     6d4:	fc 01       	movw	r30, r24
     6d6:	20 81       	ld	r18, Z
     6d8:	31 81       	ldd	r19, Z+1	; 0x01
	for (uint8_t i = 1; i<size; i++)
     6da:	62 30       	cpi	r22, 0x02	; 2
     6dc:	58 f0       	brcs	.+22     	; 0x6f4 <filtered_value+0x20>
     6de:	32 96       	adiw	r30, 0x02	; 2
     6e0:	91 e0       	ldi	r25, 0x01	; 1
	{
		ret_val = (ret_val + tab[i])/2;
     6e2:	41 91       	ld	r20, Z+
     6e4:	51 91       	ld	r21, Z+
     6e6:	24 0f       	add	r18, r20
     6e8:	35 1f       	adc	r19, r21
     6ea:	36 95       	lsr	r19
     6ec:	27 95       	ror	r18


static uint16_t filtered_value(uint16_t *tab, uint8_t size)
{
	uint16_t ret_val = *tab;
	for (uint8_t i = 1; i<size; i++)
     6ee:	9f 5f       	subi	r25, 0xFF	; 255
     6f0:	69 13       	cpse	r22, r25
     6f2:	f7 cf       	rjmp	.-18     	; 0x6e2 <filtered_value+0xe>
	{
		ret_val = (ret_val + tab[i])/2;
	}
	return ret_val;
}
     6f4:	c9 01       	movw	r24, r18
     6f6:	08 95       	ret

000006f8 <init_measure>:

void init_measure(void)
{
     6f8:	ee e3       	ldi	r30, 0x3E	; 62
     6fa:	f1 e0       	ldi	r31, 0x01	; 1
     6fc:	26 e6       	ldi	r18, 0x66	; 102
     6fe:	31 e0       	ldi	r19, 0x01	; 1
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
     700:	81 ef       	ldi	r24, 0xF1	; 241
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	81 93       	st	Z+, r24
     706:	91 93       	st	Z+, r25
	return ret_val;
}

void init_measure(void)
{
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
     708:	2e 17       	cp	r18, r30
     70a:	3f 07       	cpc	r19, r31
     70c:	d9 f7       	brne	.-10     	; 0x704 <init_measure+0xc>
     70e:	ed e1       	ldi	r30, 0x1D	; 29
     710:	f1 e0       	ldi	r31, 0x01	; 1
     712:	8b e3       	ldi	r24, 0x3B	; 59
     714:	91 e0       	ldi	r25, 0x01	; 1
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
	{
		motor_f_table[i] = 0;
     716:	11 92       	st	Z+, r1
     718:	11 92       	st	Z+, r1
{
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
     71a:	8e 17       	cp	r24, r30
     71c:	9f 07       	cpc	r25, r31
     71e:	d9 f7       	brne	.-10     	; 0x716 <init_measure+0x1e>
     720:	e5 e0       	ldi	r30, 0x05	; 5
     722:	f1 e0       	ldi	r31, 0x01	; 1
     724:	89 e1       	ldi	r24, 0x19	; 25
     726:	91 e0       	ldi	r25, 0x01	; 1
	{
		motor_f_table[i] = 0;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_S_SIZE; i++)
	{
		s_o_t_f_table[i] = 0;
     728:	11 92       	st	Z+, r1
     72a:	11 92       	st	Z+, r1
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
	{
		motor_f_table[i] = 0;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_S_SIZE; i++)
     72c:	8e 17       	cp	r24, r30
     72e:	9f 07       	cpc	r25, r31
     730:	d9 f7       	brne	.-10     	; 0x728 <init_measure+0x30>
	{
		s_o_t_f_table[i] = 0;
	}
}
     732:	08 95       	ret

00000734 <measure_process>:
static timer_t measure_timer;
static uint32_t debug_msg_counter;
void measure_process(void)
{
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
	if (measure_timer < mktime.ms)
     738:	40 91 ce 03 	lds	r20, 0x03CE	; 0x8003ce <mktime+0x2>
     73c:	50 91 cf 03 	lds	r21, 0x03CF	; 0x8003cf <mktime+0x3>
     740:	60 91 d0 03 	lds	r22, 0x03D0	; 0x8003d0 <mktime+0x4>
     744:	70 91 d1 03 	lds	r23, 0x03D1	; 0x8003d1 <mktime+0x5>
     748:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <measure_timer>
     74c:	90 91 ff 00 	lds	r25, 0x00FF	; 0x8000ff <measure_timer+0x1>
     750:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <measure_timer+0x2>
     754:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <measure_timer+0x3>
     758:	84 17       	cp	r24, r20
     75a:	95 07       	cpc	r25, r21
     75c:	a6 07       	cpc	r26, r22
     75e:	b7 07       	cpc	r27, r23
     760:	08 f0       	brcs	.+2      	; 0x764 <measure_process+0x30>
     762:	9a c0       	rjmp	.+308    	; 0x898 <__stack+0x39>
	{
		measure_timer = mktime.ms + 20;
     764:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <mktime+0x2>
     768:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <mktime+0x3>
     76c:	a0 91 d0 03 	lds	r26, 0x03D0	; 0x8003d0 <mktime+0x4>
     770:	b0 91 d1 03 	lds	r27, 0x03D1	; 0x8003d1 <mktime+0x5>
     774:	44 96       	adiw	r24, 0x14	; 20
     776:	a1 1d       	adc	r26, r1
     778:	b1 1d       	adc	r27, r1
     77a:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <measure_timer>
     77e:	90 93 ff 00 	sts	0x00FF, r25	; 0x8000ff <measure_timer+0x1>
     782:	a0 93 00 01 	sts	0x0100, r26	; 0x800100 <measure_timer+0x2>
     786:	b0 93 01 01 	sts	0x0101, r27	; 0x800101 <measure_timer+0x3>
		accum_adc = adc_read(ACCUMULATOR_ADC_CH); 
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <adc_read>
     790:	9c 01       	movw	r18, r24
     792:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <accum_adc+0x1>
     796:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <accum_adc>
		#if CONFIG_DEVICE_SOLARKA
		#endif
		#if CONFIG_DEVICE_SIEWNIK
		accum_adc += motor_filter_value*0.27; //motor_filter_value*0.0075*1025/5/5.7
		#endif
		accumulator_tab[iteration_adc_accum_table] = accum_adc;
     79a:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <iteration_adc_accum_table>
     79e:	e9 2f       	mov	r30, r25
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	ee 0f       	add	r30, r30
     7a4:	ff 1f       	adc	r31, r31
     7a6:	e2 5c       	subi	r30, 0xC2	; 194
     7a8:	fe 4f       	sbci	r31, 0xFE	; 254
     7aa:	31 83       	std	Z+1, r19	; 0x01
     7ac:	20 83       	st	Z, r18
		
		iteration_adc_accum_table++;
     7ae:	9f 5f       	subi	r25, 0xFF	; 255
     7b0:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <iteration_adc_accum_table>
		motor_adc = adc_read(MOTOR_ADC_CH);
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <adc_read>
		if (motor_adc > 31) motor_adc = motor_adc - 31;
     7ba:	80 32       	cpi	r24, 0x20	; 32
     7bc:	91 05       	cpc	r25, r1
     7be:	30 f0       	brcs	.+12     	; 0x7cc <measure_process+0x98>
     7c0:	4f 97       	sbiw	r24, 0x1f	; 31
     7c2:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <motor_adc+0x1>
     7c6:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <motor_adc>
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <measure_process+0xa0>
		else motor_adc = 0;
     7cc:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <motor_adc+0x1>
     7d0:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <motor_adc>
		motor_f_table[iteration_adc_motor_table] = motor_adc;
     7d4:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <iteration_adc_motor_table>
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	ee 0f       	add	r30, r30
     7dc:	ff 1f       	adc	r31, r31
     7de:	e3 5e       	subi	r30, 0xE3	; 227
     7e0:	fe 4f       	sbci	r31, 0xFE	; 254
     7e2:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <motor_adc>
     7e6:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <motor_adc+0x1>
     7ea:	91 83       	std	Z+1, r25	; 0x01
     7ec:	80 83       	st	Z, r24
		///////////////////////////////////////////////////////////
		////////// TODO isset_timer
		s_o_t_adc = adc_read(SERVO_ADC_CH);
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <adc_read>
     7f4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <s_o_t_adc+0x1>
     7f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <s_o_t_adc>

		s_o_t_f_table[s_o_t_iteration_adc_table] = s_o_t_adc;
     7fc:	c0 91 04 01 	lds	r28, 0x0104	; 0x800104 <s_o_t_iteration_adc_table>
     800:	ec 2f       	mov	r30, r28
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	ee 0f       	add	r30, r30
     806:	ff 1f       	adc	r31, r31
     808:	eb 5f       	subi	r30, 0xFB	; 251
     80a:	fe 4f       	sbci	r31, 0xFE	; 254
     80c:	91 83       	std	Z+1, r25	; 0x01
     80e:	80 83       	st	Z, r24
		iteration_adc_motor_table++;
     810:	d0 91 3d 01 	lds	r29, 0x013D	; 0x80013d <iteration_adc_motor_table>
     814:	df 5f       	subi	r29, 0xFF	; 255
     816:	d0 93 3d 01 	sts	0x013D, r29	; 0x80013d <iteration_adc_motor_table>
		s_o_t_iteration_adc_table++;
     81a:	cf 5f       	subi	r28, 0xFF	; 255
     81c:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <s_o_t_iteration_adc_table>
		filtered_accum_adc_val = filtered_value(accumulator_tab, ACCUMULATOR_SIZE_TAB);
     820:	64 e1       	ldi	r22, 0x14	; 20
     822:	8e e3       	ldi	r24, 0x3E	; 62
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <filtered_value>
     82a:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <filtered_accum_adc_val+0x1>
     82e:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <filtered_accum_adc_val>
		motor_filter_value = filtered_value(motor_f_table, FILTER_TABLE_SIZE);
     832:	6f e0       	ldi	r22, 0x0F	; 15
     834:	8d e1       	ldi	r24, 0x1D	; 29
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <filtered_value>
     83c:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <motor_filter_value+0x1>
     840:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <motor_filter_value>
		s_o_t_filter_value = filtered_value(s_o_t_f_table, FILTER_TABLE_S_SIZE);
     844:	6a e0       	ldi	r22, 0x0A	; 10
     846:	85 e0       	ldi	r24, 0x05	; 5
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <filtered_value>
     84e:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <s_o_t_filter_value+0x1>
     852:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <s_o_t_filter_value>
		debug_msg_counter++;
     856:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <debug_msg_counter>
     85a:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <debug_msg_counter+0x1>
     85e:	a0 91 fc 00 	lds	r26, 0x00FC	; 0x8000fc <debug_msg_counter+0x2>
     862:	b0 91 fd 00 	lds	r27, 0x00FD	; 0x8000fd <debug_msg_counter+0x3>
     866:	01 96       	adiw	r24, 0x01	; 1
     868:	a1 1d       	adc	r26, r1
     86a:	b1 1d       	adc	r27, r1
     86c:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <debug_msg_counter>
     870:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <debug_msg_counter+0x1>
     874:	a0 93 fc 00 	sts	0x00FC, r26	; 0x8000fc <debug_msg_counter+0x2>
     878:	b0 93 fd 00 	sts	0x00FD, r27	; 0x8000fd <debug_msg_counter+0x3>
		
		if (iteration_adc_accum_table == ACCUMULATOR_SIZE_TAB) iteration_adc_accum_table = 0;
     87c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <iteration_adc_accum_table>
     880:	84 31       	cpi	r24, 0x14	; 20
     882:	11 f4       	brne	.+4      	; 0x888 <__stack+0x29>
     884:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <iteration_adc_accum_table>
		if (s_o_t_iteration_adc_table == FILTER_TABLE_S_SIZE) s_o_t_iteration_adc_table = 0;
     888:	ca 30       	cpi	r28, 0x0A	; 10
     88a:	11 f4       	brne	.+4      	; 0x890 <__stack+0x31>
     88c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <s_o_t_iteration_adc_table>
		if (iteration_adc_motor_table == FILTER_TABLE_SIZE) iteration_adc_motor_table = 0;
     890:	df 30       	cpi	r29, 0x0F	; 15
     892:	11 f4       	brne	.+4      	; 0x898 <__stack+0x39>
     894:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <iteration_adc_motor_table>
	}
}
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	08 95       	ret

0000089e <measure_get_filtered_value>:

uint16_t measure_get_filtered_value(_type_measure type)
{
    switch(type)
     89e:	83 30       	cpi	r24, 0x03	; 3
     8a0:	18 f4       	brcc	.+6      	; 0x8a8 <measure_get_filtered_value+0xa>
     8a2:	81 30       	cpi	r24, 0x01	; 1
     8a4:	40 f0       	brcs	.+16     	; 0x8b6 <measure_get_filtered_value+0x18>
     8a6:	0c c0       	rjmp	.+24     	; 0x8c0 <measure_get_filtered_value+0x22>
     8a8:	83 30       	cpi	r24, 0x03	; 3
     8aa:	79 f4       	brne	.+30     	; 0x8ca <measure_get_filtered_value+0x2c>
    {
        case MEAS_ACCUM:
        return filtered_accum_adc_val;
     8ac:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <filtered_accum_adc_val>
     8b0:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <filtered_accum_adc_val+0x1>
     8b4:	08 95       	ret
        break;

        case MEAS_MOTOR:
        return motor_filter_value;
     8b6:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <motor_filter_value>
     8ba:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <motor_filter_value+0x1>
     8be:	08 95       	ret
        break;

        case MEAS_SERVO:
		case MEAS_TEMPERATURE:
        return s_o_t_filter_value;
     8c0:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <s_o_t_filter_value>
     8c4:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <s_o_t_filter_value+0x1>
     8c8:	08 95       	ret
        break;
    }
	return 0;
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	90 e0       	ldi	r25, 0x00	; 0
}
     8ce:	08 95       	ret

000008d0 <init_system>:
extern uint8_t servo_vibro_value;

extern uint8_t motor_value;

void init_system(void)
{
     8d0:	08 95       	ret

000008d2 <on_system>:

}

void on_system(void)
{
	dcmotorpwm_init();	
     8d2:	0e 94 13 03 	call	0x626	; 0x626 <dcmotorpwm_init>
	init_measure();
     8d6:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <init_measure>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <system_events+0x1>
     8e2:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <system_events>
     8e6:	08 95       	ret

000008e8 <__vector_10>:
	int time_to_end;
	if (evt->timer > mktime.ms)
		time_to_end = evt->timer - mktime.ms;
	else time_to_end = 0;
	return time_to_end;
}
     8e8:	1f 92       	push	r1
     8ea:	0f 92       	push	r0
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	0f 92       	push	r0
     8f0:	11 24       	eor	r1, r1
     8f2:	2f 93       	push	r18
     8f4:	8f 93       	push	r24
     8f6:	9f 93       	push	r25
     8f8:	af 93       	push	r26
     8fa:	bf 93       	push	r27
     8fc:	ef 93       	push	r30
     8fe:	ff 93       	push	r31
     900:	ec ec       	ldi	r30, 0xCC	; 204
     902:	f3 e0       	ldi	r31, 0x03	; 3
     904:	80 81       	ld	r24, Z
     906:	91 81       	ldd	r25, Z+1	; 0x01
     908:	c2 96       	adiw	r24, 0x32	; 50
     90a:	91 83       	std	Z+1, r25	; 0x01
     90c:	80 83       	st	Z, r24
     90e:	80 81       	ld	r24, Z
     910:	91 81       	ldd	r25, Z+1	; 0x01
     912:	88 3e       	cpi	r24, 0xE8	; 232
     914:	93 40       	sbci	r25, 0x03	; 3
     916:	88 f0       	brcs	.+34     	; 0x93a <__vector_10+0x52>
     918:	82 81       	ldd	r24, Z+2	; 0x02
     91a:	93 81       	ldd	r25, Z+3	; 0x03
     91c:	a4 81       	ldd	r26, Z+4	; 0x04
     91e:	b5 81       	ldd	r27, Z+5	; 0x05
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	a1 1d       	adc	r26, r1
     924:	b1 1d       	adc	r27, r1
     926:	82 83       	std	Z+2, r24	; 0x02
     928:	93 83       	std	Z+3, r25	; 0x03
     92a:	a4 83       	std	Z+4, r26	; 0x04
     92c:	b5 83       	std	Z+5, r27	; 0x05
     92e:	80 81       	ld	r24, Z
     930:	91 81       	ldd	r25, Z+1	; 0x01
     932:	88 5e       	subi	r24, 0xE8	; 232
     934:	93 40       	sbci	r25, 0x03	; 3
     936:	91 83       	std	Z+1, r25	; 0x01
     938:	80 83       	st	Z, r24
     93a:	ff 91       	pop	r31
     93c:	ef 91       	pop	r30
     93e:	bf 91       	pop	r27
     940:	af 91       	pop	r26
     942:	9f 91       	pop	r25
     944:	8f 91       	pop	r24
     946:	2f 91       	pop	r18
     948:	0f 90       	pop	r0
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	0f 90       	pop	r0
     94e:	1f 90       	pop	r1
     950:	18 95       	reti

00000952 <timer0_init>:
     952:	93 b7       	in	r25, 0x33	; 51
     954:	98 60       	ori	r25, 0x08	; 8
     956:	93 bf       	out	0x33, r25	; 51
     958:	6c bf       	out	0x3c, r22	; 60
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	99 f0       	breq	.+38     	; 0x984 <timer0_init+0x32>
     95e:	28 f4       	brcc	.+10     	; 0x96a <timer0_init+0x18>
     960:	88 23       	and	r24, r24
     962:	41 f0       	breq	.+16     	; 0x974 <timer0_init+0x22>
     964:	81 30       	cpi	r24, 0x01	; 1
     966:	51 f0       	breq	.+20     	; 0x97c <timer0_init+0x2a>
     968:	19 c0       	rjmp	.+50     	; 0x99c <timer0_init+0x4a>
     96a:	83 30       	cpi	r24, 0x03	; 3
     96c:	79 f0       	breq	.+30     	; 0x98c <timer0_init+0x3a>
     96e:	84 30       	cpi	r24, 0x04	; 4
     970:	89 f0       	breq	.+34     	; 0x994 <timer0_init+0x42>
     972:	14 c0       	rjmp	.+40     	; 0x99c <timer0_init+0x4a>
     974:	83 b7       	in	r24, 0x33	; 51
     976:	81 60       	ori	r24, 0x01	; 1
     978:	83 bf       	out	0x33, r24	; 51
     97a:	13 c0       	rjmp	.+38     	; 0x9a2 <timer0_init+0x50>
     97c:	83 b7       	in	r24, 0x33	; 51
     97e:	82 60       	ori	r24, 0x02	; 2
     980:	83 bf       	out	0x33, r24	; 51
     982:	0f c0       	rjmp	.+30     	; 0x9a2 <timer0_init+0x50>
     984:	83 b7       	in	r24, 0x33	; 51
     986:	83 60       	ori	r24, 0x03	; 3
     988:	83 bf       	out	0x33, r24	; 51
     98a:	0b c0       	rjmp	.+22     	; 0x9a2 <timer0_init+0x50>
     98c:	83 b7       	in	r24, 0x33	; 51
     98e:	84 60       	ori	r24, 0x04	; 4
     990:	83 bf       	out	0x33, r24	; 51
     992:	07 c0       	rjmp	.+14     	; 0x9a2 <timer0_init+0x50>
     994:	83 b7       	in	r24, 0x33	; 51
     996:	85 60       	ori	r24, 0x05	; 5
     998:	83 bf       	out	0x33, r24	; 51
     99a:	03 c0       	rjmp	.+6      	; 0x9a2 <timer0_init+0x50>
     99c:	83 b7       	in	r24, 0x33	; 51
     99e:	81 60       	ori	r24, 0x01	; 1
     9a0:	83 bf       	out	0x33, r24	; 51
     9a2:	89 b7       	in	r24, 0x39	; 57
     9a4:	82 60       	ori	r24, 0x02	; 2
     9a6:	89 bf       	out	0x39, r24	; 57
     9a8:	08 95       	ret

000009aa <evTime_init>:
     9aa:	23 e0       	ldi	r18, 0x03	; 3
     9ac:	fc 01       	movw	r30, r24
     9ae:	24 83       	std	Z+4, r18	; 0x04
     9b0:	10 82       	st	Z, r1
     9b2:	11 82       	std	Z+1, r1	; 0x01
     9b4:	12 82       	std	Z+2, r1	; 0x02
     9b6:	13 82       	std	Z+3, r1	; 0x03
     9b8:	08 95       	ret

000009ba <evTime_start>:
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	21 e0       	ldi	r18, 0x01	; 1
     9c0:	fc 01       	movw	r30, r24
     9c2:	24 83       	std	Z+4, r18	; 0x04
     9c4:	00 91 ce 03 	lds	r16, 0x03CE	; 0x8003ce <mktime+0x2>
     9c8:	10 91 cf 03 	lds	r17, 0x03CF	; 0x8003cf <mktime+0x3>
     9cc:	20 91 d0 03 	lds	r18, 0x03D0	; 0x8003d0 <mktime+0x4>
     9d0:	30 91 d1 03 	lds	r19, 0x03D1	; 0x8003d1 <mktime+0x5>
     9d4:	40 0f       	add	r20, r16
     9d6:	51 1f       	adc	r21, r17
     9d8:	62 1f       	adc	r22, r18
     9da:	73 1f       	adc	r23, r19
     9dc:	40 83       	st	Z, r20
     9de:	51 83       	std	Z+1, r21	; 0x01
     9e0:	62 83       	std	Z+2, r22	; 0x02
     9e2:	73 83       	std	Z+3, r23	; 0x03
     9e4:	1f 91       	pop	r17
     9e6:	0f 91       	pop	r16
     9e8:	08 95       	ret

000009ea <evTime_check>:

int evTime_check(evTime * evt)
{
     9ea:	fc 01       	movw	r30, r24
	if (evt->time_state == TIMER_START)
     9ec:	84 81       	ldd	r24, Z+4	; 0x04
     9ee:	81 30       	cpi	r24, 0x01	; 1
     9f0:	b1 f4       	brne	.+44     	; 0xa1e <evTime_check+0x34>
	{
		if (evt->timer < mktime.ms) 
     9f2:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <mktime+0x2>
     9f6:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <mktime+0x3>
     9fa:	a0 91 d0 03 	lds	r26, 0x03D0	; 0x8003d0 <mktime+0x4>
     9fe:	b0 91 d1 03 	lds	r27, 0x03D1	; 0x8003d1 <mktime+0x5>
     a02:	40 81       	ld	r20, Z
     a04:	51 81       	ldd	r21, Z+1	; 0x01
     a06:	62 81       	ldd	r22, Z+2	; 0x02
     a08:	73 81       	ldd	r23, Z+3	; 0x03
     a0a:	48 17       	cp	r20, r24
     a0c:	59 07       	cpc	r21, r25
     a0e:	6a 07       	cpc	r22, r26
     a10:	7b 07       	cpc	r23, r27
     a12:	40 f4       	brcc	.+16     	; 0xa24 <evTime_check+0x3a>
		{
			evt->time_state = TIMER_END;
     a14:	82 e0       	ldi	r24, 0x02	; 2
     a16:	84 83       	std	Z+4, r24	; 0x04
			return 1;
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	08 95       	ret
		}
		else return 0;
	}
	else return -1;
     a1e:	8f ef       	ldi	r24, 0xFF	; 255
     a20:	9f ef       	ldi	r25, 0xFF	; 255
     a22:	08 95       	ret
		if (evt->timer < mktime.ms) 
		{
			evt->time_state = TIMER_END;
			return 1;
		}
		else return 0;
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
	}
	else return -1;
}
     a28:	08 95       	ret

00000a2a <evTime_off>:

int evTime_off(evTime * evt)
{
	return evt->time_state == TIMER_OFF;
     a2a:	21 e0       	ldi	r18, 0x01	; 1
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	fc 01       	movw	r30, r24
     a30:	84 81       	ldd	r24, Z+4	; 0x04
     a32:	83 30       	cpi	r24, 0x03	; 3
     a34:	11 f0       	breq	.+4      	; 0xa3a <evTime_off+0x10>
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
}
     a3a:	c9 01       	movw	r24, r18
     a3c:	08 95       	ret

00000a3e <evTime_process_period>:

int evTime_process_period(evTime * timer, uint32_t period)
{
     a3e:	cf 92       	push	r12
     a40:	df 92       	push	r13
     a42:	ef 92       	push	r14
     a44:	ff 92       	push	r15
     a46:	0f 93       	push	r16
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	ec 01       	movw	r28, r24
     a50:	6a 01       	movw	r12, r20
     a52:	7b 01       	movw	r14, r22
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
     a54:	8c 81       	ldd	r24, Y+4	; 0x04
     a56:	81 11       	cpse	r24, r1
     a58:	06 c0       	rjmp	.+12     	; 0xa66 <evTime_process_period+0x28>
	#endif
}

void evTime_init(evTime * evt)
{
	evt->time_state = TIMER_OFF;
     a5a:	83 e0       	ldi	r24, 0x03	; 3
     a5c:	8c 83       	std	Y+4, r24	; 0x04
	evt->timer = 0;
     a5e:	18 82       	st	Y, r1
     a60:	19 82       	std	Y+1, r1	; 0x01
     a62:	1a 82       	std	Y+2, r1	; 0x02
     a64:	1b 82       	std	Y+3, r1	; 0x03

int evTime_process_period(evTime * timer, uint32_t period)
{
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
	ret_val = evTime_check(timer);
     a66:	ce 01       	movw	r24, r28
     a68:	0e 94 f5 04 	call	0x9ea	; 0x9ea <evTime_check>
     a6c:	8c 01       	movw	r16, r24
	if (ret_val == 1)
     a6e:	01 97       	sbiw	r24, 0x01	; 1
     a70:	31 f4       	brne	.+12     	; 0xa7e <evTime_process_period+0x40>
	{
		evTime_start(timer, period);
     a72:	b7 01       	movw	r22, r14
     a74:	a6 01       	movw	r20, r12
     a76:	ce 01       	movw	r24, r28
     a78:	0e 94 dd 04 	call	0x9ba	; 0x9ba <evTime_start>
		return 1;
     a7c:	0d c0       	rjmp	.+26     	; 0xa98 <evTime_process_period+0x5a>
	}
	else if (evTime_off(timer))
     a7e:	8c 81       	ldd	r24, Y+4	; 0x04
     a80:	83 30       	cpi	r24, 0x03	; 3
     a82:	41 f4       	brne	.+16     	; 0xa94 <evTime_process_period+0x56>
	{
		evTime_start(timer, period);
     a84:	b7 01       	movw	r22, r14
     a86:	a6 01       	movw	r20, r12
     a88:	ce 01       	movw	r24, r28
     a8a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <evTime_start>
	}
	return 0;
     a8e:	00 e0       	ldi	r16, 0x00	; 0
     a90:	10 e0       	ldi	r17, 0x00	; 0
     a92:	02 c0       	rjmp	.+4      	; 0xa98 <evTime_process_period+0x5a>
     a94:	00 e0       	ldi	r16, 0x00	; 0
     a96:	10 e0       	ldi	r17, 0x00	; 0
}
     a98:	c8 01       	movw	r24, r16
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	df 90       	pop	r13
     aa8:	cf 90       	pop	r12
     aaa:	08 95       	ret

00000aac <__vector_13>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
     aac:	1f 92       	push	r1
     aae:	0f 92       	push	r0
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	0f 92       	push	r0
     ab4:	11 24       	eor	r1, r1
     ab6:	2f 93       	push	r18
     ab8:	3f 93       	push	r19
     aba:	4f 93       	push	r20
     abc:	5f 93       	push	r21
     abe:	8f 93       	push	r24
     ac0:	9f 93       	push	r25
     ac2:	ef 93       	push	r30
     ac4:	ff 93       	push	r31
     ac6:	2b b1       	in	r18, 0x0b	; 11
     ac8:	3c b1       	in	r19, 0x0c	; 12
     aca:	28 71       	andi	r18, 0x18	; 24
     acc:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <UART_RxHead>
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	01 96       	adiw	r24, 0x01	; 1
     ad4:	8f 77       	andi	r24, 0x7F	; 127
     ad6:	99 27       	eor	r25, r25
     ad8:	40 91 6c 01 	lds	r20, 0x016C	; 0x80016c <UART_RxTail>
     adc:	50 e0       	ldi	r21, 0x00	; 0
     ade:	84 17       	cp	r24, r20
     ae0:	95 07       	cpc	r25, r21
     ae2:	39 f0       	breq	.+14     	; 0xaf2 <__vector_13+0x46>
     ae4:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <UART_RxHead>
     ae8:	fc 01       	movw	r30, r24
     aea:	e0 59       	subi	r30, 0x90	; 144
     aec:	fe 4f       	sbci	r31, 0xFE	; 254
     aee:	30 83       	st	Z, r19
     af0:	01 c0       	rjmp	.+2      	; 0xaf4 <__vector_13+0x48>
     af2:	22 e0       	ldi	r18, 0x02	; 2
     af4:	20 93 6b 01 	sts	0x016B, r18	; 0x80016b <UART_LastRxError>
     af8:	ff 91       	pop	r31
     afa:	ef 91       	pop	r30
     afc:	9f 91       	pop	r25
     afe:	8f 91       	pop	r24
     b00:	5f 91       	pop	r21
     b02:	4f 91       	pop	r20
     b04:	3f 91       	pop	r19
     b06:	2f 91       	pop	r18
     b08:	0f 90       	pop	r0
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	0f 90       	pop	r0
     b0e:	1f 90       	pop	r1
     b10:	18 95       	reti

00000b12 <__vector_14>:
     b12:	1f 92       	push	r1
     b14:	0f 92       	push	r0
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	0f 92       	push	r0
     b1a:	11 24       	eor	r1, r1
     b1c:	8f 93       	push	r24
     b1e:	9f 93       	push	r25
     b20:	ef 93       	push	r30
     b22:	ff 93       	push	r31
     b24:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <UART_TxHead>
     b28:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <UART_TxTail>
     b2c:	98 17       	cp	r25, r24
     b2e:	71 f0       	breq	.+28     	; 0xb4c <__vector_14+0x3a>
     b30:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <UART_TxTail>
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	01 96       	adiw	r24, 0x01	; 1
     b38:	8f 77       	andi	r24, 0x7F	; 127
     b3a:	99 27       	eor	r25, r25
     b3c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <UART_TxTail>
     b40:	fc 01       	movw	r30, r24
     b42:	e0 51       	subi	r30, 0x10	; 16
     b44:	fe 4f       	sbci	r31, 0xFE	; 254
     b46:	80 81       	ld	r24, Z
     b48:	8c b9       	out	0x0c, r24	; 12
     b4a:	01 c0       	rjmp	.+2      	; 0xb4e <__vector_14+0x3c>
     b4c:	55 98       	cbi	0x0a, 5	; 10
     b4e:	ff 91       	pop	r31
     b50:	ef 91       	pop	r30
     b52:	9f 91       	pop	r25
     b54:	8f 91       	pop	r24
     b56:	0f 90       	pop	r0
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	0f 90       	pop	r0
     b5c:	1f 90       	pop	r1
     b5e:	18 95       	reti

00000b60 <uart0_init>:
     b60:	f8 94       	cli
     b62:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <UART_TxHead>
     b66:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <UART_TxTail>
     b6a:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <UART_RxHead>
     b6e:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <UART_RxTail>
     b72:	78 94       	sei
     b74:	99 23       	and	r25, r25
     b76:	1c f4       	brge	.+6      	; 0xb7e <uart0_init+0x1e>
     b78:	22 e0       	ldi	r18, 0x02	; 2
     b7a:	2b b9       	out	0x0b, r18	; 11
     b7c:	9f 77       	andi	r25, 0x7F	; 127
     b7e:	90 bd       	out	0x20, r25	; 32
     b80:	89 b9       	out	0x09, r24	; 9
     b82:	88 e9       	ldi	r24, 0x98	; 152
     b84:	8a b9       	out	0x0a, r24	; 10
     b86:	86 e8       	ldi	r24, 0x86	; 134
     b88:	80 bd       	out	0x20, r24	; 32
     b8a:	08 95       	ret

00000b8c <uart0_getc>:
     b8c:	f8 94       	cli
     b8e:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <UART_RxHead>
     b92:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <UART_RxTail>
     b96:	98 13       	cpse	r25, r24
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <uart0_getc+0x16>
     b9a:	78 94       	sei
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	08 95       	ret
     ba2:	78 94       	sei
     ba4:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <UART_RxTail>
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	8f 77       	andi	r24, 0x7F	; 127
     bae:	99 27       	eor	r25, r25
     bb0:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <UART_RxTail>
     bb4:	fc 01       	movw	r30, r24
     bb6:	e0 59       	subi	r30, 0x90	; 144
     bb8:	fe 4f       	sbci	r31, 0xFE	; 254
     bba:	20 81       	ld	r18, Z
     bbc:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <UART_LastRxError>
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	98 2f       	mov	r25, r24
     bc4:	88 27       	eor	r24, r24
     bc6:	82 0f       	add	r24, r18
     bc8:	91 1d       	adc	r25, r1
     bca:	08 95       	ret

00000bcc <uart0_putc>:
		}
	} while (tmphead == txtail_tmp); /* wait for free space in buffer */
#else
	uint16_t tmphead;
	
	tmphead = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
     bcc:	40 91 6f 01 	lds	r20, 0x016F	; 0x80016f <UART_TxHead>
     bd0:	50 e0       	ldi	r21, 0x00	; 0
     bd2:	4f 5f       	subi	r20, 0xFF	; 255
     bd4:	5f 4f       	sbci	r21, 0xFF	; 255
     bd6:	4f 77       	andi	r20, 0x7F	; 127
     bd8:	55 27       	eor	r21, r21
	
	while (tmphead == UART_TxTail); /* wait for free space in buffer */
     bda:	20 91 6e 01 	lds	r18, 0x016E	; 0x80016e <UART_TxTail>
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	42 17       	cp	r20, r18
     be2:	53 07       	cpc	r21, r19
     be4:	d1 f3       	breq	.-12     	; 0xbda <uart0_putc+0xe>
#endif

	UART_TxBuf[tmphead] = data;
     be6:	fa 01       	movw	r30, r20
     be8:	e0 51       	subi	r30, 0x10	; 16
     bea:	fe 4f       	sbci	r31, 0xFE	; 254
     bec:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
     bee:	40 93 6f 01 	sts	0x016F, r20	; 0x80016f <UART_TxHead>

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
     bf2:	55 9a       	sbi	0x0a, 5	; 10
     bf4:	08 95       	ret

00000bf6 <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	ec 01       	movw	r28, r24
	while (*s) {
     bfc:	88 81       	ld	r24, Y
     bfe:	88 23       	and	r24, r24
     c00:	31 f0       	breq	.+12     	; 0xc0e <uart0_puts+0x18>
     c02:	21 96       	adiw	r28, 0x01	; 1
		uart0_putc(*s++);
     c04:	0e 94 e6 05 	call	0xbcc	; 0xbcc <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
	while (*s) {
     c08:	89 91       	ld	r24, Y+
     c0a:	81 11       	cpse	r24, r1
     c0c:	fb cf       	rjmp	.-10     	; 0xc04 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	08 95       	ret

00000c14 <vfprintf>:
     c14:	a0 e1       	ldi	r26, 0x10	; 16
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e0 e1       	ldi	r30, 0x10	; 16
     c1a:	f6 e0       	ldi	r31, 0x06	; 6
     c1c:	0c 94 87 09 	jmp	0x130e	; 0x130e <__prologue_saves__>
     c20:	7c 01       	movw	r14, r24
     c22:	1b 01       	movw	r2, r22
     c24:	6a 01       	movw	r12, r20
     c26:	fc 01       	movw	r30, r24
     c28:	17 82       	std	Z+7, r1	; 0x07
     c2a:	16 82       	std	Z+6, r1	; 0x06
     c2c:	83 81       	ldd	r24, Z+3	; 0x03
     c2e:	81 ff       	sbrs	r24, 1
     c30:	44 c3       	rjmp	.+1672   	; 0x12ba <vfprintf+0x6a6>
     c32:	9e 01       	movw	r18, r28
     c34:	2f 5f       	subi	r18, 0xFF	; 255
     c36:	3f 4f       	sbci	r19, 0xFF	; 255
     c38:	39 01       	movw	r6, r18
     c3a:	f7 01       	movw	r30, r14
     c3c:	93 81       	ldd	r25, Z+3	; 0x03
     c3e:	f1 01       	movw	r30, r2
     c40:	93 fd       	sbrc	r25, 3
     c42:	85 91       	lpm	r24, Z+
     c44:	93 ff       	sbrs	r25, 3
     c46:	81 91       	ld	r24, Z+
     c48:	1f 01       	movw	r2, r30
     c4a:	88 23       	and	r24, r24
     c4c:	09 f4       	brne	.+2      	; 0xc50 <vfprintf+0x3c>
     c4e:	31 c3       	rjmp	.+1634   	; 0x12b2 <vfprintf+0x69e>
     c50:	85 32       	cpi	r24, 0x25	; 37
     c52:	39 f4       	brne	.+14     	; 0xc62 <vfprintf+0x4e>
     c54:	93 fd       	sbrc	r25, 3
     c56:	85 91       	lpm	r24, Z+
     c58:	93 ff       	sbrs	r25, 3
     c5a:	81 91       	ld	r24, Z+
     c5c:	1f 01       	movw	r2, r30
     c5e:	85 32       	cpi	r24, 0x25	; 37
     c60:	39 f4       	brne	.+14     	; 0xc70 <vfprintf+0x5c>
     c62:	b7 01       	movw	r22, r14
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
     c6a:	56 01       	movw	r10, r12
     c6c:	65 01       	movw	r12, r10
     c6e:	e5 cf       	rjmp	.-54     	; 0xc3a <vfprintf+0x26>
     c70:	10 e0       	ldi	r17, 0x00	; 0
     c72:	51 2c       	mov	r5, r1
     c74:	91 2c       	mov	r9, r1
     c76:	ff e1       	ldi	r31, 0x1F	; 31
     c78:	f9 15       	cp	r31, r9
     c7a:	d8 f0       	brcs	.+54     	; 0xcb2 <vfprintf+0x9e>
     c7c:	8b 32       	cpi	r24, 0x2B	; 43
     c7e:	79 f0       	breq	.+30     	; 0xc9e <vfprintf+0x8a>
     c80:	38 f4       	brcc	.+14     	; 0xc90 <vfprintf+0x7c>
     c82:	80 32       	cpi	r24, 0x20	; 32
     c84:	79 f0       	breq	.+30     	; 0xca4 <vfprintf+0x90>
     c86:	83 32       	cpi	r24, 0x23	; 35
     c88:	a1 f4       	brne	.+40     	; 0xcb2 <vfprintf+0x9e>
     c8a:	f9 2d       	mov	r31, r9
     c8c:	f0 61       	ori	r31, 0x10	; 16
     c8e:	2e c0       	rjmp	.+92     	; 0xcec <vfprintf+0xd8>
     c90:	8d 32       	cpi	r24, 0x2D	; 45
     c92:	61 f0       	breq	.+24     	; 0xcac <vfprintf+0x98>
     c94:	80 33       	cpi	r24, 0x30	; 48
     c96:	69 f4       	brne	.+26     	; 0xcb2 <vfprintf+0x9e>
     c98:	29 2d       	mov	r18, r9
     c9a:	21 60       	ori	r18, 0x01	; 1
     c9c:	2d c0       	rjmp	.+90     	; 0xcf8 <vfprintf+0xe4>
     c9e:	39 2d       	mov	r19, r9
     ca0:	32 60       	ori	r19, 0x02	; 2
     ca2:	93 2e       	mov	r9, r19
     ca4:	89 2d       	mov	r24, r9
     ca6:	84 60       	ori	r24, 0x04	; 4
     ca8:	98 2e       	mov	r9, r24
     caa:	2a c0       	rjmp	.+84     	; 0xd00 <vfprintf+0xec>
     cac:	e9 2d       	mov	r30, r9
     cae:	e8 60       	ori	r30, 0x08	; 8
     cb0:	15 c0       	rjmp	.+42     	; 0xcdc <vfprintf+0xc8>
     cb2:	97 fc       	sbrc	r9, 7
     cb4:	2d c0       	rjmp	.+90     	; 0xd10 <vfprintf+0xfc>
     cb6:	20 ed       	ldi	r18, 0xD0	; 208
     cb8:	28 0f       	add	r18, r24
     cba:	2a 30       	cpi	r18, 0x0A	; 10
     cbc:	88 f4       	brcc	.+34     	; 0xce0 <vfprintf+0xcc>
     cbe:	96 fe       	sbrs	r9, 6
     cc0:	06 c0       	rjmp	.+12     	; 0xcce <vfprintf+0xba>
     cc2:	3a e0       	ldi	r19, 0x0A	; 10
     cc4:	13 9f       	mul	r17, r19
     cc6:	20 0d       	add	r18, r0
     cc8:	11 24       	eor	r1, r1
     cca:	12 2f       	mov	r17, r18
     ccc:	19 c0       	rjmp	.+50     	; 0xd00 <vfprintf+0xec>
     cce:	8a e0       	ldi	r24, 0x0A	; 10
     cd0:	58 9e       	mul	r5, r24
     cd2:	20 0d       	add	r18, r0
     cd4:	11 24       	eor	r1, r1
     cd6:	52 2e       	mov	r5, r18
     cd8:	e9 2d       	mov	r30, r9
     cda:	e0 62       	ori	r30, 0x20	; 32
     cdc:	9e 2e       	mov	r9, r30
     cde:	10 c0       	rjmp	.+32     	; 0xd00 <vfprintf+0xec>
     ce0:	8e 32       	cpi	r24, 0x2E	; 46
     ce2:	31 f4       	brne	.+12     	; 0xcf0 <vfprintf+0xdc>
     ce4:	96 fc       	sbrc	r9, 6
     ce6:	e5 c2       	rjmp	.+1482   	; 0x12b2 <vfprintf+0x69e>
     ce8:	f9 2d       	mov	r31, r9
     cea:	f0 64       	ori	r31, 0x40	; 64
     cec:	9f 2e       	mov	r9, r31
     cee:	08 c0       	rjmp	.+16     	; 0xd00 <vfprintf+0xec>
     cf0:	8c 36       	cpi	r24, 0x6C	; 108
     cf2:	21 f4       	brne	.+8      	; 0xcfc <vfprintf+0xe8>
     cf4:	29 2d       	mov	r18, r9
     cf6:	20 68       	ori	r18, 0x80	; 128
     cf8:	92 2e       	mov	r9, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <vfprintf+0xec>
     cfc:	88 36       	cpi	r24, 0x68	; 104
     cfe:	41 f4       	brne	.+16     	; 0xd10 <vfprintf+0xfc>
     d00:	f1 01       	movw	r30, r2
     d02:	93 fd       	sbrc	r25, 3
     d04:	85 91       	lpm	r24, Z+
     d06:	93 ff       	sbrs	r25, 3
     d08:	81 91       	ld	r24, Z+
     d0a:	1f 01       	movw	r2, r30
     d0c:	81 11       	cpse	r24, r1
     d0e:	b3 cf       	rjmp	.-154    	; 0xc76 <vfprintf+0x62>
     d10:	9b eb       	ldi	r25, 0xBB	; 187
     d12:	98 0f       	add	r25, r24
     d14:	93 30       	cpi	r25, 0x03	; 3
     d16:	20 f4       	brcc	.+8      	; 0xd20 <vfprintf+0x10c>
     d18:	99 2d       	mov	r25, r9
     d1a:	90 61       	ori	r25, 0x10	; 16
     d1c:	80 5e       	subi	r24, 0xE0	; 224
     d1e:	07 c0       	rjmp	.+14     	; 0xd2e <vfprintf+0x11a>
     d20:	9b e9       	ldi	r25, 0x9B	; 155
     d22:	98 0f       	add	r25, r24
     d24:	93 30       	cpi	r25, 0x03	; 3
     d26:	08 f0       	brcs	.+2      	; 0xd2a <vfprintf+0x116>
     d28:	66 c1       	rjmp	.+716    	; 0xff6 <vfprintf+0x3e2>
     d2a:	99 2d       	mov	r25, r9
     d2c:	9f 7e       	andi	r25, 0xEF	; 239
     d2e:	96 ff       	sbrs	r25, 6
     d30:	16 e0       	ldi	r17, 0x06	; 6
     d32:	9f 73       	andi	r25, 0x3F	; 63
     d34:	99 2e       	mov	r9, r25
     d36:	85 36       	cpi	r24, 0x65	; 101
     d38:	19 f4       	brne	.+6      	; 0xd40 <vfprintf+0x12c>
     d3a:	90 64       	ori	r25, 0x40	; 64
     d3c:	99 2e       	mov	r9, r25
     d3e:	08 c0       	rjmp	.+16     	; 0xd50 <vfprintf+0x13c>
     d40:	86 36       	cpi	r24, 0x66	; 102
     d42:	21 f4       	brne	.+8      	; 0xd4c <vfprintf+0x138>
     d44:	39 2f       	mov	r19, r25
     d46:	30 68       	ori	r19, 0x80	; 128
     d48:	93 2e       	mov	r9, r19
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <vfprintf+0x13c>
     d4c:	11 11       	cpse	r17, r1
     d4e:	11 50       	subi	r17, 0x01	; 1
     d50:	97 fe       	sbrs	r9, 7
     d52:	07 c0       	rjmp	.+14     	; 0xd62 <vfprintf+0x14e>
     d54:	1c 33       	cpi	r17, 0x3C	; 60
     d56:	50 f4       	brcc	.+20     	; 0xd6c <vfprintf+0x158>
     d58:	44 24       	eor	r4, r4
     d5a:	43 94       	inc	r4
     d5c:	41 0e       	add	r4, r17
     d5e:	27 e0       	ldi	r18, 0x07	; 7
     d60:	0b c0       	rjmp	.+22     	; 0xd78 <vfprintf+0x164>
     d62:	18 30       	cpi	r17, 0x08	; 8
     d64:	38 f0       	brcs	.+14     	; 0xd74 <vfprintf+0x160>
     d66:	27 e0       	ldi	r18, 0x07	; 7
     d68:	17 e0       	ldi	r17, 0x07	; 7
     d6a:	05 c0       	rjmp	.+10     	; 0xd76 <vfprintf+0x162>
     d6c:	27 e0       	ldi	r18, 0x07	; 7
     d6e:	9c e3       	ldi	r25, 0x3C	; 60
     d70:	49 2e       	mov	r4, r25
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <vfprintf+0x164>
     d74:	21 2f       	mov	r18, r17
     d76:	41 2c       	mov	r4, r1
     d78:	56 01       	movw	r10, r12
     d7a:	84 e0       	ldi	r24, 0x04	; 4
     d7c:	a8 0e       	add	r10, r24
     d7e:	b1 1c       	adc	r11, r1
     d80:	f6 01       	movw	r30, r12
     d82:	60 81       	ld	r22, Z
     d84:	71 81       	ldd	r23, Z+1	; 0x01
     d86:	82 81       	ldd	r24, Z+2	; 0x02
     d88:	93 81       	ldd	r25, Z+3	; 0x03
     d8a:	04 2d       	mov	r16, r4
     d8c:	a3 01       	movw	r20, r6
     d8e:	0e 94 be 09 	call	0x137c	; 0x137c <__ftoa_engine>
     d92:	6c 01       	movw	r12, r24
     d94:	f9 81       	ldd	r31, Y+1	; 0x01
     d96:	fc 87       	std	Y+12, r31	; 0x0c
     d98:	f0 ff       	sbrs	r31, 0
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <vfprintf+0x18c>
     d9c:	f3 ff       	sbrs	r31, 3
     d9e:	06 c0       	rjmp	.+12     	; 0xdac <vfprintf+0x198>
     da0:	91 fc       	sbrc	r9, 1
     da2:	06 c0       	rjmp	.+12     	; 0xdb0 <vfprintf+0x19c>
     da4:	92 fe       	sbrs	r9, 2
     da6:	06 c0       	rjmp	.+12     	; 0xdb4 <vfprintf+0x1a0>
     da8:	00 e2       	ldi	r16, 0x20	; 32
     daa:	05 c0       	rjmp	.+10     	; 0xdb6 <vfprintf+0x1a2>
     dac:	0d e2       	ldi	r16, 0x2D	; 45
     dae:	03 c0       	rjmp	.+6      	; 0xdb6 <vfprintf+0x1a2>
     db0:	0b e2       	ldi	r16, 0x2B	; 43
     db2:	01 c0       	rjmp	.+2      	; 0xdb6 <vfprintf+0x1a2>
     db4:	00 e0       	ldi	r16, 0x00	; 0
     db6:	8c 85       	ldd	r24, Y+12	; 0x0c
     db8:	8c 70       	andi	r24, 0x0C	; 12
     dba:	19 f0       	breq	.+6      	; 0xdc2 <vfprintf+0x1ae>
     dbc:	01 11       	cpse	r16, r1
     dbe:	5a c2       	rjmp	.+1204   	; 0x1274 <vfprintf+0x660>
     dc0:	9b c2       	rjmp	.+1334   	; 0x12f8 <vfprintf+0x6e4>
     dc2:	97 fe       	sbrs	r9, 7
     dc4:	10 c0       	rjmp	.+32     	; 0xde6 <vfprintf+0x1d2>
     dc6:	4c 0c       	add	r4, r12
     dc8:	fc 85       	ldd	r31, Y+12	; 0x0c
     dca:	f4 ff       	sbrs	r31, 4
     dcc:	04 c0       	rjmp	.+8      	; 0xdd6 <vfprintf+0x1c2>
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	81 33       	cpi	r24, 0x31	; 49
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <vfprintf+0x1c2>
     dd4:	4a 94       	dec	r4
     dd6:	14 14       	cp	r1, r4
     dd8:	74 f5       	brge	.+92     	; 0xe36 <vfprintf+0x222>
     dda:	28 e0       	ldi	r18, 0x08	; 8
     ddc:	24 15       	cp	r18, r4
     dde:	78 f5       	brcc	.+94     	; 0xe3e <vfprintf+0x22a>
     de0:	88 e0       	ldi	r24, 0x08	; 8
     de2:	48 2e       	mov	r4, r24
     de4:	2c c0       	rjmp	.+88     	; 0xe3e <vfprintf+0x22a>
     de6:	96 fc       	sbrc	r9, 6
     de8:	2a c0       	rjmp	.+84     	; 0xe3e <vfprintf+0x22a>
     dea:	81 2f       	mov	r24, r17
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	8c 15       	cp	r24, r12
     df0:	9d 05       	cpc	r25, r13
     df2:	9c f0       	brlt	.+38     	; 0xe1a <vfprintf+0x206>
     df4:	3c ef       	ldi	r19, 0xFC	; 252
     df6:	c3 16       	cp	r12, r19
     df8:	3f ef       	ldi	r19, 0xFF	; 255
     dfa:	d3 06       	cpc	r13, r19
     dfc:	74 f0       	brlt	.+28     	; 0xe1a <vfprintf+0x206>
     dfe:	89 2d       	mov	r24, r9
     e00:	80 68       	ori	r24, 0x80	; 128
     e02:	98 2e       	mov	r9, r24
     e04:	0a c0       	rjmp	.+20     	; 0xe1a <vfprintf+0x206>
     e06:	e2 e0       	ldi	r30, 0x02	; 2
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	ec 0f       	add	r30, r28
     e0c:	fd 1f       	adc	r31, r29
     e0e:	e1 0f       	add	r30, r17
     e10:	f1 1d       	adc	r31, r1
     e12:	80 81       	ld	r24, Z
     e14:	80 33       	cpi	r24, 0x30	; 48
     e16:	19 f4       	brne	.+6      	; 0xe1e <vfprintf+0x20a>
     e18:	11 50       	subi	r17, 0x01	; 1
     e1a:	11 11       	cpse	r17, r1
     e1c:	f4 cf       	rjmp	.-24     	; 0xe06 <vfprintf+0x1f2>
     e1e:	97 fe       	sbrs	r9, 7
     e20:	0e c0       	rjmp	.+28     	; 0xe3e <vfprintf+0x22a>
     e22:	44 24       	eor	r4, r4
     e24:	43 94       	inc	r4
     e26:	41 0e       	add	r4, r17
     e28:	81 2f       	mov	r24, r17
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	c8 16       	cp	r12, r24
     e2e:	d9 06       	cpc	r13, r25
     e30:	2c f4       	brge	.+10     	; 0xe3c <vfprintf+0x228>
     e32:	1c 19       	sub	r17, r12
     e34:	04 c0       	rjmp	.+8      	; 0xe3e <vfprintf+0x22a>
     e36:	44 24       	eor	r4, r4
     e38:	43 94       	inc	r4
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <vfprintf+0x22a>
     e3c:	10 e0       	ldi	r17, 0x00	; 0
     e3e:	97 fe       	sbrs	r9, 7
     e40:	06 c0       	rjmp	.+12     	; 0xe4e <vfprintf+0x23a>
     e42:	1c 14       	cp	r1, r12
     e44:	1d 04       	cpc	r1, r13
     e46:	34 f4       	brge	.+12     	; 0xe54 <vfprintf+0x240>
     e48:	c6 01       	movw	r24, r12
     e4a:	01 96       	adiw	r24, 0x01	; 1
     e4c:	05 c0       	rjmp	.+10     	; 0xe58 <vfprintf+0x244>
     e4e:	85 e0       	ldi	r24, 0x05	; 5
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <vfprintf+0x244>
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	01 11       	cpse	r16, r1
     e5a:	01 96       	adiw	r24, 0x01	; 1
     e5c:	11 23       	and	r17, r17
     e5e:	31 f0       	breq	.+12     	; 0xe6c <vfprintf+0x258>
     e60:	21 2f       	mov	r18, r17
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	2f 5f       	subi	r18, 0xFF	; 255
     e66:	3f 4f       	sbci	r19, 0xFF	; 255
     e68:	82 0f       	add	r24, r18
     e6a:	93 1f       	adc	r25, r19
     e6c:	25 2d       	mov	r18, r5
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	82 17       	cp	r24, r18
     e72:	93 07       	cpc	r25, r19
     e74:	14 f4       	brge	.+4      	; 0xe7a <vfprintf+0x266>
     e76:	58 1a       	sub	r5, r24
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <vfprintf+0x268>
     e7a:	51 2c       	mov	r5, r1
     e7c:	89 2d       	mov	r24, r9
     e7e:	89 70       	andi	r24, 0x09	; 9
     e80:	49 f4       	brne	.+18     	; 0xe94 <vfprintf+0x280>
     e82:	55 20       	and	r5, r5
     e84:	39 f0       	breq	.+14     	; 0xe94 <vfprintf+0x280>
     e86:	b7 01       	movw	r22, r14
     e88:	80 e2       	ldi	r24, 0x20	; 32
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
     e90:	5a 94       	dec	r5
     e92:	f7 cf       	rjmp	.-18     	; 0xe82 <vfprintf+0x26e>
     e94:	00 23       	and	r16, r16
     e96:	29 f0       	breq	.+10     	; 0xea2 <vfprintf+0x28e>
     e98:	b7 01       	movw	r22, r14
     e9a:	80 2f       	mov	r24, r16
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
     ea2:	93 fc       	sbrc	r9, 3
     ea4:	09 c0       	rjmp	.+18     	; 0xeb8 <vfprintf+0x2a4>
     ea6:	55 20       	and	r5, r5
     ea8:	39 f0       	breq	.+14     	; 0xeb8 <vfprintf+0x2a4>
     eaa:	b7 01       	movw	r22, r14
     eac:	80 e3       	ldi	r24, 0x30	; 48
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
     eb4:	5a 94       	dec	r5
     eb6:	f7 cf       	rjmp	.-18     	; 0xea6 <vfprintf+0x292>
     eb8:	97 fe       	sbrs	r9, 7
     eba:	4c c0       	rjmp	.+152    	; 0xf54 <vfprintf+0x340>
     ebc:	46 01       	movw	r8, r12
     ebe:	d7 fe       	sbrs	r13, 7
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <vfprintf+0x2b2>
     ec2:	81 2c       	mov	r8, r1
     ec4:	91 2c       	mov	r9, r1
     ec6:	c6 01       	movw	r24, r12
     ec8:	88 19       	sub	r24, r8
     eca:	99 09       	sbc	r25, r9
     ecc:	f3 01       	movw	r30, r6
     ece:	e8 0f       	add	r30, r24
     ed0:	f9 1f       	adc	r31, r25
     ed2:	fe 87       	std	Y+14, r31	; 0x0e
     ed4:	ed 87       	std	Y+13, r30	; 0x0d
     ed6:	96 01       	movw	r18, r12
     ed8:	24 19       	sub	r18, r4
     eda:	31 09       	sbc	r19, r1
     edc:	38 8b       	std	Y+16, r19	; 0x10
     ede:	2f 87       	std	Y+15, r18	; 0x0f
     ee0:	01 2f       	mov	r16, r17
     ee2:	10 e0       	ldi	r17, 0x00	; 0
     ee4:	11 95       	neg	r17
     ee6:	01 95       	neg	r16
     ee8:	11 09       	sbc	r17, r1
     eea:	3f ef       	ldi	r19, 0xFF	; 255
     eec:	83 16       	cp	r8, r19
     eee:	93 06       	cpc	r9, r19
     ef0:	29 f4       	brne	.+10     	; 0xefc <vfprintf+0x2e8>
     ef2:	b7 01       	movw	r22, r14
     ef4:	8e e2       	ldi	r24, 0x2E	; 46
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
     efc:	c8 14       	cp	r12, r8
     efe:	d9 04       	cpc	r13, r9
     f00:	4c f0       	brlt	.+18     	; 0xf14 <vfprintf+0x300>
     f02:	8f 85       	ldd	r24, Y+15	; 0x0f
     f04:	98 89       	ldd	r25, Y+16	; 0x10
     f06:	88 15       	cp	r24, r8
     f08:	99 05       	cpc	r25, r9
     f0a:	24 f4       	brge	.+8      	; 0xf14 <vfprintf+0x300>
     f0c:	ed 85       	ldd	r30, Y+13	; 0x0d
     f0e:	fe 85       	ldd	r31, Y+14	; 0x0e
     f10:	81 81       	ldd	r24, Z+1	; 0x01
     f12:	01 c0       	rjmp	.+2      	; 0xf16 <vfprintf+0x302>
     f14:	80 e3       	ldi	r24, 0x30	; 48
     f16:	f1 e0       	ldi	r31, 0x01	; 1
     f18:	8f 1a       	sub	r8, r31
     f1a:	91 08       	sbc	r9, r1
     f1c:	2d 85       	ldd	r18, Y+13	; 0x0d
     f1e:	3e 85       	ldd	r19, Y+14	; 0x0e
     f20:	2f 5f       	subi	r18, 0xFF	; 255
     f22:	3f 4f       	sbci	r19, 0xFF	; 255
     f24:	3e 87       	std	Y+14, r19	; 0x0e
     f26:	2d 87       	std	Y+13, r18	; 0x0d
     f28:	80 16       	cp	r8, r16
     f2a:	91 06       	cpc	r9, r17
     f2c:	2c f0       	brlt	.+10     	; 0xf38 <vfprintf+0x324>
     f2e:	b7 01       	movw	r22, r14
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
     f36:	d9 cf       	rjmp	.-78     	; 0xeea <vfprintf+0x2d6>
     f38:	c8 14       	cp	r12, r8
     f3a:	d9 04       	cpc	r13, r9
     f3c:	41 f4       	brne	.+16     	; 0xf4e <vfprintf+0x33a>
     f3e:	9a 81       	ldd	r25, Y+2	; 0x02
     f40:	96 33       	cpi	r25, 0x36	; 54
     f42:	20 f4       	brcc	.+8      	; 0xf4c <vfprintf+0x338>
     f44:	95 33       	cpi	r25, 0x35	; 53
     f46:	19 f4       	brne	.+6      	; 0xf4e <vfprintf+0x33a>
     f48:	3c 85       	ldd	r19, Y+12	; 0x0c
     f4a:	34 ff       	sbrs	r19, 4
     f4c:	81 e3       	ldi	r24, 0x31	; 49
     f4e:	b7 01       	movw	r22, r14
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	4e c0       	rjmp	.+156    	; 0xff0 <vfprintf+0x3dc>
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	81 33       	cpi	r24, 0x31	; 49
     f58:	19 f0       	breq	.+6      	; 0xf60 <vfprintf+0x34c>
     f5a:	9c 85       	ldd	r25, Y+12	; 0x0c
     f5c:	9f 7e       	andi	r25, 0xEF	; 239
     f5e:	9c 87       	std	Y+12, r25	; 0x0c
     f60:	b7 01       	movw	r22, r14
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
     f68:	11 11       	cpse	r17, r1
     f6a:	05 c0       	rjmp	.+10     	; 0xf76 <vfprintf+0x362>
     f6c:	94 fc       	sbrc	r9, 4
     f6e:	18 c0       	rjmp	.+48     	; 0xfa0 <vfprintf+0x38c>
     f70:	85 e6       	ldi	r24, 0x65	; 101
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	17 c0       	rjmp	.+46     	; 0xfa4 <vfprintf+0x390>
     f76:	b7 01       	movw	r22, r14
     f78:	8e e2       	ldi	r24, 0x2E	; 46
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
     f80:	1e 5f       	subi	r17, 0xFE	; 254
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	01 e0       	ldi	r16, 0x01	; 1
     f86:	08 0f       	add	r16, r24
     f88:	f3 01       	movw	r30, r6
     f8a:	e8 0f       	add	r30, r24
     f8c:	f1 1d       	adc	r31, r1
     f8e:	80 81       	ld	r24, Z
     f90:	b7 01       	movw	r22, r14
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
     f98:	80 2f       	mov	r24, r16
     f9a:	01 13       	cpse	r16, r17
     f9c:	f3 cf       	rjmp	.-26     	; 0xf84 <vfprintf+0x370>
     f9e:	e6 cf       	rjmp	.-52     	; 0xf6c <vfprintf+0x358>
     fa0:	85 e4       	ldi	r24, 0x45	; 69
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	b7 01       	movw	r22, r14
     fa6:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
     faa:	d7 fc       	sbrc	r13, 7
     fac:	06 c0       	rjmp	.+12     	; 0xfba <vfprintf+0x3a6>
     fae:	c1 14       	cp	r12, r1
     fb0:	d1 04       	cpc	r13, r1
     fb2:	41 f4       	brne	.+16     	; 0xfc4 <vfprintf+0x3b0>
     fb4:	ec 85       	ldd	r30, Y+12	; 0x0c
     fb6:	e4 ff       	sbrs	r30, 4
     fb8:	05 c0       	rjmp	.+10     	; 0xfc4 <vfprintf+0x3b0>
     fba:	d1 94       	neg	r13
     fbc:	c1 94       	neg	r12
     fbe:	d1 08       	sbc	r13, r1
     fc0:	8d e2       	ldi	r24, 0x2D	; 45
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <vfprintf+0x3b2>
     fc4:	8b e2       	ldi	r24, 0x2B	; 43
     fc6:	b7 01       	movw	r22, r14
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
     fce:	80 e3       	ldi	r24, 0x30	; 48
     fd0:	2a e0       	ldi	r18, 0x0A	; 10
     fd2:	c2 16       	cp	r12, r18
     fd4:	d1 04       	cpc	r13, r1
     fd6:	2c f0       	brlt	.+10     	; 0xfe2 <vfprintf+0x3ce>
     fd8:	8f 5f       	subi	r24, 0xFF	; 255
     fda:	fa e0       	ldi	r31, 0x0A	; 10
     fdc:	cf 1a       	sub	r12, r31
     fde:	d1 08       	sbc	r13, r1
     fe0:	f7 cf       	rjmp	.-18     	; 0xfd0 <vfprintf+0x3bc>
     fe2:	b7 01       	movw	r22, r14
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
     fea:	b7 01       	movw	r22, r14
     fec:	c6 01       	movw	r24, r12
     fee:	c0 96       	adiw	r24, 0x30	; 48
     ff0:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
     ff4:	54 c1       	rjmp	.+680    	; 0x129e <vfprintf+0x68a>
     ff6:	83 36       	cpi	r24, 0x63	; 99
     ff8:	31 f0       	breq	.+12     	; 0x1006 <vfprintf+0x3f2>
     ffa:	83 37       	cpi	r24, 0x73	; 115
     ffc:	79 f0       	breq	.+30     	; 0x101c <vfprintf+0x408>
     ffe:	83 35       	cpi	r24, 0x53	; 83
    1000:	09 f0       	breq	.+2      	; 0x1004 <vfprintf+0x3f0>
    1002:	56 c0       	rjmp	.+172    	; 0x10b0 <vfprintf+0x49c>
    1004:	20 c0       	rjmp	.+64     	; 0x1046 <vfprintf+0x432>
    1006:	56 01       	movw	r10, r12
    1008:	32 e0       	ldi	r19, 0x02	; 2
    100a:	a3 0e       	add	r10, r19
    100c:	b1 1c       	adc	r11, r1
    100e:	f6 01       	movw	r30, r12
    1010:	80 81       	ld	r24, Z
    1012:	89 83       	std	Y+1, r24	; 0x01
    1014:	01 e0       	ldi	r16, 0x01	; 1
    1016:	10 e0       	ldi	r17, 0x00	; 0
    1018:	63 01       	movw	r12, r6
    101a:	12 c0       	rjmp	.+36     	; 0x1040 <vfprintf+0x42c>
    101c:	56 01       	movw	r10, r12
    101e:	f2 e0       	ldi	r31, 0x02	; 2
    1020:	af 0e       	add	r10, r31
    1022:	b1 1c       	adc	r11, r1
    1024:	f6 01       	movw	r30, r12
    1026:	c0 80       	ld	r12, Z
    1028:	d1 80       	ldd	r13, Z+1	; 0x01
    102a:	96 fe       	sbrs	r9, 6
    102c:	03 c0       	rjmp	.+6      	; 0x1034 <vfprintf+0x420>
    102e:	61 2f       	mov	r22, r17
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <vfprintf+0x424>
    1034:	6f ef       	ldi	r22, 0xFF	; 255
    1036:	7f ef       	ldi	r23, 0xFF	; 255
    1038:	c6 01       	movw	r24, r12
    103a:	0e 94 a1 0a 	call	0x1542	; 0x1542 <strnlen>
    103e:	8c 01       	movw	r16, r24
    1040:	f9 2d       	mov	r31, r9
    1042:	ff 77       	andi	r31, 0x7F	; 127
    1044:	14 c0       	rjmp	.+40     	; 0x106e <vfprintf+0x45a>
    1046:	56 01       	movw	r10, r12
    1048:	22 e0       	ldi	r18, 0x02	; 2
    104a:	a2 0e       	add	r10, r18
    104c:	b1 1c       	adc	r11, r1
    104e:	f6 01       	movw	r30, r12
    1050:	c0 80       	ld	r12, Z
    1052:	d1 80       	ldd	r13, Z+1	; 0x01
    1054:	96 fe       	sbrs	r9, 6
    1056:	03 c0       	rjmp	.+6      	; 0x105e <vfprintf+0x44a>
    1058:	61 2f       	mov	r22, r17
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <vfprintf+0x44e>
    105e:	6f ef       	ldi	r22, 0xFF	; 255
    1060:	7f ef       	ldi	r23, 0xFF	; 255
    1062:	c6 01       	movw	r24, r12
    1064:	0e 94 96 0a 	call	0x152c	; 0x152c <strnlen_P>
    1068:	8c 01       	movw	r16, r24
    106a:	f9 2d       	mov	r31, r9
    106c:	f0 68       	ori	r31, 0x80	; 128
    106e:	9f 2e       	mov	r9, r31
    1070:	f3 fd       	sbrc	r31, 3
    1072:	1a c0       	rjmp	.+52     	; 0x10a8 <vfprintf+0x494>
    1074:	85 2d       	mov	r24, r5
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	08 17       	cp	r16, r24
    107a:	19 07       	cpc	r17, r25
    107c:	a8 f4       	brcc	.+42     	; 0x10a8 <vfprintf+0x494>
    107e:	b7 01       	movw	r22, r14
    1080:	80 e2       	ldi	r24, 0x20	; 32
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
    1088:	5a 94       	dec	r5
    108a:	f4 cf       	rjmp	.-24     	; 0x1074 <vfprintf+0x460>
    108c:	f6 01       	movw	r30, r12
    108e:	97 fc       	sbrc	r9, 7
    1090:	85 91       	lpm	r24, Z+
    1092:	97 fe       	sbrs	r9, 7
    1094:	81 91       	ld	r24, Z+
    1096:	6f 01       	movw	r12, r30
    1098:	b7 01       	movw	r22, r14
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
    10a0:	51 10       	cpse	r5, r1
    10a2:	5a 94       	dec	r5
    10a4:	01 50       	subi	r16, 0x01	; 1
    10a6:	11 09       	sbc	r17, r1
    10a8:	01 15       	cp	r16, r1
    10aa:	11 05       	cpc	r17, r1
    10ac:	79 f7       	brne	.-34     	; 0x108c <vfprintf+0x478>
    10ae:	f7 c0       	rjmp	.+494    	; 0x129e <vfprintf+0x68a>
    10b0:	84 36       	cpi	r24, 0x64	; 100
    10b2:	11 f0       	breq	.+4      	; 0x10b8 <vfprintf+0x4a4>
    10b4:	89 36       	cpi	r24, 0x69	; 105
    10b6:	61 f5       	brne	.+88     	; 0x1110 <vfprintf+0x4fc>
    10b8:	56 01       	movw	r10, r12
    10ba:	97 fe       	sbrs	r9, 7
    10bc:	09 c0       	rjmp	.+18     	; 0x10d0 <vfprintf+0x4bc>
    10be:	24 e0       	ldi	r18, 0x04	; 4
    10c0:	a2 0e       	add	r10, r18
    10c2:	b1 1c       	adc	r11, r1
    10c4:	f6 01       	movw	r30, r12
    10c6:	60 81       	ld	r22, Z
    10c8:	71 81       	ldd	r23, Z+1	; 0x01
    10ca:	82 81       	ldd	r24, Z+2	; 0x02
    10cc:	93 81       	ldd	r25, Z+3	; 0x03
    10ce:	0a c0       	rjmp	.+20     	; 0x10e4 <vfprintf+0x4d0>
    10d0:	f2 e0       	ldi	r31, 0x02	; 2
    10d2:	af 0e       	add	r10, r31
    10d4:	b1 1c       	adc	r11, r1
    10d6:	f6 01       	movw	r30, r12
    10d8:	60 81       	ld	r22, Z
    10da:	71 81       	ldd	r23, Z+1	; 0x01
    10dc:	07 2e       	mov	r0, r23
    10de:	00 0c       	add	r0, r0
    10e0:	88 0b       	sbc	r24, r24
    10e2:	99 0b       	sbc	r25, r25
    10e4:	f9 2d       	mov	r31, r9
    10e6:	ff 76       	andi	r31, 0x6F	; 111
    10e8:	9f 2e       	mov	r9, r31
    10ea:	97 ff       	sbrs	r25, 7
    10ec:	09 c0       	rjmp	.+18     	; 0x1100 <vfprintf+0x4ec>
    10ee:	90 95       	com	r25
    10f0:	80 95       	com	r24
    10f2:	70 95       	com	r23
    10f4:	61 95       	neg	r22
    10f6:	7f 4f       	sbci	r23, 0xFF	; 255
    10f8:	8f 4f       	sbci	r24, 0xFF	; 255
    10fa:	9f 4f       	sbci	r25, 0xFF	; 255
    10fc:	f0 68       	ori	r31, 0x80	; 128
    10fe:	9f 2e       	mov	r9, r31
    1100:	2a e0       	ldi	r18, 0x0A	; 10
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	a3 01       	movw	r20, r6
    1106:	0e 94 04 0b 	call	0x1608	; 0x1608 <__ultoa_invert>
    110a:	c8 2e       	mov	r12, r24
    110c:	c6 18       	sub	r12, r6
    110e:	3f c0       	rjmp	.+126    	; 0x118e <vfprintf+0x57a>
    1110:	09 2d       	mov	r16, r9
    1112:	85 37       	cpi	r24, 0x75	; 117
    1114:	21 f4       	brne	.+8      	; 0x111e <vfprintf+0x50a>
    1116:	0f 7e       	andi	r16, 0xEF	; 239
    1118:	2a e0       	ldi	r18, 0x0A	; 10
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	1d c0       	rjmp	.+58     	; 0x1158 <vfprintf+0x544>
    111e:	09 7f       	andi	r16, 0xF9	; 249
    1120:	8f 36       	cpi	r24, 0x6F	; 111
    1122:	91 f0       	breq	.+36     	; 0x1148 <vfprintf+0x534>
    1124:	18 f4       	brcc	.+6      	; 0x112c <vfprintf+0x518>
    1126:	88 35       	cpi	r24, 0x58	; 88
    1128:	59 f0       	breq	.+22     	; 0x1140 <vfprintf+0x52c>
    112a:	c3 c0       	rjmp	.+390    	; 0x12b2 <vfprintf+0x69e>
    112c:	80 37       	cpi	r24, 0x70	; 112
    112e:	19 f0       	breq	.+6      	; 0x1136 <vfprintf+0x522>
    1130:	88 37       	cpi	r24, 0x78	; 120
    1132:	11 f0       	breq	.+4      	; 0x1138 <vfprintf+0x524>
    1134:	be c0       	rjmp	.+380    	; 0x12b2 <vfprintf+0x69e>
    1136:	00 61       	ori	r16, 0x10	; 16
    1138:	04 ff       	sbrs	r16, 4
    113a:	09 c0       	rjmp	.+18     	; 0x114e <vfprintf+0x53a>
    113c:	04 60       	ori	r16, 0x04	; 4
    113e:	07 c0       	rjmp	.+14     	; 0x114e <vfprintf+0x53a>
    1140:	94 fe       	sbrs	r9, 4
    1142:	08 c0       	rjmp	.+16     	; 0x1154 <vfprintf+0x540>
    1144:	06 60       	ori	r16, 0x06	; 6
    1146:	06 c0       	rjmp	.+12     	; 0x1154 <vfprintf+0x540>
    1148:	28 e0       	ldi	r18, 0x08	; 8
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	05 c0       	rjmp	.+10     	; 0x1158 <vfprintf+0x544>
    114e:	20 e1       	ldi	r18, 0x10	; 16
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <vfprintf+0x544>
    1154:	20 e1       	ldi	r18, 0x10	; 16
    1156:	32 e0       	ldi	r19, 0x02	; 2
    1158:	56 01       	movw	r10, r12
    115a:	07 ff       	sbrs	r16, 7
    115c:	09 c0       	rjmp	.+18     	; 0x1170 <vfprintf+0x55c>
    115e:	84 e0       	ldi	r24, 0x04	; 4
    1160:	a8 0e       	add	r10, r24
    1162:	b1 1c       	adc	r11, r1
    1164:	f6 01       	movw	r30, r12
    1166:	60 81       	ld	r22, Z
    1168:	71 81       	ldd	r23, Z+1	; 0x01
    116a:	82 81       	ldd	r24, Z+2	; 0x02
    116c:	93 81       	ldd	r25, Z+3	; 0x03
    116e:	08 c0       	rjmp	.+16     	; 0x1180 <vfprintf+0x56c>
    1170:	f2 e0       	ldi	r31, 0x02	; 2
    1172:	af 0e       	add	r10, r31
    1174:	b1 1c       	adc	r11, r1
    1176:	f6 01       	movw	r30, r12
    1178:	60 81       	ld	r22, Z
    117a:	71 81       	ldd	r23, Z+1	; 0x01
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a3 01       	movw	r20, r6
    1182:	0e 94 04 0b 	call	0x1608	; 0x1608 <__ultoa_invert>
    1186:	c8 2e       	mov	r12, r24
    1188:	c6 18       	sub	r12, r6
    118a:	0f 77       	andi	r16, 0x7F	; 127
    118c:	90 2e       	mov	r9, r16
    118e:	96 fe       	sbrs	r9, 6
    1190:	0b c0       	rjmp	.+22     	; 0x11a8 <vfprintf+0x594>
    1192:	09 2d       	mov	r16, r9
    1194:	0e 7f       	andi	r16, 0xFE	; 254
    1196:	c1 16       	cp	r12, r17
    1198:	50 f4       	brcc	.+20     	; 0x11ae <vfprintf+0x59a>
    119a:	94 fe       	sbrs	r9, 4
    119c:	0a c0       	rjmp	.+20     	; 0x11b2 <vfprintf+0x59e>
    119e:	92 fc       	sbrc	r9, 2
    11a0:	08 c0       	rjmp	.+16     	; 0x11b2 <vfprintf+0x59e>
    11a2:	09 2d       	mov	r16, r9
    11a4:	0e 7e       	andi	r16, 0xEE	; 238
    11a6:	05 c0       	rjmp	.+10     	; 0x11b2 <vfprintf+0x59e>
    11a8:	dc 2c       	mov	r13, r12
    11aa:	09 2d       	mov	r16, r9
    11ac:	03 c0       	rjmp	.+6      	; 0x11b4 <vfprintf+0x5a0>
    11ae:	dc 2c       	mov	r13, r12
    11b0:	01 c0       	rjmp	.+2      	; 0x11b4 <vfprintf+0x5a0>
    11b2:	d1 2e       	mov	r13, r17
    11b4:	04 ff       	sbrs	r16, 4
    11b6:	0d c0       	rjmp	.+26     	; 0x11d2 <vfprintf+0x5be>
    11b8:	fe 01       	movw	r30, r28
    11ba:	ec 0d       	add	r30, r12
    11bc:	f1 1d       	adc	r31, r1
    11be:	80 81       	ld	r24, Z
    11c0:	80 33       	cpi	r24, 0x30	; 48
    11c2:	11 f4       	brne	.+4      	; 0x11c8 <vfprintf+0x5b4>
    11c4:	09 7e       	andi	r16, 0xE9	; 233
    11c6:	09 c0       	rjmp	.+18     	; 0x11da <vfprintf+0x5c6>
    11c8:	02 ff       	sbrs	r16, 2
    11ca:	06 c0       	rjmp	.+12     	; 0x11d8 <vfprintf+0x5c4>
    11cc:	d3 94       	inc	r13
    11ce:	d3 94       	inc	r13
    11d0:	04 c0       	rjmp	.+8      	; 0x11da <vfprintf+0x5c6>
    11d2:	80 2f       	mov	r24, r16
    11d4:	86 78       	andi	r24, 0x86	; 134
    11d6:	09 f0       	breq	.+2      	; 0x11da <vfprintf+0x5c6>
    11d8:	d3 94       	inc	r13
    11da:	03 fd       	sbrc	r16, 3
    11dc:	11 c0       	rjmp	.+34     	; 0x1200 <vfprintf+0x5ec>
    11de:	00 ff       	sbrs	r16, 0
    11e0:	06 c0       	rjmp	.+12     	; 0x11ee <vfprintf+0x5da>
    11e2:	1c 2d       	mov	r17, r12
    11e4:	d5 14       	cp	r13, r5
    11e6:	80 f4       	brcc	.+32     	; 0x1208 <vfprintf+0x5f4>
    11e8:	15 0d       	add	r17, r5
    11ea:	1d 19       	sub	r17, r13
    11ec:	0d c0       	rjmp	.+26     	; 0x1208 <vfprintf+0x5f4>
    11ee:	d5 14       	cp	r13, r5
    11f0:	58 f4       	brcc	.+22     	; 0x1208 <vfprintf+0x5f4>
    11f2:	b7 01       	movw	r22, r14
    11f4:	80 e2       	ldi	r24, 0x20	; 32
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
    11fc:	d3 94       	inc	r13
    11fe:	f7 cf       	rjmp	.-18     	; 0x11ee <vfprintf+0x5da>
    1200:	d5 14       	cp	r13, r5
    1202:	10 f4       	brcc	.+4      	; 0x1208 <vfprintf+0x5f4>
    1204:	5d 18       	sub	r5, r13
    1206:	01 c0       	rjmp	.+2      	; 0x120a <vfprintf+0x5f6>
    1208:	51 2c       	mov	r5, r1
    120a:	04 ff       	sbrs	r16, 4
    120c:	10 c0       	rjmp	.+32     	; 0x122e <vfprintf+0x61a>
    120e:	b7 01       	movw	r22, r14
    1210:	80 e3       	ldi	r24, 0x30	; 48
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
    1218:	02 ff       	sbrs	r16, 2
    121a:	17 c0       	rjmp	.+46     	; 0x124a <vfprintf+0x636>
    121c:	01 fd       	sbrc	r16, 1
    121e:	03 c0       	rjmp	.+6      	; 0x1226 <vfprintf+0x612>
    1220:	88 e7       	ldi	r24, 0x78	; 120
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 c0       	rjmp	.+4      	; 0x122a <vfprintf+0x616>
    1226:	88 e5       	ldi	r24, 0x58	; 88
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	b7 01       	movw	r22, r14
    122c:	0c c0       	rjmp	.+24     	; 0x1246 <vfprintf+0x632>
    122e:	80 2f       	mov	r24, r16
    1230:	86 78       	andi	r24, 0x86	; 134
    1232:	59 f0       	breq	.+22     	; 0x124a <vfprintf+0x636>
    1234:	01 ff       	sbrs	r16, 1
    1236:	02 c0       	rjmp	.+4      	; 0x123c <vfprintf+0x628>
    1238:	8b e2       	ldi	r24, 0x2B	; 43
    123a:	01 c0       	rjmp	.+2      	; 0x123e <vfprintf+0x62a>
    123c:	80 e2       	ldi	r24, 0x20	; 32
    123e:	07 fd       	sbrc	r16, 7
    1240:	8d e2       	ldi	r24, 0x2D	; 45
    1242:	b7 01       	movw	r22, r14
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
    124a:	c1 16       	cp	r12, r17
    124c:	38 f4       	brcc	.+14     	; 0x125c <vfprintf+0x648>
    124e:	b7 01       	movw	r22, r14
    1250:	80 e3       	ldi	r24, 0x30	; 48
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
    1258:	11 50       	subi	r17, 0x01	; 1
    125a:	f7 cf       	rjmp	.-18     	; 0x124a <vfprintf+0x636>
    125c:	ca 94       	dec	r12
    125e:	f3 01       	movw	r30, r6
    1260:	ec 0d       	add	r30, r12
    1262:	f1 1d       	adc	r31, r1
    1264:	80 81       	ld	r24, Z
    1266:	b7 01       	movw	r22, r14
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
    126e:	c1 10       	cpse	r12, r1
    1270:	f5 cf       	rjmp	.-22     	; 0x125c <vfprintf+0x648>
    1272:	15 c0       	rjmp	.+42     	; 0x129e <vfprintf+0x68a>
    1274:	f4 e0       	ldi	r31, 0x04	; 4
    1276:	f5 15       	cp	r31, r5
    1278:	60 f5       	brcc	.+88     	; 0x12d2 <vfprintf+0x6be>
    127a:	84 e0       	ldi	r24, 0x04	; 4
    127c:	58 1a       	sub	r5, r24
    127e:	93 fe       	sbrs	r9, 3
    1280:	1f c0       	rjmp	.+62     	; 0x12c0 <vfprintf+0x6ac>
    1282:	01 11       	cpse	r16, r1
    1284:	27 c0       	rjmp	.+78     	; 0x12d4 <vfprintf+0x6c0>
    1286:	2c 85       	ldd	r18, Y+12	; 0x0c
    1288:	23 ff       	sbrs	r18, 3
    128a:	2a c0       	rjmp	.+84     	; 0x12e0 <vfprintf+0x6cc>
    128c:	04 e5       	ldi	r16, 0x54	; 84
    128e:	10 e0       	ldi	r17, 0x00	; 0
    1290:	39 2d       	mov	r19, r9
    1292:	30 71       	andi	r19, 0x10	; 16
    1294:	93 2e       	mov	r9, r19
    1296:	f8 01       	movw	r30, r16
    1298:	84 91       	lpm	r24, Z
    129a:	81 11       	cpse	r24, r1
    129c:	24 c0       	rjmp	.+72     	; 0x12e6 <vfprintf+0x6d2>
    129e:	55 20       	and	r5, r5
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <vfprintf+0x690>
    12a2:	e4 cc       	rjmp	.-1592   	; 0xc6c <vfprintf+0x58>
    12a4:	b7 01       	movw	r22, r14
    12a6:	80 e2       	ldi	r24, 0x20	; 32
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
    12ae:	5a 94       	dec	r5
    12b0:	f6 cf       	rjmp	.-20     	; 0x129e <vfprintf+0x68a>
    12b2:	f7 01       	movw	r30, r14
    12b4:	86 81       	ldd	r24, Z+6	; 0x06
    12b6:	97 81       	ldd	r25, Z+7	; 0x07
    12b8:	26 c0       	rjmp	.+76     	; 0x1306 <vfprintf+0x6f2>
    12ba:	8f ef       	ldi	r24, 0xFF	; 255
    12bc:	9f ef       	ldi	r25, 0xFF	; 255
    12be:	23 c0       	rjmp	.+70     	; 0x1306 <vfprintf+0x6f2>
    12c0:	b7 01       	movw	r22, r14
    12c2:	80 e2       	ldi	r24, 0x20	; 32
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
    12ca:	5a 94       	dec	r5
    12cc:	51 10       	cpse	r5, r1
    12ce:	f8 cf       	rjmp	.-16     	; 0x12c0 <vfprintf+0x6ac>
    12d0:	d8 cf       	rjmp	.-80     	; 0x1282 <vfprintf+0x66e>
    12d2:	51 2c       	mov	r5, r1
    12d4:	b7 01       	movw	r22, r14
    12d6:	80 2f       	mov	r24, r16
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
    12de:	d3 cf       	rjmp	.-90     	; 0x1286 <vfprintf+0x672>
    12e0:	08 e5       	ldi	r16, 0x58	; 88
    12e2:	10 e0       	ldi	r17, 0x00	; 0
    12e4:	d5 cf       	rjmp	.-86     	; 0x1290 <vfprintf+0x67c>
    12e6:	91 10       	cpse	r9, r1
    12e8:	80 52       	subi	r24, 0x20	; 32
    12ea:	b7 01       	movw	r22, r14
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	0e 94 ac 0a 	call	0x1558	; 0x1558 <fputc>
    12f2:	0f 5f       	subi	r16, 0xFF	; 255
    12f4:	1f 4f       	sbci	r17, 0xFF	; 255
    12f6:	cf cf       	rjmp	.-98     	; 0x1296 <vfprintf+0x682>
    12f8:	23 e0       	ldi	r18, 0x03	; 3
    12fa:	25 15       	cp	r18, r5
    12fc:	10 f4       	brcc	.+4      	; 0x1302 <vfprintf+0x6ee>
    12fe:	83 e0       	ldi	r24, 0x03	; 3
    1300:	bd cf       	rjmp	.-134    	; 0x127c <vfprintf+0x668>
    1302:	51 2c       	mov	r5, r1
    1304:	c0 cf       	rjmp	.-128    	; 0x1286 <vfprintf+0x672>
    1306:	60 96       	adiw	r28, 0x10	; 16
    1308:	e2 e1       	ldi	r30, 0x12	; 18
    130a:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__epilogue_restores__>

0000130e <__prologue_saves__>:
    130e:	2f 92       	push	r2
    1310:	3f 92       	push	r3
    1312:	4f 92       	push	r4
    1314:	5f 92       	push	r5
    1316:	6f 92       	push	r6
    1318:	7f 92       	push	r7
    131a:	8f 92       	push	r8
    131c:	9f 92       	push	r9
    131e:	af 92       	push	r10
    1320:	bf 92       	push	r11
    1322:	cf 92       	push	r12
    1324:	df 92       	push	r13
    1326:	ef 92       	push	r14
    1328:	ff 92       	push	r15
    132a:	0f 93       	push	r16
    132c:	1f 93       	push	r17
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	ca 1b       	sub	r28, r26
    1338:	db 0b       	sbc	r29, r27
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61
    1344:	09 94       	ijmp

00001346 <__epilogue_restores__>:
    1346:	2a 88       	ldd	r2, Y+18	; 0x12
    1348:	39 88       	ldd	r3, Y+17	; 0x11
    134a:	48 88       	ldd	r4, Y+16	; 0x10
    134c:	5f 84       	ldd	r5, Y+15	; 0x0f
    134e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1350:	7d 84       	ldd	r7, Y+13	; 0x0d
    1352:	8c 84       	ldd	r8, Y+12	; 0x0c
    1354:	9b 84       	ldd	r9, Y+11	; 0x0b
    1356:	aa 84       	ldd	r10, Y+10	; 0x0a
    1358:	b9 84       	ldd	r11, Y+9	; 0x09
    135a:	c8 84       	ldd	r12, Y+8	; 0x08
    135c:	df 80       	ldd	r13, Y+7	; 0x07
    135e:	ee 80       	ldd	r14, Y+6	; 0x06
    1360:	fd 80       	ldd	r15, Y+5	; 0x05
    1362:	0c 81       	ldd	r16, Y+4	; 0x04
    1364:	1b 81       	ldd	r17, Y+3	; 0x03
    1366:	aa 81       	ldd	r26, Y+2	; 0x02
    1368:	b9 81       	ldd	r27, Y+1	; 0x01
    136a:	ce 0f       	add	r28, r30
    136c:	d1 1d       	adc	r29, r1
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	de bf       	out	0x3e, r29	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	cd bf       	out	0x3d, r28	; 61
    1378:	ed 01       	movw	r28, r26
    137a:	08 95       	ret

0000137c <__ftoa_engine>:
    137c:	28 30       	cpi	r18, 0x08	; 8
    137e:	08 f0       	brcs	.+2      	; 0x1382 <__ftoa_engine+0x6>
    1380:	27 e0       	ldi	r18, 0x07	; 7
    1382:	33 27       	eor	r19, r19
    1384:	da 01       	movw	r26, r20
    1386:	99 0f       	add	r25, r25
    1388:	31 1d       	adc	r19, r1
    138a:	87 fd       	sbrc	r24, 7
    138c:	91 60       	ori	r25, 0x01	; 1
    138e:	00 96       	adiw	r24, 0x00	; 0
    1390:	61 05       	cpc	r22, r1
    1392:	71 05       	cpc	r23, r1
    1394:	39 f4       	brne	.+14     	; 0x13a4 <__ftoa_engine+0x28>
    1396:	32 60       	ori	r19, 0x02	; 2
    1398:	2e 5f       	subi	r18, 0xFE	; 254
    139a:	3d 93       	st	X+, r19
    139c:	30 e3       	ldi	r19, 0x30	; 48
    139e:	2a 95       	dec	r18
    13a0:	e1 f7       	brne	.-8      	; 0x139a <__ftoa_engine+0x1e>
    13a2:	08 95       	ret
    13a4:	9f 3f       	cpi	r25, 0xFF	; 255
    13a6:	30 f0       	brcs	.+12     	; 0x13b4 <__ftoa_engine+0x38>
    13a8:	80 38       	cpi	r24, 0x80	; 128
    13aa:	71 05       	cpc	r23, r1
    13ac:	61 05       	cpc	r22, r1
    13ae:	09 f0       	breq	.+2      	; 0x13b2 <__ftoa_engine+0x36>
    13b0:	3c 5f       	subi	r19, 0xFC	; 252
    13b2:	3c 5f       	subi	r19, 0xFC	; 252
    13b4:	3d 93       	st	X+, r19
    13b6:	91 30       	cpi	r25, 0x01	; 1
    13b8:	08 f0       	brcs	.+2      	; 0x13bc <__ftoa_engine+0x40>
    13ba:	80 68       	ori	r24, 0x80	; 128
    13bc:	91 1d       	adc	r25, r1
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	1f 93       	push	r17
    13c4:	0f 93       	push	r16
    13c6:	ff 92       	push	r15
    13c8:	ef 92       	push	r14
    13ca:	19 2f       	mov	r17, r25
    13cc:	98 7f       	andi	r25, 0xF8	; 248
    13ce:	96 95       	lsr	r25
    13d0:	e9 2f       	mov	r30, r25
    13d2:	96 95       	lsr	r25
    13d4:	96 95       	lsr	r25
    13d6:	e9 0f       	add	r30, r25
    13d8:	ff 27       	eor	r31, r31
    13da:	ea 54       	subi	r30, 0x4A	; 74
    13dc:	ff 4f       	sbci	r31, 0xFF	; 255
    13de:	99 27       	eor	r25, r25
    13e0:	33 27       	eor	r19, r19
    13e2:	ee 24       	eor	r14, r14
    13e4:	ff 24       	eor	r15, r15
    13e6:	a7 01       	movw	r20, r14
    13e8:	e7 01       	movw	r28, r14
    13ea:	05 90       	lpm	r0, Z+
    13ec:	08 94       	sec
    13ee:	07 94       	ror	r0
    13f0:	28 f4       	brcc	.+10     	; 0x13fc <__ftoa_engine+0x80>
    13f2:	36 0f       	add	r19, r22
    13f4:	e7 1e       	adc	r14, r23
    13f6:	f8 1e       	adc	r15, r24
    13f8:	49 1f       	adc	r20, r25
    13fa:	51 1d       	adc	r21, r1
    13fc:	66 0f       	add	r22, r22
    13fe:	77 1f       	adc	r23, r23
    1400:	88 1f       	adc	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	06 94       	lsr	r0
    1406:	a1 f7       	brne	.-24     	; 0x13f0 <__ftoa_engine+0x74>
    1408:	05 90       	lpm	r0, Z+
    140a:	07 94       	ror	r0
    140c:	28 f4       	brcc	.+10     	; 0x1418 <__ftoa_engine+0x9c>
    140e:	e7 0e       	add	r14, r23
    1410:	f8 1e       	adc	r15, r24
    1412:	49 1f       	adc	r20, r25
    1414:	56 1f       	adc	r21, r22
    1416:	c1 1d       	adc	r28, r1
    1418:	77 0f       	add	r23, r23
    141a:	88 1f       	adc	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	66 1f       	adc	r22, r22
    1420:	06 94       	lsr	r0
    1422:	a1 f7       	brne	.-24     	; 0x140c <__ftoa_engine+0x90>
    1424:	05 90       	lpm	r0, Z+
    1426:	07 94       	ror	r0
    1428:	28 f4       	brcc	.+10     	; 0x1434 <__ftoa_engine+0xb8>
    142a:	f8 0e       	add	r15, r24
    142c:	49 1f       	adc	r20, r25
    142e:	56 1f       	adc	r21, r22
    1430:	c7 1f       	adc	r28, r23
    1432:	d1 1d       	adc	r29, r1
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	66 1f       	adc	r22, r22
    143a:	77 1f       	adc	r23, r23
    143c:	06 94       	lsr	r0
    143e:	a1 f7       	brne	.-24     	; 0x1428 <__ftoa_engine+0xac>
    1440:	05 90       	lpm	r0, Z+
    1442:	07 94       	ror	r0
    1444:	20 f4       	brcc	.+8      	; 0x144e <__ftoa_engine+0xd2>
    1446:	49 0f       	add	r20, r25
    1448:	56 1f       	adc	r21, r22
    144a:	c7 1f       	adc	r28, r23
    144c:	d8 1f       	adc	r29, r24
    144e:	99 0f       	add	r25, r25
    1450:	66 1f       	adc	r22, r22
    1452:	77 1f       	adc	r23, r23
    1454:	88 1f       	adc	r24, r24
    1456:	06 94       	lsr	r0
    1458:	a9 f7       	brne	.-22     	; 0x1444 <__ftoa_engine+0xc8>
    145a:	84 91       	lpm	r24, Z
    145c:	10 95       	com	r17
    145e:	17 70       	andi	r17, 0x07	; 7
    1460:	41 f0       	breq	.+16     	; 0x1472 <__ftoa_engine+0xf6>
    1462:	d6 95       	lsr	r29
    1464:	c7 95       	ror	r28
    1466:	57 95       	ror	r21
    1468:	47 95       	ror	r20
    146a:	f7 94       	ror	r15
    146c:	e7 94       	ror	r14
    146e:	1a 95       	dec	r17
    1470:	c1 f7       	brne	.-16     	; 0x1462 <__ftoa_engine+0xe6>
    1472:	ec e5       	ldi	r30, 0x5C	; 92
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	68 94       	set
    1478:	15 90       	lpm	r1, Z+
    147a:	15 91       	lpm	r17, Z+
    147c:	35 91       	lpm	r19, Z+
    147e:	65 91       	lpm	r22, Z+
    1480:	95 91       	lpm	r25, Z+
    1482:	05 90       	lpm	r0, Z+
    1484:	7f e2       	ldi	r23, 0x2F	; 47
    1486:	73 95       	inc	r23
    1488:	e1 18       	sub	r14, r1
    148a:	f1 0a       	sbc	r15, r17
    148c:	43 0b       	sbc	r20, r19
    148e:	56 0b       	sbc	r21, r22
    1490:	c9 0b       	sbc	r28, r25
    1492:	d0 09       	sbc	r29, r0
    1494:	c0 f7       	brcc	.-16     	; 0x1486 <__ftoa_engine+0x10a>
    1496:	e1 0c       	add	r14, r1
    1498:	f1 1e       	adc	r15, r17
    149a:	43 1f       	adc	r20, r19
    149c:	56 1f       	adc	r21, r22
    149e:	c9 1f       	adc	r28, r25
    14a0:	d0 1d       	adc	r29, r0
    14a2:	7e f4       	brtc	.+30     	; 0x14c2 <__ftoa_engine+0x146>
    14a4:	70 33       	cpi	r23, 0x30	; 48
    14a6:	11 f4       	brne	.+4      	; 0x14ac <__ftoa_engine+0x130>
    14a8:	8a 95       	dec	r24
    14aa:	e6 cf       	rjmp	.-52     	; 0x1478 <__ftoa_engine+0xfc>
    14ac:	e8 94       	clt
    14ae:	01 50       	subi	r16, 0x01	; 1
    14b0:	30 f0       	brcs	.+12     	; 0x14be <__ftoa_engine+0x142>
    14b2:	08 0f       	add	r16, r24
    14b4:	0a f4       	brpl	.+2      	; 0x14b8 <__ftoa_engine+0x13c>
    14b6:	00 27       	eor	r16, r16
    14b8:	02 17       	cp	r16, r18
    14ba:	08 f4       	brcc	.+2      	; 0x14be <__ftoa_engine+0x142>
    14bc:	20 2f       	mov	r18, r16
    14be:	23 95       	inc	r18
    14c0:	02 2f       	mov	r16, r18
    14c2:	7a 33       	cpi	r23, 0x3A	; 58
    14c4:	28 f0       	brcs	.+10     	; 0x14d0 <__ftoa_engine+0x154>
    14c6:	79 e3       	ldi	r23, 0x39	; 57
    14c8:	7d 93       	st	X+, r23
    14ca:	2a 95       	dec	r18
    14cc:	e9 f7       	brne	.-6      	; 0x14c8 <__ftoa_engine+0x14c>
    14ce:	10 c0       	rjmp	.+32     	; 0x14f0 <__ftoa_engine+0x174>
    14d0:	7d 93       	st	X+, r23
    14d2:	2a 95       	dec	r18
    14d4:	89 f6       	brne	.-94     	; 0x1478 <__ftoa_engine+0xfc>
    14d6:	06 94       	lsr	r0
    14d8:	97 95       	ror	r25
    14da:	67 95       	ror	r22
    14dc:	37 95       	ror	r19
    14de:	17 95       	ror	r17
    14e0:	17 94       	ror	r1
    14e2:	e1 18       	sub	r14, r1
    14e4:	f1 0a       	sbc	r15, r17
    14e6:	43 0b       	sbc	r20, r19
    14e8:	56 0b       	sbc	r21, r22
    14ea:	c9 0b       	sbc	r28, r25
    14ec:	d0 09       	sbc	r29, r0
    14ee:	98 f0       	brcs	.+38     	; 0x1516 <__ftoa_engine+0x19a>
    14f0:	23 95       	inc	r18
    14f2:	7e 91       	ld	r23, -X
    14f4:	73 95       	inc	r23
    14f6:	7a 33       	cpi	r23, 0x3A	; 58
    14f8:	08 f0       	brcs	.+2      	; 0x14fc <__ftoa_engine+0x180>
    14fa:	70 e3       	ldi	r23, 0x30	; 48
    14fc:	7c 93       	st	X, r23
    14fe:	20 13       	cpse	r18, r16
    1500:	b8 f7       	brcc	.-18     	; 0x14f0 <__ftoa_engine+0x174>
    1502:	7e 91       	ld	r23, -X
    1504:	70 61       	ori	r23, 0x10	; 16
    1506:	7d 93       	st	X+, r23
    1508:	30 f0       	brcs	.+12     	; 0x1516 <__ftoa_engine+0x19a>
    150a:	83 95       	inc	r24
    150c:	71 e3       	ldi	r23, 0x31	; 49
    150e:	7d 93       	st	X+, r23
    1510:	70 e3       	ldi	r23, 0x30	; 48
    1512:	2a 95       	dec	r18
    1514:	e1 f7       	brne	.-8      	; 0x150e <__ftoa_engine+0x192>
    1516:	11 24       	eor	r1, r1
    1518:	ef 90       	pop	r14
    151a:	ff 90       	pop	r15
    151c:	0f 91       	pop	r16
    151e:	1f 91       	pop	r17
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	99 27       	eor	r25, r25
    1526:	87 fd       	sbrc	r24, 7
    1528:	90 95       	com	r25
    152a:	08 95       	ret

0000152c <strnlen_P>:
    152c:	fc 01       	movw	r30, r24
    152e:	05 90       	lpm	r0, Z+
    1530:	61 50       	subi	r22, 0x01	; 1
    1532:	70 40       	sbci	r23, 0x00	; 0
    1534:	01 10       	cpse	r0, r1
    1536:	d8 f7       	brcc	.-10     	; 0x152e <strnlen_P+0x2>
    1538:	80 95       	com	r24
    153a:	90 95       	com	r25
    153c:	8e 0f       	add	r24, r30
    153e:	9f 1f       	adc	r25, r31
    1540:	08 95       	ret

00001542 <strnlen>:
    1542:	fc 01       	movw	r30, r24
    1544:	61 50       	subi	r22, 0x01	; 1
    1546:	70 40       	sbci	r23, 0x00	; 0
    1548:	01 90       	ld	r0, Z+
    154a:	01 10       	cpse	r0, r1
    154c:	d8 f7       	brcc	.-10     	; 0x1544 <strnlen+0x2>
    154e:	80 95       	com	r24
    1550:	90 95       	com	r25
    1552:	8e 0f       	add	r24, r30
    1554:	9f 1f       	adc	r25, r31
    1556:	08 95       	ret

00001558 <fputc>:
    1558:	0f 93       	push	r16
    155a:	1f 93       	push	r17
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	fb 01       	movw	r30, r22
    1562:	23 81       	ldd	r18, Z+3	; 0x03
    1564:	21 fd       	sbrc	r18, 1
    1566:	03 c0       	rjmp	.+6      	; 0x156e <fputc+0x16>
    1568:	8f ef       	ldi	r24, 0xFF	; 255
    156a:	9f ef       	ldi	r25, 0xFF	; 255
    156c:	2c c0       	rjmp	.+88     	; 0x15c6 <fputc+0x6e>
    156e:	22 ff       	sbrs	r18, 2
    1570:	16 c0       	rjmp	.+44     	; 0x159e <fputc+0x46>
    1572:	46 81       	ldd	r20, Z+6	; 0x06
    1574:	57 81       	ldd	r21, Z+7	; 0x07
    1576:	24 81       	ldd	r18, Z+4	; 0x04
    1578:	35 81       	ldd	r19, Z+5	; 0x05
    157a:	42 17       	cp	r20, r18
    157c:	53 07       	cpc	r21, r19
    157e:	44 f4       	brge	.+16     	; 0x1590 <fputc+0x38>
    1580:	a0 81       	ld	r26, Z
    1582:	b1 81       	ldd	r27, Z+1	; 0x01
    1584:	9d 01       	movw	r18, r26
    1586:	2f 5f       	subi	r18, 0xFF	; 255
    1588:	3f 4f       	sbci	r19, 0xFF	; 255
    158a:	31 83       	std	Z+1, r19	; 0x01
    158c:	20 83       	st	Z, r18
    158e:	8c 93       	st	X, r24
    1590:	26 81       	ldd	r18, Z+6	; 0x06
    1592:	37 81       	ldd	r19, Z+7	; 0x07
    1594:	2f 5f       	subi	r18, 0xFF	; 255
    1596:	3f 4f       	sbci	r19, 0xFF	; 255
    1598:	37 83       	std	Z+7, r19	; 0x07
    159a:	26 83       	std	Z+6, r18	; 0x06
    159c:	14 c0       	rjmp	.+40     	; 0x15c6 <fputc+0x6e>
    159e:	8b 01       	movw	r16, r22
    15a0:	ec 01       	movw	r28, r24
    15a2:	fb 01       	movw	r30, r22
    15a4:	00 84       	ldd	r0, Z+8	; 0x08
    15a6:	f1 85       	ldd	r31, Z+9	; 0x09
    15a8:	e0 2d       	mov	r30, r0
    15aa:	09 95       	icall
    15ac:	89 2b       	or	r24, r25
    15ae:	e1 f6       	brne	.-72     	; 0x1568 <fputc+0x10>
    15b0:	d8 01       	movw	r26, r16
    15b2:	16 96       	adiw	r26, 0x06	; 6
    15b4:	8d 91       	ld	r24, X+
    15b6:	9c 91       	ld	r25, X
    15b8:	17 97       	sbiw	r26, 0x07	; 7
    15ba:	01 96       	adiw	r24, 0x01	; 1
    15bc:	17 96       	adiw	r26, 0x07	; 7
    15be:	9c 93       	st	X, r25
    15c0:	8e 93       	st	-X, r24
    15c2:	16 97       	sbiw	r26, 0x06	; 6
    15c4:	ce 01       	movw	r24, r28
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	1f 91       	pop	r17
    15cc:	0f 91       	pop	r16
    15ce:	08 95       	ret

000015d0 <vsprintf>:
    15d0:	ae e0       	ldi	r26, 0x0E	; 14
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	ee ee       	ldi	r30, 0xEE	; 238
    15d6:	fa e0       	ldi	r31, 0x0A	; 10
    15d8:	0c 94 95 09 	jmp	0x132a	; 0x132a <__prologue_saves__+0x1c>
    15dc:	8c 01       	movw	r16, r24
    15de:	86 e0       	ldi	r24, 0x06	; 6
    15e0:	8c 83       	std	Y+4, r24	; 0x04
    15e2:	1a 83       	std	Y+2, r17	; 0x02
    15e4:	09 83       	std	Y+1, r16	; 0x01
    15e6:	8f ef       	ldi	r24, 0xFF	; 255
    15e8:	9f e7       	ldi	r25, 0x7F	; 127
    15ea:	9e 83       	std	Y+6, r25	; 0x06
    15ec:	8d 83       	std	Y+5, r24	; 0x05
    15ee:	ce 01       	movw	r24, r28
    15f0:	01 96       	adiw	r24, 0x01	; 1
    15f2:	0e 94 0a 06 	call	0xc14	; 0xc14 <vfprintf>
    15f6:	ef 81       	ldd	r30, Y+7	; 0x07
    15f8:	f8 85       	ldd	r31, Y+8	; 0x08
    15fa:	e0 0f       	add	r30, r16
    15fc:	f1 1f       	adc	r31, r17
    15fe:	10 82       	st	Z, r1
    1600:	2e 96       	adiw	r28, 0x0e	; 14
    1602:	e4 e0       	ldi	r30, 0x04	; 4
    1604:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__epilogue_restores__+0x1c>

00001608 <__ultoa_invert>:
    1608:	fa 01       	movw	r30, r20
    160a:	aa 27       	eor	r26, r26
    160c:	28 30       	cpi	r18, 0x08	; 8
    160e:	51 f1       	breq	.+84     	; 0x1664 <__ultoa_invert+0x5c>
    1610:	20 31       	cpi	r18, 0x10	; 16
    1612:	81 f1       	breq	.+96     	; 0x1674 <__ultoa_invert+0x6c>
    1614:	e8 94       	clt
    1616:	6f 93       	push	r22
    1618:	6e 7f       	andi	r22, 0xFE	; 254
    161a:	6e 5f       	subi	r22, 0xFE	; 254
    161c:	7f 4f       	sbci	r23, 0xFF	; 255
    161e:	8f 4f       	sbci	r24, 0xFF	; 255
    1620:	9f 4f       	sbci	r25, 0xFF	; 255
    1622:	af 4f       	sbci	r26, 0xFF	; 255
    1624:	b1 e0       	ldi	r27, 0x01	; 1
    1626:	3e d0       	rcall	.+124    	; 0x16a4 <__ultoa_invert+0x9c>
    1628:	b4 e0       	ldi	r27, 0x04	; 4
    162a:	3c d0       	rcall	.+120    	; 0x16a4 <__ultoa_invert+0x9c>
    162c:	67 0f       	add	r22, r23
    162e:	78 1f       	adc	r23, r24
    1630:	89 1f       	adc	r24, r25
    1632:	9a 1f       	adc	r25, r26
    1634:	a1 1d       	adc	r26, r1
    1636:	68 0f       	add	r22, r24
    1638:	79 1f       	adc	r23, r25
    163a:	8a 1f       	adc	r24, r26
    163c:	91 1d       	adc	r25, r1
    163e:	a1 1d       	adc	r26, r1
    1640:	6a 0f       	add	r22, r26
    1642:	71 1d       	adc	r23, r1
    1644:	81 1d       	adc	r24, r1
    1646:	91 1d       	adc	r25, r1
    1648:	a1 1d       	adc	r26, r1
    164a:	20 d0       	rcall	.+64     	; 0x168c <__ultoa_invert+0x84>
    164c:	09 f4       	brne	.+2      	; 0x1650 <__ultoa_invert+0x48>
    164e:	68 94       	set
    1650:	3f 91       	pop	r19
    1652:	2a e0       	ldi	r18, 0x0A	; 10
    1654:	26 9f       	mul	r18, r22
    1656:	11 24       	eor	r1, r1
    1658:	30 19       	sub	r19, r0
    165a:	30 5d       	subi	r19, 0xD0	; 208
    165c:	31 93       	st	Z+, r19
    165e:	de f6       	brtc	.-74     	; 0x1616 <__ultoa_invert+0xe>
    1660:	cf 01       	movw	r24, r30
    1662:	08 95       	ret
    1664:	46 2f       	mov	r20, r22
    1666:	47 70       	andi	r20, 0x07	; 7
    1668:	40 5d       	subi	r20, 0xD0	; 208
    166a:	41 93       	st	Z+, r20
    166c:	b3 e0       	ldi	r27, 0x03	; 3
    166e:	0f d0       	rcall	.+30     	; 0x168e <__ultoa_invert+0x86>
    1670:	c9 f7       	brne	.-14     	; 0x1664 <__ultoa_invert+0x5c>
    1672:	f6 cf       	rjmp	.-20     	; 0x1660 <__ultoa_invert+0x58>
    1674:	46 2f       	mov	r20, r22
    1676:	4f 70       	andi	r20, 0x0F	; 15
    1678:	40 5d       	subi	r20, 0xD0	; 208
    167a:	4a 33       	cpi	r20, 0x3A	; 58
    167c:	18 f0       	brcs	.+6      	; 0x1684 <__ultoa_invert+0x7c>
    167e:	49 5d       	subi	r20, 0xD9	; 217
    1680:	31 fd       	sbrc	r19, 1
    1682:	40 52       	subi	r20, 0x20	; 32
    1684:	41 93       	st	Z+, r20
    1686:	02 d0       	rcall	.+4      	; 0x168c <__ultoa_invert+0x84>
    1688:	a9 f7       	brne	.-22     	; 0x1674 <__ultoa_invert+0x6c>
    168a:	ea cf       	rjmp	.-44     	; 0x1660 <__ultoa_invert+0x58>
    168c:	b4 e0       	ldi	r27, 0x04	; 4
    168e:	a6 95       	lsr	r26
    1690:	97 95       	ror	r25
    1692:	87 95       	ror	r24
    1694:	77 95       	ror	r23
    1696:	67 95       	ror	r22
    1698:	ba 95       	dec	r27
    169a:	c9 f7       	brne	.-14     	; 0x168e <__ultoa_invert+0x86>
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	61 05       	cpc	r22, r1
    16a0:	71 05       	cpc	r23, r1
    16a2:	08 95       	ret
    16a4:	9b 01       	movw	r18, r22
    16a6:	ac 01       	movw	r20, r24
    16a8:	0a 2e       	mov	r0, r26
    16aa:	06 94       	lsr	r0
    16ac:	57 95       	ror	r21
    16ae:	47 95       	ror	r20
    16b0:	37 95       	ror	r19
    16b2:	27 95       	ror	r18
    16b4:	ba 95       	dec	r27
    16b6:	c9 f7       	brne	.-14     	; 0x16aa <__ultoa_invert+0xa2>
    16b8:	62 0f       	add	r22, r18
    16ba:	73 1f       	adc	r23, r19
    16bc:	84 1f       	adc	r24, r20
    16be:	95 1f       	adc	r25, r21
    16c0:	a0 1d       	adc	r26, r0
    16c2:	08 95       	ret

000016c4 <_exit>:
    16c4:	f8 94       	cli

000016c6 <__stop_program>:
    16c6:	ff cf       	rjmp	.-2      	; 0x16c6 <__stop_program>
